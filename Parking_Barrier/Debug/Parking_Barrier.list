
Parking_Barrier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08008770  08008770  00018770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cec  08008cec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cf4  08008cf4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf8  08008cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000001f4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2b2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ba  00000000  00000000  0002f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00031c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023118  00000000  00000000  00033888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116fc  00000000  00000000  000569a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0e8  00000000  00000000  0006809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135184  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d78  00000000  00000000  001351d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008758 	.word	0x08008758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008758 	.word	0x08008758

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f001 ffad 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f9bb 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fb23 	bl	8001544 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000efe:	f000 fa73 	bl	80013e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f02:	f000 fad3 	bl	80014ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f06:	f000 fa39 	bl	800137c <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f0a:	f000 fa1b 	bl	8001344 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	48bd      	ldr	r0, [pc, #756]	; (8001208 <main+0x31c>)
 8000f12:	f003 fdf1 	bl	8004af8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	48bb      	ldr	r0, [pc, #748]	; (8001208 <main+0x31c>)
 8000f1a:	f003 fded 	bl	8004af8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000f1e:	48bb      	ldr	r0, [pc, #748]	; (800120c <main+0x320>)
 8000f20:	f003 fd32 	bl	8004988 <HAL_TIM_Base_Start>
  LCD1602_Init();
 8000f24:	f000 fc9d 	bl	8001862 <LCD1602_Init>
  MFRC522_Init();
 8000f28:	f001 fd50 	bl	80029cc <MFRC522_Init>

  LCD1602_Clear();
 8000f2c:	f000 fc8f 	bl	800184e <LCD1602_Clear>
  LCD1602_TransferString("Initializing>");
 8000f30:	48b7      	ldr	r0, [pc, #732]	; (8001210 <main+0x324>)
 8000f32:	f000 fcd0 	bl	80018d6 <LCD1602_TransferString>

  /* Initialization, getting the values from the sensors for a few iterations so they get synchronized (otherwise some false values are provided to the main code) */
  for (int i = 0 ; i < 5 ; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e014      	b.n	8000f66 <main+0x7a>
  	 {
  		 HAL_Delay(500);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f40:	f001 fff8 	bl	8002f34 <HAL_Delay>
  		 DHT11_PrintValues();
 8000f44:	f000 fedc 	bl	8001d00 <DHT11_PrintValues>
  		 HAL_Delay(500);
 8000f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f4c:	f001 fff2 	bl	8002f34 <HAL_Delay>
  		 HCSR04_ReadIn();
 8000f50:	f001 f874 	bl	800203c <HCSR04_ReadIn>
  		 HAL_Delay(500);
 8000f54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f58:	f001 ffec 	bl	8002f34 <HAL_Delay>
  		 HCSR04_ReadOut();
 8000f5c:	f001 f88e 	bl	800207c <HCSR04_ReadOut>
  for (int i = 0 ; i < 5 ; i++)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	dde7      	ble.n	8000f3c <main+0x50>
  	 }

  sprintf(spacesPrint,"Spaces left: %d", totalSpaces);
 8000f6c:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <main+0x328>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	49a9      	ldr	r1, [pc, #676]	; (8001218 <main+0x32c>)
 8000f74:	48a9      	ldr	r0, [pc, #676]	; (800121c <main+0x330>)
 8000f76:	f005 f975 	bl	8006264 <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LCD1602_Clear();
 8000f7a:	f000 fc68 	bl	800184e <LCD1602_Clear>

	/* Printing Temperature and Humidity values */
	DHT11_PrintTemp();
 8000f7e:	f000 ff35 	bl	8001dec <DHT11_PrintTemp>
	DHT11_PrintHum();
 8000f82:	f000 ff5b 	bl	8001e3c <DHT11_PrintHum>

	/* If an object approaches any one of the Distance sensors */
	while ((DistanceIn <= 5 || DistanceOut <= 5) && distCount < 5)
 8000f86:	e120      	b.n	80011ca <main+0x2de>
	{
		/* If an object wants to enter (Distance value can vary)*/
		while (DistanceIn <= 5)
		{
			LCD1602_Clear();
 8000f88:	f000 fc61 	bl	800184e <LCD1602_Clear>

			/* Indicate that an object is entering and how many spaces are left (if object had bad authorization attempt or no free spaces left, output error message)*/
			if (isAuthorized == -1)
 8000f8c:	4ba4      	ldr	r3, [pc, #656]	; (8001220 <main+0x334>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d10e      	bne.n	8000fb4 <main+0xc8>
			{
				LCD1602_CursorPosition(0, 0);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fc39 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString("No spaces left");
 8000f9e:	48a1      	ldr	r0, [pc, #644]	; (8001224 <main+0x338>)
 8000fa0:	f000 fc99 	bl	80018d6 <LCD1602_TransferString>
				LCD1602_CursorPosition(1, 0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fc32 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString("or bad auth.");
 8000fac:	489e      	ldr	r0, [pc, #632]	; (8001228 <main+0x33c>)
 8000fae:	f000 fc92 	bl	80018d6 <LCD1602_TransferString>
 8000fb2:	e011      	b.n	8000fd8 <main+0xec>
			}
			else
			{
				LCD1602_CursorPosition(0, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 fc2a 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString("Object entering!");
 8000fbc:	489b      	ldr	r0, [pc, #620]	; (800122c <main+0x340>)
 8000fbe:	f000 fc8a 	bl	80018d6 <LCD1602_TransferString>
				LCD1602_CursorPosition(1, 0);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 fc23 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString(spacesPrint);
 8000fca:	4894      	ldr	r0, [pc, #592]	; (800121c <main+0x330>)
 8000fcc:	f000 fc83 	bl	80018d6 <LCD1602_TransferString>
				HAL_Delay(2000);
 8000fd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd4:	f001 ffae 	bl	8002f34 <HAL_Delay>
			}


			/* If no free spaces are left, gates do not open */
			if (totalSpaces <= 0)
 8000fd8:	4b8e      	ldr	r3, [pc, #568]	; (8001214 <main+0x328>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dc76      	bgt.n	80010ce <main+0x1e2>
			{
				LCD1602_Clear();
 8000fe0:	f000 fc35 	bl	800184e <LCD1602_Clear>
				LCD1602_CursorPosition(0, 0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fc12 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString("No spaces left.");
 8000fec:	4890      	ldr	r0, [pc, #576]	; (8001230 <main+0x344>)
 8000fee:	f000 fc72 	bl	80018d6 <LCD1602_TransferString>
				isAuthorized = -1;
 8000ff2:	4b8b      	ldr	r3, [pc, #556]	; (8001220 <main+0x334>)
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	601a      	str	r2, [r3, #0]
			}

			/* If there are free spaces, begin authentication process */
			while(isAuthorized == 0)
 8000ffa:	e068      	b.n	80010ce <main+0x1e2>
			{
				LCD1602_Clear();
 8000ffc:	f000 fc27 	bl	800184e <LCD1602_Clear>
				LCD1602_CursorPosition(0, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f000 fc04 	bl	8001810 <LCD1602_CursorPosition>
				LCD1602_TransferString("Authentication?");
 8001008:	488a      	ldr	r0, [pc, #552]	; (8001234 <main+0x348>)
 800100a:	f000 fc64 	bl	80018d6 <LCD1602_TransferString>
				HAL_Delay(2000);
 800100e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001012:	f001 ff8f 	bl	8002f34 <HAL_Delay>

				/* Checks if any RFID cards/tags were placed and if they're authorized */
				if (ReadCardValue() == MI_OK)
 8001016:	f001 fd33 	bl	8002a80 <ReadCardValue>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d142      	bne.n	80010a6 <main+0x1ba>
				{
					LCD1602_Clear();
 8001020:	f000 fc15 	bl	800184e <LCD1602_Clear>
					LCD1602_CursorPosition(0, 0);
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f000 fbf2 	bl	8001810 <LCD1602_CursorPosition>
					LCD1602_TransferString((char*)buffer_Detection);
 800102c:	4882      	ldr	r0, [pc, #520]	; (8001238 <main+0x34c>)
 800102e:	f000 fc52 	bl	80018d6 <LCD1602_TransferString>
					LCD1602_CursorPosition(1, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	2001      	movs	r0, #1
 8001036:	f000 fbeb 	bl	8001810 <LCD1602_CursorPosition>
					LCD1602_TransferString((char*)CardID_Print);
 800103a:	4880      	ldr	r0, [pc, #512]	; (800123c <main+0x350>)
 800103c:	f000 fc4b 	bl	80018d6 <LCD1602_TransferString>
					HAL_Delay(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001044:	f001 ff76 	bl	8002f34 <HAL_Delay>

					/* If tag ID passes the authorization check and it matches on the database, grant the pass and decrements free spaces by 1 */
					if(MFRC522_Compare(CardID, CompareID) == MI_OK)
 8001048:	497d      	ldr	r1, [pc, #500]	; (8001240 <main+0x354>)
 800104a:	487e      	ldr	r0, [pc, #504]	; (8001244 <main+0x358>)
 800104c:	f001 f9d0 	bl	80023f0 <MFRC522_Compare>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d115      	bne.n	8001082 <main+0x196>
					{
						LCD1602_Clear();
 8001056:	f000 fbfa 	bl	800184e <LCD1602_Clear>
						LCD1602_CursorPosition(0, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f000 fbd7 	bl	8001810 <LCD1602_CursorPosition>
						LCD1602_TransferString("Authorized!");
 8001062:	4879      	ldr	r0, [pc, #484]	; (8001248 <main+0x35c>)
 8001064:	f000 fc37 	bl	80018d6 <LCD1602_TransferString>
						isAuthorized = 1;
 8001068:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <main+0x334>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
						totalSpaces--;
 800106e:	4b69      	ldr	r3, [pc, #420]	; (8001214 <main+0x328>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a67      	ldr	r2, [pc, #412]	; (8001214 <main+0x328>)
 8001076:	6013      	str	r3, [r2, #0]
						HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f001 ff5a 	bl	8002f34 <HAL_Delay>
 8001080:	e025      	b.n	80010ce <main+0x1e2>
					}
					else
					{
						/* If  the tag ID fails to pass the authorization (the data does not match with any on the database), does not grant the pass */
						LCD1602_Clear();
 8001082:	f000 fbe4 	bl	800184e <LCD1602_Clear>
						LCD1602_CursorPosition(0, 0);
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f000 fbc1 	bl	8001810 <LCD1602_CursorPosition>
						LCD1602_TransferString("Not authorized!");
 800108e:	486f      	ldr	r0, [pc, #444]	; (800124c <main+0x360>)
 8001090:	f000 fc21 	bl	80018d6 <LCD1602_TransferString>
						isAuthorized = -1;
 8001094:	4b62      	ldr	r3, [pc, #392]	; (8001220 <main+0x334>)
 8001096:	f04f 32ff 	mov.w	r2, #4294967295
 800109a:	601a      	str	r2, [r3, #0]
						HAL_Delay(1000);
 800109c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a0:	f001 ff48 	bl	8002f34 <HAL_Delay>
 80010a4:	e013      	b.n	80010ce <main+0x1e2>
					}
				}
				else
				{
					/* Check if a correct card is placed */
					LCD1602_Clear();
 80010a6:	f000 fbd2 	bl	800184e <LCD1602_Clear>
					LCD1602_CursorPosition(0, 0);
 80010aa:	2100      	movs	r1, #0
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 fbaf 	bl	8001810 <LCD1602_CursorPosition>
					LCD1602_TransferString("No card or");
 80010b2:	4867      	ldr	r0, [pc, #412]	; (8001250 <main+0x364>)
 80010b4:	f000 fc0f 	bl	80018d6 <LCD1602_TransferString>
					LCD1602_CursorPosition(1, 0);
 80010b8:	2100      	movs	r1, #0
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fba8 	bl	8001810 <LCD1602_CursorPosition>
					LCD1602_TransferString("wrong card!");
 80010c0:	4864      	ldr	r0, [pc, #400]	; (8001254 <main+0x368>)
 80010c2:	f000 fc08 	bl	80018d6 <LCD1602_TransferString>
					HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f001 ff33 	bl	8002f34 <HAL_Delay>
			while(isAuthorized == 0)
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <main+0x334>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d092      	beq.n	8000ffc <main+0x110>
				}
			}

			/* If granted authorization, open the gates */
			if (isAuthorized == 1)
 80010d6:	4b52      	ldr	r3, [pc, #328]	; (8001220 <main+0x334>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d110      	bne.n	8001100 <main+0x214>
			{
				if (stepCount == 0)
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <main+0x36c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <main+0x214>
				{
					StepperMotor_AngledStep(90,0,13);
 80010e6:	210d      	movs	r1, #13
 80010e8:	2000      	movs	r0, #0
 80010ea:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800125c <main+0x370>
 80010ee:	f000 fce3 	bl	8001ab8 <StepperMotor_AngledStep>
					HAL_Delay(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f6:	f001 ff1d 	bl	8002f34 <HAL_Delay>
					stepCount = 1;
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <main+0x36c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
				}
			}

			/* Continue reading values until the object passes, so it doesn't close too early */
			HAL_Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f001 ff16 	bl	8002f34 <HAL_Delay>
			HCSR04_ReadIn();
 8001108:	f000 ff98 	bl	800203c <HCSR04_ReadIn>
			HAL_Delay(250);
 800110c:	20fa      	movs	r0, #250	; 0xfa
 800110e:	f001 ff11 	bl	8002f34 <HAL_Delay>
		while (DistanceIn <= 5)
 8001112:	4b53      	ldr	r3, [pc, #332]	; (8001260 <main+0x374>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b05      	cmp	r3, #5
 8001118:	f67f af36 	bls.w	8000f88 <main+0x9c>
		}

		/* If an object wants to exit (Distance value can vary)*/
		while (DistanceOut <= 5)
 800111c:	e027      	b.n	800116e <main+0x282>
		{
			LCD1602_Clear();
 800111e:	f000 fb96 	bl	800184e <LCD1602_Clear>
			LCD1602_CursorPosition(0, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fb73 	bl	8001810 <LCD1602_CursorPosition>
			LCD1602_TransferString("Bye bye!");
 800112a:	484e      	ldr	r0, [pc, #312]	; (8001264 <main+0x378>)
 800112c:	f000 fbd3 	bl	80018d6 <LCD1602_TransferString>

			/* Exiting objects do not require any authorization and increments the total spaces by 1 */
			if (stepCount == 0)
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <main+0x36c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d111      	bne.n	800115c <main+0x270>
			{
				StepperMotor_AngledStep(90,0,13);
 8001138:	210d      	movs	r1, #13
 800113a:	2000      	movs	r0, #0
 800113c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800125c <main+0x370>
 8001140:	f000 fcba 	bl	8001ab8 <StepperMotor_AngledStep>
				HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f001 fef4 	bl	8002f34 <HAL_Delay>
				totalSpaces++;
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <main+0x328>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <main+0x328>)
 8001154:	6013      	str	r3, [r2, #0]
				stepCount = 1;
 8001156:	4b40      	ldr	r3, [pc, #256]	; (8001258 <main+0x36c>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
			}

			/* Continue reading values until the object passes, so it doesn't close too early */
			HAL_Delay(1000);
 800115c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001160:	f001 fee8 	bl	8002f34 <HAL_Delay>
			HCSR04_ReadOut();
 8001164:	f000 ff8a 	bl	800207c <HCSR04_ReadOut>
			HAL_Delay(250);
 8001168:	20fa      	movs	r0, #250	; 0xfa
 800116a:	f001 fee3 	bl	8002f34 <HAL_Delay>
		while (DistanceOut <= 5)
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <main+0x37c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d9d3      	bls.n	800111e <main+0x232>
		}

		/* Close the gate if it was opened */
		if (stepCount == 1)
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <main+0x36c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <main+0x2ac>
		{
			StepperMotor_AngledStep(90,1,13);
 800117e:	210d      	movs	r1, #13
 8001180:	2001      	movs	r0, #1
 8001182:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800125c <main+0x370>
 8001186:	f000 fc97 	bl	8001ab8 <StepperMotor_AngledStep>
			stepCount = 0;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <main+0x36c>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f001 fece 	bl	8002f34 <HAL_Delay>
		}

		/* Actively read the Distance sensor values for some time to increase the systems efficiency and responsiveness  */
		sprintf(spacesPrint,"Spaces left: %d", totalSpaces);
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <main+0x328>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	491e      	ldr	r1, [pc, #120]	; (8001218 <main+0x32c>)
 80011a0:	481e      	ldr	r0, [pc, #120]	; (800121c <main+0x330>)
 80011a2:	f005 f85f 	bl	8006264 <siprintf>
		isAuthorized = 0;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <main+0x334>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
		HCSR04_ReadIn();
 80011ac:	f000 ff46 	bl	800203c <HCSR04_ReadIn>
		HAL_Delay(250);
 80011b0:	20fa      	movs	r0, #250	; 0xfa
 80011b2:	f001 febf 	bl	8002f34 <HAL_Delay>
		HCSR04_ReadOut();
 80011b6:	f000 ff61 	bl	800207c <HCSR04_ReadOut>
		HAL_Delay(250);
 80011ba:	20fa      	movs	r0, #250	; 0xfa
 80011bc:	f001 feba 	bl	8002f34 <HAL_Delay>
		distCount++;
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <main+0x380>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a29      	ldr	r2, [pc, #164]	; (800126c <main+0x380>)
 80011c8:	6013      	str	r3, [r2, #0]
	while ((DistanceIn <= 5 || DistanceOut <= 5) && distCount < 5)
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <main+0x374>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d903      	bls.n	80011da <main+0x2ee>
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <main+0x37c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d803      	bhi.n	80011e2 <main+0x2f6>
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <main+0x380>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	dd97      	ble.n	8001112 <main+0x226>

	}

	/* If no more object are trying to pass the gate, gather values from both the Temperature and Humidity sensor and check the Distance sensors as well */
	distCount = 0;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <main+0x380>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
	HCSR04_ReadIn();
 80011e8:	f000 ff28 	bl	800203c <HCSR04_ReadIn>
	HAL_Delay(250);
 80011ec:	20fa      	movs	r0, #250	; 0xfa
 80011ee:	f001 fea1 	bl	8002f34 <HAL_Delay>
	HCSR04_ReadOut();
 80011f2:	f000 ff43 	bl	800207c <HCSR04_ReadOut>
	HAL_Delay(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f001 fe9c 	bl	8002f34 <HAL_Delay>
	DHT11_PrintValues();
 80011fc:	f000 fd80 	bl	8001d00 <DHT11_PrintValues>
	HAL_Delay(250);
 8001200:	20fa      	movs	r0, #250	; 0xfa
 8001202:	f001 fe97 	bl	8002f34 <HAL_Delay>
	LCD1602_Clear();
 8001206:	e6b8      	b.n	8000f7a <main+0x8e>
 8001208:	20000258 	.word	0x20000258
 800120c:	200002a0 	.word	0x200002a0
 8001210:	08008770 	.word	0x08008770
 8001214:	20000004 	.word	0x20000004
 8001218:	08008780 	.word	0x08008780
 800121c:	200002f4 	.word	0x200002f4
 8001220:	200002f0 	.word	0x200002f0
 8001224:	08008790 	.word	0x08008790
 8001228:	080087a0 	.word	0x080087a0
 800122c:	080087b0 	.word	0x080087b0
 8001230:	080087c4 	.word	0x080087c4
 8001234:	080087d4 	.word	0x080087d4
 8001238:	2000038c 	.word	0x2000038c
 800123c:	20000358 	.word	0x20000358
 8001240:	20000000 	.word	0x20000000
 8001244:	20000354 	.word	0x20000354
 8001248:	080087e4 	.word	0x080087e4
 800124c:	080087f0 	.word	0x080087f0
 8001250:	08008800 	.word	0x08008800
 8001254:	0800880c 	.word	0x0800880c
 8001258:	200002e8 	.word	0x200002e8
 800125c:	42b40000 	.word	0x42b40000
 8001260:	2000032a 	.word	0x2000032a
 8001264:	08008818 	.word	0x08008818
 8001268:	2000032b 	.word	0x2000032b
 800126c:	200002ec 	.word	0x200002ec

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fb7e 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012e4:	2348      	movs	r3, #72	; 0x48
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ec:	2307      	movs	r3, #7
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f943 	bl	8003580 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 f9ff 	bl	8001702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2102      	movs	r1, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fba4 	bl	8003a70 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800132e:	f000 f9e8 	bl	8001702 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	201c      	movs	r0, #28
 800134e:	f001 fef0 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001352:	201c      	movs	r0, #28
 8001354:	f001 ff09 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2023      	movs	r0, #35	; 0x23
 800135e:	f001 fee8 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001362:	2023      	movs	r0, #35	; 0x23
 8001364:	f001 ff01 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	201b      	movs	r0, #27
 800136e:	f001 fee0 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001372:	201b      	movs	r0, #27
 8001374:	f001 fef9 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <MX_SPI1_Init+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013b0:	2238      	movs	r2, #56	; 0x38
 80013b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013ce:	f002 fd3b 	bl	8003e48 <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d8:	f000 f993 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000200 	.word	0x20000200
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_TIM1_Init+0xc0>)
 8001408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_TIM1_Init+0xbc>)
 800140c:	2247      	movs	r2, #71	; 0x47
 800140e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001430:	481c      	ldr	r0, [pc, #112]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001432:	f003 fb11 	bl	8004a58 <HAL_TIM_IC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800143c:	f000 f961 	bl	8001702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001450:	f004 f9dc 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800145a:	f000 f952 	bl	8001702 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_TIM1_Init+0xbc>)
 8001476:	f003 fd6f 	bl	8004f58 <HAL_TIM_IC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001480:	f000 f93f 	bl	8001702 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_TIM1_Init+0xbc>)
 800148c:	f003 fd64 	bl	8004f58 <HAL_TIM_IC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8001496:	f000 f934 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000258 	.word	0x20000258
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d2:	2247      	movs	r2, #71	; 0x47
 80014d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM2_Init+0x94>)
 80014de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM2_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM2_Init+0x94>)
 80014f2:	f003 f9f9 	bl	80048e8 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014fc:	f000 f901 	bl	8001702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM2_Init+0x94>)
 800150e:	f003 fdbf 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 f8f3 	bl	8001702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM2_Init+0x94>)
 800152a:	f004 f96f 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 f8e5 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002a0 	.word	0x200002a0

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <MX_GPIO_Init+0x17c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <MX_GPIO_Init+0x17c>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <MX_GPIO_Init+0x17c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <MX_GPIO_Init+0x17c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <MX_GPIO_Init+0x17c>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <MX_GPIO_Init+0x17c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <MX_GPIO_Init+0x17c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <MX_GPIO_Init+0x17c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a42      	ldr	r2, [pc, #264]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a3b      	ldr	r2, [pc, #236]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <MX_GPIO_Init+0x17c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80015e6:	2200      	movs	r2, #0
 80015e8:	217f      	movs	r1, #127	; 0x7f
 80015ea:	4836      	ldr	r0, [pc, #216]	; (80016c4 <MX_GPIO_Init+0x180>)
 80015ec:	f001 ffae 	bl	800354c <HAL_GPIO_WritePin>
                          |LCD_D7_Pin|LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2110      	movs	r1, #16
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <MX_GPIO_Init+0x184>)
 80015f6:	f001 ffa9 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2110      	movs	r1, #16
 80015fe:	4833      	ldr	r0, [pc, #204]	; (80016cc <MX_GPIO_Init+0x188>)
 8001600:	f001 ffa4 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DistIn_Trig_Pin|DistOut_Trig_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800160a:	482e      	ldr	r0, [pc, #184]	; (80016c4 <MX_GPIO_Init+0x180>)
 800160c:	f001 ff9e 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DataBus_GPIO_Port, DHT11_DataBus_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	482e      	ldr	r0, [pc, #184]	; (80016d0 <MX_GPIO_Init+0x18c>)
 8001618:	f001 ff98 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, StepMotor_IN1_Pin|StepMotor_IN2_Pin|StepMotor_IN3_Pin|StepMotor_IN4_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2178      	movs	r1, #120	; 0x78
 8001620:	482b      	ldr	r0, [pc, #172]	; (80016d0 <MX_GPIO_Init+0x18c>)
 8001622:	f001 ff93 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin DistIn_Trig_Pin DistOut_Trig_Pin LCD_RS_Pin
                           LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001626:	f240 537f 	movw	r3, #1407	; 0x57f
 800162a:	617b      	str	r3, [r7, #20]
                          |LCD_D7_Pin|DistIn_Trig_Pin|DistOut_Trig_Pin|LCD_RS_Pin
                          |LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <MX_GPIO_Init+0x180>)
 8001640:	f001 fdd0 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFRC522_SDA_Pin */
  GPIO_InitStruct.Pin = MFRC522_SDA_Pin;
 8001644:	2310      	movs	r3, #16
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MFRC522_SDA_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <MX_GPIO_Init+0x184>)
 800165c:	f001 fdc2 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFRC522_RST_Pin */
  GPIO_InitStruct.Pin = MFRC522_RST_Pin;
 8001660:	2310      	movs	r3, #16
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MFRC522_RST_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <MX_GPIO_Init+0x188>)
 8001678:	f001 fdb4 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DataBus_Pin */
  GPIO_InitStruct.Pin = DHT11_DataBus_Pin;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001682:	2311      	movs	r3, #17
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_DataBus_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_GPIO_Init+0x18c>)
 8001696:	f001 fda5 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : StepMotor_IN1_Pin StepMotor_IN2_Pin StepMotor_IN3_Pin StepMotor_IN4_Pin */
  GPIO_InitStruct.Pin = StepMotor_IN1_Pin|StepMotor_IN2_Pin|StepMotor_IN3_Pin|StepMotor_IN4_Pin;
 800169a:	2378      	movs	r3, #120	; 0x78
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_GPIO_Init+0x18c>)
 80016b2:	f001 fd97 	bl	80031e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00

080016d4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7f1b      	ldrb	r3, [r3, #28]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d103      	bne.n	80016ec <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_MeasureIn(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fceb 	bl	80020c0 <HCSR04_MeasureIn>
	}
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
	{
		HCSR04_MeasureOut(htim);
	}
}
 80016ea:	e006      	b.n	80016fa <HAL_TIM_IC_CaptureCallback+0x26>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <HAL_TIM_IC_CaptureCallback+0x26>
		HCSR04_MeasureOut(htim);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fd8b 	bl	8002210 <HCSR04_MeasureOut>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170a:	e7fe      	b.n	800170a <Error_Handler+0x8>

0800170c <LCD1602_TransferToLCD>:

#include "stm32f4xx_LCD1602.h"
#include "stm32f4xx_microDelay.h"

  void LCD1602_TransferToLCD(char data, int rs)
  {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
	  /* rs = 1 for data, rs=0 for command */
      HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2101      	movs	r1, #1
 8001720:	4820      	ldr	r0, [pc, #128]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001722:	f001 ff13 	bl	800354c <HAL_GPIO_WritePin>

      /* write the data to the respective pin */
      HAL_GPIO_WritePin(D7_PORT, D7_PIN, ((data>>3)&0x01));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	481b      	ldr	r0, [pc, #108]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001738:	f001 ff08 	bl	800354c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D6_PORT, D6_PIN, ((data>>2)&0x01));
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	2120      	movs	r1, #32
 800174c:	4815      	ldr	r0, [pc, #84]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 800174e:	f001 fefd 	bl	800354c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D5_PORT, D5_PIN, ((data>>1)&0x01));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	2110      	movs	r1, #16
 8001762:	4810      	ldr	r0, [pc, #64]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001764:	f001 fef2 	bl	800354c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D4_PORT, D4_PIN, ((data>>0)&0x01));
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	2108      	movs	r1, #8
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001776:	f001 fee9 	bl	800354c <HAL_GPIO_WritePin>

      /* Toggle EN PIN to send the data
       * if the HCLK > 100 MHz, use the  20 us delay.
       * Increase if malfunctioning.
       */
      HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2104      	movs	r1, #4
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001780:	f001 fee4 	bl	800354c <HAL_GPIO_WritePin>
      microDelay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f001 fa47 	bl	8002c18 <microDelay>
      HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2104      	movs	r1, #4
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <LCD1602_TransferToLCD+0x98>)
 8001790:	f001 fedc 	bl	800354c <HAL_GPIO_WritePin>
      microDelay(100);
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	f001 fa3f 	bl	8002c18 <microDelay>
  }
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <LCD1602_SendCommand>:

  void LCD1602_SendCommand(char cmd)
  {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
      char command;
      
      /* Send upper bit */
      command = ((cmd>>4)&0x0f);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	73fb      	strb	r3, [r7, #15]
      
      /* RS must be 0 while sending a command */
      LCD1602_TransferToLCD(command,0);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ffa5 	bl	800170c <LCD1602_TransferToLCD>
      
      /* Send lower bit */
      command = ((cmd)&0x0f);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	73fb      	strb	r3, [r7, #15]
      LCD1602_TransferToLCD(command, 0);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff9c 	bl	800170c <LCD1602_TransferToLCD>
  }
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <LCD1602_SendData>:

  void LCD1602_SendData(char data)
  {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
      char sendData;

      /* Send upper bit */
      sendData = ((data>>4)&0x0f);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	73fb      	strb	r3, [r7, #15]

      /* RS must be 1 while sending data */
      LCD1602_TransferToLCD(sendData, 1);
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff8b 	bl	800170c <LCD1602_TransferToLCD>

      /* Send lower bit */
      sendData = ((data)&0x0f);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	73fb      	strb	r3, [r7, #15]
      LCD1602_TransferToLCD(sendData, 1);
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff82 	bl	800170c <LCD1602_TransferToLCD>
  }
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <LCD1602_CursorPosition>:

  void LCD1602_CursorPosition(int row, int col)
  {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
      switch (row)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <LCD1602_CursorPosition+0x18>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <LCD1602_CursorPosition+0x22>
 8001826:	e009      	b.n	800183c <LCD1602_CursorPosition+0x2c>
      {
          case 0:
              col |= 0x80;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182e:	603b      	str	r3, [r7, #0]
              break;
 8001830:	e004      	b.n	800183c <LCD1602_CursorPosition+0x2c>
          case 1:
              col |= 0xC0;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001838:	603b      	str	r3, [r7, #0]
              break;
 800183a:	bf00      	nop
      }
      LCD1602_SendCommand(col);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ffb1 	bl	80017a8 <LCD1602_SendCommand>
  }
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <LCD1602_Clear>:

  void LCD1602_Clear(void)
  {
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
	  LCD1602_SendCommand(0x01);
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff ffa8 	bl	80017a8 <LCD1602_SendCommand>
	  HAL_Delay(2);
 8001858:	2002      	movs	r0, #2
 800185a:	f001 fb6b 	bl	8002f34 <HAL_Delay>
  }
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <LCD1602_Init>:

  void LCD1602_Init(void)
  {
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
      // 4 bit initialization
      HAL_Delay(50);  // wait for >40ms
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f001 fb64 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x30);
 800186c:	2030      	movs	r0, #48	; 0x30
 800186e:	f7ff ff9b 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(5);  // wait for >4.1ms
 8001872:	2005      	movs	r0, #5
 8001874:	f001 fb5e 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x30);
 8001878:	2030      	movs	r0, #48	; 0x30
 800187a:	f7ff ff95 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(1);  // wait for >100us
 800187e:	2001      	movs	r0, #1
 8001880:	f001 fb58 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x30);
 8001884:	2030      	movs	r0, #48	; 0x30
 8001886:	f7ff ff8f 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(10);
 800188a:	200a      	movs	r0, #10
 800188c:	f001 fb52 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x20);  // 4bit mode
 8001890:	2020      	movs	r0, #32
 8001892:	f7ff ff89 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f001 fb4c 	bl	8002f34 <HAL_Delay>

    // Display initialization
      LCD1602_SendCommand (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800189c:	2028      	movs	r0, #40	; 0x28
 800189e:	f7ff ff83 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(1);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f001 fb46 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80018a8:	2008      	movs	r0, #8
 80018aa:	f7ff ff7d 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f001 fb40 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x01);  // clear display
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff ff77 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f001 fb3a 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80018c0:	2006      	movs	r0, #6
 80018c2:	f7ff ff71 	bl	80017a8 <LCD1602_SendCommand>
      HAL_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 fb34 	bl	8002f34 <HAL_Delay>
      LCD1602_SendCommand (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80018cc:	200c      	movs	r0, #12
 80018ce:	f7ff ff6b 	bl	80017a8 <LCD1602_SendCommand>
  }
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LCD1602_TransferString>:

  void LCD1602_TransferString(char *str)
  {
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	  while(*str)
 80018de:	e006      	b.n	80018ee <LCD1602_TransferString+0x18>
		  LCD1602_SendData(*str++);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff77 	bl	80017dc <LCD1602_SendData>
	  while(*str)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f4      	bne.n	80018e0 <LCD1602_TransferString+0xa>
  }
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <StepperMotor_SetRPM>:
#include "stm32f4xx_StepperMotor.h"
#include "stm32f4xx_microDelay.h"


void StepperMotor_SetRPM (int rpm)  // Max. RPM = 14 (Recommended 13)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	microDelay(60000000/stepsperrev/rpm);
 8001908:	f643 1238 	movw	r2, #14648	; 0x3938
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f97f 	bl	8002c18 <microDelay>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <StepperMotor_HalfDrive>:

void StepperMotor_HalfDrive (int step)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	switch (step){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b07      	cmp	r3, #7
 8001930:	f200 80bc 	bhi.w	8001aac <StepperMotor_HalfDrive+0x188>
 8001934:	a201      	add	r2, pc, #4	; (adr r2, 800193c <StepperMotor_HalfDrive+0x18>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	0800195d 	.word	0x0800195d
 8001940:	08001987 	.word	0x08001987
 8001944:	080019b1 	.word	0x080019b1
 8001948:	080019db 	.word	0x080019db
 800194c:	08001a05 	.word	0x08001a05
 8001950:	08001a2f 	.word	0x08001a2f
 8001954:	08001a59 	.word	0x08001a59
 8001958:	08001a83 	.word	0x08001a83
		case 0:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2108      	movs	r1, #8
 8001960:	4854      	ldr	r0, [pc, #336]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001962:	f001 fdf3 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2110      	movs	r1, #16
 800196a:	4852      	ldr	r0, [pc, #328]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 800196c:	f001 fdee 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2120      	movs	r1, #32
 8001974:	484f      	ldr	r0, [pc, #316]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001976:	f001 fde9 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2140      	movs	r1, #64	; 0x40
 800197e:	484d      	ldr	r0, [pc, #308]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001980:	f001 fde4 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001984:	e092      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 1:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	2108      	movs	r1, #8
 800198a:	484a      	ldr	r0, [pc, #296]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 800198c:	f001 fdde 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	2110      	movs	r1, #16
 8001994:	4847      	ldr	r0, [pc, #284]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001996:	f001 fdd9 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2120      	movs	r1, #32
 800199e:	4845      	ldr	r0, [pc, #276]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019a0:	f001 fdd4 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2140      	movs	r1, #64	; 0x40
 80019a8:	4842      	ldr	r0, [pc, #264]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019aa:	f001 fdcf 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 80019ae:	e07d      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 2:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2108      	movs	r1, #8
 80019b4:	483f      	ldr	r0, [pc, #252]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019b6:	f001 fdc9 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2110      	movs	r1, #16
 80019be:	483d      	ldr	r0, [pc, #244]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019c0:	f001 fdc4 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2120      	movs	r1, #32
 80019c8:	483a      	ldr	r0, [pc, #232]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019ca:	f001 fdbf 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	4838      	ldr	r0, [pc, #224]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019d4:	f001 fdba 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 80019d8:	e068      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 3:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2108      	movs	r1, #8
 80019de:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019e0:	f001 fdb4 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2110      	movs	r1, #16
 80019e8:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019ea:	f001 fdaf 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2120      	movs	r1, #32
 80019f2:	4830      	ldr	r0, [pc, #192]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019f4:	f001 fdaa 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2140      	movs	r1, #64	; 0x40
 80019fc:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 80019fe:	f001 fda5 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001a02:	e053      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 4:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2108      	movs	r1, #8
 8001a08:	482a      	ldr	r0, [pc, #168]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a0a:	f001 fd9f 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2110      	movs	r1, #16
 8001a12:	4828      	ldr	r0, [pc, #160]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a14:	f001 fd9a 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	4825      	ldr	r0, [pc, #148]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a1e:	f001 fd95 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	4823      	ldr	r0, [pc, #140]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a28:	f001 fd90 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001a2c:	e03e      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 5:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2108      	movs	r1, #8
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a34:	f001 fd8a 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a3e:	f001 fd85 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	2120      	movs	r1, #32
 8001a46:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a48:	f001 fd80 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a52:	f001 fd7b 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001a56:	e029      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 6:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a5e:	f001 fd75 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2110      	movs	r1, #16
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a68:	f001 fd70 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2120      	movs	r1, #32
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a72:	f001 fd6b 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a7c:	f001 fd66 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001a80:	e014      	b.n	8001aac <StepperMotor_HalfDrive+0x188>

		case 7:
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN1, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	2108      	movs	r1, #8
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a88:	f001 fd60 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN2, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2110      	movs	r1, #16
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a92:	f001 fd5b 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN3, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2120      	movs	r1, #32
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001a9c:	f001 fd56 	bl	800354c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_IN4, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <StepperMotor_HalfDrive+0x190>)
 8001aa6:	f001 fd51 	bl	800354c <HAL_GPIO_WritePin>
			  break;
 8001aaa:	bf00      	nop

		}
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <StepperMotor_AngledStep>:
			  break;
	}
}

void StepperMotor_AngledStep (float angle, int direction, int rpm)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ac2:	60b8      	str	r0, [r7, #8]
 8001ac4:	6079      	str	r1, [r7, #4]
	/* 360 degrees = 512 sequences */
	float AnglePerSeq = 0.703125;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <StepperMotor_AngledStep+0x90>)
 8001ac8:	61bb      	str	r3, [r7, #24]
	int NumberOfSequences = (int) (angle/AnglePerSeq);
 8001aca:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ace:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 3a90 	vmov	r3, s15
 8001ade:	617b      	str	r3, [r7, #20]

	for (int seq = 0; seq < NumberOfSequences ; seq++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e027      	b.n	8001b36 <StepperMotor_AngledStep+0x7e>
	{
		if (direction == 0)  // Clockwise rotation
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <StepperMotor_AngledStep+0x54>
		{
			for (int step = 7; step >= 0; step--)
 8001aec:	2307      	movs	r3, #7
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	e008      	b.n	8001b04 <StepperMotor_AngledStep+0x4c>
			{
				StepperMotor_HalfDrive(step);
 8001af2:	6a38      	ldr	r0, [r7, #32]
 8001af4:	f7ff ff16 	bl	8001924 <StepperMotor_HalfDrive>
				StepperMotor_SetRPM(rpm);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff01 	bl	8001900 <StepperMotor_SetRPM>
			for (int step = 7; step >= 0; step--)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	daf3      	bge.n	8001af2 <StepperMotor_AngledStep+0x3a>
 8001b0a:	e011      	b.n	8001b30 <StepperMotor_AngledStep+0x78>
			}

		}
		else if (direction == 1)  // Anti-Clockwise rotation
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10e      	bne.n	8001b30 <StepperMotor_AngledStep+0x78>
		{
			for (int step = 0; step < 8; step++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e008      	b.n	8001b2a <StepperMotor_AngledStep+0x72>
			{
				StepperMotor_HalfDrive(step);
 8001b18:	69f8      	ldr	r0, [r7, #28]
 8001b1a:	f7ff ff03 	bl	8001924 <StepperMotor_HalfDrive>
				StepperMotor_SetRPM(rpm);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff feee 	bl	8001900 <StepperMotor_SetRPM>
			for (int step = 0; step < 8; step++)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3301      	adds	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b07      	cmp	r3, #7
 8001b2e:	ddf3      	ble.n	8001b18 <StepperMotor_AngledStep+0x60>
	for (int seq = 0; seq < NumberOfSequences ; seq++)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3301      	adds	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbd3      	blt.n	8001ae6 <StepperMotor_AngledStep+0x2e>
			}
		}
	}
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	3f340000 	.word	0x3f340000

08001b4c <DHT11_SetPinOutput>:
uint8_t Presence;



void DHT11_SetPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f001 fb32 	bl	80031e4 <HAL_GPIO_Init>
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <DHT11_SetPinInput>:

void DHT11_SetPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f001 fb14 	bl	80031e4 <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <DHT11_StartRead>:

void DHT11_StartRead(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	DHT11_SetPinOutput(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <DHT11_StartRead+0x40>)
 8001bce:	f7ff ffbd 	bl	8001b4c <DHT11_SetPinOutput>

	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd8:	480a      	ldr	r0, [pc, #40]	; (8001c04 <DHT11_StartRead+0x40>)
 8001bda:	f001 fcb7 	bl	800354c <HAL_GPIO_WritePin>
	HAL_Delay(18);   // wait for 18 ms
 8001bde:	2012      	movs	r0, #18
 8001be0:	f001 f9a8 	bl	8002f34 <HAL_Delay>

	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // pull the pin high
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <DHT11_StartRead+0x40>)
 8001bec:	f001 fcae 	bl	800354c <HAL_GPIO_WritePin>
	microDelay(20); // wait for 20 us
 8001bf0:	2014      	movs	r0, #20
 8001bf2:	f001 f811 	bl	8002c18 <microDelay>

	DHT11_SetPinInput(DHT11_PORT, DHT11_PIN);    // set as input
 8001bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DHT11_StartRead+0x40>)
 8001bfc:	f7ff ffc4 	bl	8001b88 <DHT11_SetPinInput>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020c00 	.word	0x40020c00

08001c08 <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	71fb      	strb	r3, [r7, #7]

	microDelay(40);
 8001c12:	2028      	movs	r0, #40	; 0x28
 8001c14:	f001 f800 	bl	8002c18 <microDelay>

	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <DHT11_CheckResponse+0x5c>)
 8001c1e:	f001 fc7d 	bl	800351c <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10f      	bne.n	8001c48 <DHT11_CheckResponse+0x40>
	{
		microDelay(80);
 8001c28:	2050      	movs	r0, #80	; 0x50
 8001c2a:	f000 fff5 	bl	8002c18 <microDelay>

		if((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <DHT11_CheckResponse+0x5c>)
 8001c34:	f001 fc72 	bl	800351c <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <DHT11_CheckResponse+0x3c>
			Response = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e001      	b.n	8001c48 <DHT11_CheckResponse+0x40>
		else
			Response = -1;
 8001c44:	23ff      	movs	r3, #255	; 0xff
 8001c46:	71fb      	strb	r3, [r7, #7]
	}

	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001c48:	bf00      	nop
 8001c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <DHT11_CheckResponse+0x5c>)
 8001c50:	f001 fc64 	bl	800351c <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f7      	bne.n	8001c4a <DHT11_CheckResponse+0x42>

	return Response;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020c00 	.word	0x40020c00

08001c68 <DHT11_ReadValues>:

uint8_t DHT11_ReadValues(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	uint8_t i,  j;

	for (j = 0; j < 8; j++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71bb      	strb	r3, [r7, #6]
 8001c72:	e03a      	b.n	8001cea <DHT11_ReadValues+0x82>
	{
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001c74:	bf00      	nop
 8001c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7a:	4820      	ldr	r0, [pc, #128]	; (8001cfc <DHT11_ReadValues+0x94>)
 8001c7c:	f001 fc4e 	bl	800351c <HAL_GPIO_ReadPin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f7      	beq.n	8001c76 <DHT11_ReadValues+0xe>

		microDelay(40);   // wait for 40 us
 8001c86:	2028      	movs	r0, #40	; 0x28
 8001c88:	f000 ffc6 	bl	8002c18 <microDelay>

		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c90:	481a      	ldr	r0, [pc, #104]	; (8001cfc <DHT11_ReadValues+0x94>)
 8001c92:	f001 fc43 	bl	800351c <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10e      	bne.n	8001cba <DHT11_ReadValues+0x52>
			i&= ~(1<<(7-j));   // write 0
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	b25a      	sxtb	r2, r3
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	e00b      	b.n	8001cd2 <DHT11_ReadValues+0x6a>
		else
			i|= (1<<(7-j));  // if the pin is high, write 1
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	f1c3 0307 	rsb	r3, r3, #7
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	71fb      	strb	r3, [r7, #7]

		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001cd2:	bf00      	nop
 8001cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <DHT11_ReadValues+0x94>)
 8001cda:	f001 fc1f 	bl	800351c <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f7      	bne.n	8001cd4 <DHT11_ReadValues+0x6c>
	for (j = 0; j < 8; j++)
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	71bb      	strb	r3, [r7, #6]
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	d9c1      	bls.n	8001c74 <DHT11_ReadValues+0xc>
	}
	return i;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020c00 	.word	0x40020c00

08001d00 <DHT11_PrintValues>:


void DHT11_PrintValues(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	DHT11_StartRead();
 8001d04:	f7ff ff5e 	bl	8001bc4 <DHT11_StartRead>
	Presence = DHT11_CheckResponse();
 8001d08:	f7ff ff7e 	bl	8001c08 <DHT11_CheckResponse>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <DHT11_PrintValues+0xcc>)
 8001d12:	701a      	strb	r2, [r3, #0]
	Rh_Integral = DHT11_ReadValues();
 8001d14:	f7ff ffa8 	bl	8001c68 <DHT11_ReadValues>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <DHT11_PrintValues+0xd0>)
 8001d1e:	701a      	strb	r2, [r3, #0]
	Rh_Decimal = DHT11_ReadValues();
 8001d20:	f7ff ffa2 	bl	8001c68 <DHT11_ReadValues>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <DHT11_PrintValues+0xd4>)
 8001d2a:	701a      	strb	r2, [r3, #0]
	Temp_Integral = DHT11_ReadValues();
 8001d2c:	f7ff ff9c 	bl	8001c68 <DHT11_ReadValues>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <DHT11_PrintValues+0xd8>)
 8001d36:	701a      	strb	r2, [r3, #0]
	Temp_Decimal  = DHT11_ReadValues();
 8001d38:	f7ff ff96 	bl	8001c68 <DHT11_ReadValues>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <DHT11_PrintValues+0xdc>)
 8001d42:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_ReadValues();
 8001d44:	f7ff ff90 	bl	8001c68 <DHT11_ReadValues>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <DHT11_PrintValues+0xe0>)
 8001d4e:	801a      	strh	r2, [r3, #0]

	if(SUM == Rh_Integral + Rh_Decimal + Temp_Integral + Temp_Decimal)
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <DHT11_PrintValues+0xe0>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <DHT11_PrintValues+0xd0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <DHT11_PrintValues+0xd4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <DHT11_PrintValues+0xd8>)
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <DHT11_PrintValues+0xdc>)
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d129      	bne.n	8001dc6 <DHT11_PrintValues+0xc6>
	{
		Temperature = (float)Temp_Integral + (float)Temp_Decimal/10;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <DHT11_PrintValues+0xd8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <DHT11_PrintValues+0xdc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d8a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001d8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <DHT11_PrintValues+0xe4>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
		Humidity = (float)Rh_Integral + (float)Rh_Decimal/10;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <DHT11_PrintValues+0xd0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <DHT11_PrintValues+0xd4>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db4:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001db8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <DHT11_PrintValues+0xe8>)
 8001dc2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000318 	.word	0x20000318
 8001dd0:	20000308 	.word	0x20000308
 8001dd4:	20000309 	.word	0x20000309
 8001dd8:	2000030a 	.word	0x2000030a
 8001ddc:	2000030b 	.word	0x2000030b
 8001de0:	2000030c 	.word	0x2000030c
 8001de4:	20000310 	.word	0x20000310
 8001de8:	20000314 	.word	0x20000314

08001dec <DHT11_PrintTemp>:


void DHT11_PrintTemp(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
	char printTemp[20] = {'\0'};
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
	LCD1602_CursorPosition(0, 0);
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fd02 	bl	8001810 <LCD1602_CursorPosition>

	sprintf(printTemp, "Temp: %.1f", Temperature);
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <DHT11_PrintTemp+0x48>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb99 	bl	8000548 <__aeabi_f2d>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	1d38      	adds	r0, r7, #4
 8001e1c:	4906      	ldr	r1, [pc, #24]	; (8001e38 <DHT11_PrintTemp+0x4c>)
 8001e1e:	f004 fa21 	bl	8006264 <siprintf>
	LCD1602_TransferString(printTemp);
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd56 	bl	80018d6 <LCD1602_TransferString>

}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000310 	.word	0x20000310
 8001e38:	08008824 	.word	0x08008824

08001e3c <DHT11_PrintHum>:

void DHT11_PrintHum(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
	char printHum[20] = {'\0'};
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
	LCD1602_CursorPosition(1, 0);
 8001e54:	2100      	movs	r1, #0
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff fcda 	bl	8001810 <LCD1602_CursorPosition>


	sprintf(printHum,"RH: %.1f", Humidity);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <DHT11_PrintHum+0x48>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	1d38      	adds	r0, r7, #4
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <DHT11_PrintHum+0x4c>)
 8001e6e:	f004 f9f9 	bl	8006264 <siprintf>
	LCD1602_TransferString(printHum);
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fd2e 	bl	80018d6 <LCD1602_TransferString>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000314 	.word	0x20000314
 8001e88:	08008830 	.word	0x08008830

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eca:	2007      	movs	r0, #7
 8001ecc:	f001 f926 	bl	800311c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_SPI_MspInit+0x84>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12b      	bne.n	8001f56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MFRC522_SCK_Pin|MFRC522_MISO_Pin|MFRC522_MOSI_Pin;
 8001f36:	23e0      	movs	r3, #224	; 0xe0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	; (8001f68 <HAL_SPI_MspInit+0x8c>)
 8001f52:	f001 f947 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000

08001f6c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_TIM_IC_MspInit+0x84>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12c      	bne.n	8001fe8 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_TIM_IC_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DistIn_Echo_Pin|DistOut_Echo_Pin;
 8001fc6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <HAL_TIM_IC_MspInit+0x8c>)
 8001fe4:	f001 f8fe 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d10d      	bne.n	800202a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_TIM_Base_MspInit+0x3c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_TIM_Base_MspInit+0x3c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_TIM_Base_MspInit+0x3c>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HCSR04_ReadIn>:

char printDistanceIn[20] = {'\0'};
char printDistanceOut[20] = {'\0'};

void HCSR04_ReadIn (void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_IN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002040:	2201      	movs	r2, #1
 8002042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002046:	480b      	ldr	r0, [pc, #44]	; (8002074 <HCSR04_ReadIn+0x38>)
 8002048:	f001 fa80 	bl	800354c <HAL_GPIO_WritePin>
	microDelay(10);  // wait for 10 us
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fde3 	bl	8002c18 <microDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_IN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <HCSR04_ReadIn+0x38>)
 800205a:	f001 fa77 	bl	800354c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HCSR04_ReadIn+0x3c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HCSR04_ReadIn+0x3c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0202 	orr.w	r2, r2, #2
 800206c:	60da      	str	r2, [r3, #12]
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	20000258 	.word	0x20000258

0800207c <HCSR04_ReadOut>:

void HCSR04_ReadOut (void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_OUT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002086:	480b      	ldr	r0, [pc, #44]	; (80020b4 <HCSR04_ReadOut+0x38>)
 8002088:	f001 fa60 	bl	800354c <HAL_GPIO_WritePin>
	microDelay(10);  // wait for 10 us
 800208c:	200a      	movs	r0, #10
 800208e:	f000 fdc3 	bl	8002c18 <microDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN_OUT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <HCSR04_ReadOut+0x38>)
 800209a:	f001 fa57 	bl	800354c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HCSR04_ReadOut+0x3c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HCSR04_ReadOut+0x3c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0204 	orr.w	r2, r2, #4
 80020ac:	60da      	str	r2, [r3, #12]
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	20000258 	.word	0x20000258
 80020bc:	00000000 	.word	0x00000000

080020c0 <HCSR04_MeasureIn>:

void HCSR04_MeasureIn (TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if (Is_First_Captured1==0) // if the first value is not captured
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HCSR04_MeasureIn+0x130>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11a      	bne.n	8002106 <HCSR04_MeasureIn+0x46>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80020d0:	2100      	movs	r1, #0
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 f8a4 	bl	8005220 <HAL_TIM_ReadCapturedValue>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <HCSR04_MeasureIn+0x134>)
 80020dc:	6013      	str	r3, [r2, #0]
		Is_First_Captured1 = 1;  // set the first captured as true
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HCSR04_MeasureIn+0x130>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 020a 	bic.w	r2, r2, #10
 80020f2:	621a      	str	r2, [r3, #32]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0202 	orr.w	r2, r2, #2
 8002102:	621a      	str	r2, [r3, #32]

		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
	}
}
 8002104:	e06a      	b.n	80021dc <HCSR04_MeasureIn+0x11c>
	else if (Is_First_Captured1==1)   // if the first is already captured
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HCSR04_MeasureIn+0x130>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d166      	bne.n	80021dc <HCSR04_MeasureIn+0x11c>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800210e:	2100      	movs	r1, #0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f003 f885 	bl	8005220 <HAL_TIM_ReadCapturedValue>
 8002116:	4603      	mov	r3, r0
 8002118:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <HCSR04_MeasureIn+0x138>)
 800211a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
		if (IC_Val2 > IC_Val1)
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HCSR04_MeasureIn+0x138>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HCSR04_MeasureIn+0x134>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d907      	bls.n	8002140 <HCSR04_MeasureIn+0x80>
			Difference = IC_Val2-IC_Val1;
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HCSR04_MeasureIn+0x138>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HCSR04_MeasureIn+0x134>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <HCSR04_MeasureIn+0x13c>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e00f      	b.n	8002160 <HCSR04_MeasureIn+0xa0>
		else if (IC_Val1 > IC_Val2)
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HCSR04_MeasureIn+0x134>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HCSR04_MeasureIn+0x138>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d909      	bls.n	8002160 <HCSR04_MeasureIn+0xa0>
			Difference = (0xffff - IC_Val1) + IC_Val2;
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HCSR04_MeasureIn+0x138>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HCSR04_MeasureIn+0x134>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800215a:	33ff      	adds	r3, #255	; 0xff
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HCSR04_MeasureIn+0x13c>)
 800215e:	6013      	str	r3, [r2, #0]
		DistanceIn = Difference * .034/2;
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HCSR04_MeasureIn+0x13c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9cd 	bl	8000504 <__aeabi_ui2d>
 800216a:	a31f      	add	r3, pc, #124	; (adr r3, 80021e8 <HCSR04_MeasureIn+0x128>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe fa42 	bl	80005f8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002184:	f7fe fb62 	bl	800084c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd0a 	bl	8000ba8 <__aeabi_d2uiz>
 8002194:	4603      	mov	r3, r0
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HCSR04_MeasureIn+0x140>)
 800219a:	701a      	strb	r2, [r3, #0]
		sprintf(printDistanceIn, "Distance: %d", DistanceIn);
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HCSR04_MeasureIn+0x140>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4918      	ldr	r1, [pc, #96]	; (8002204 <HCSR04_MeasureIn+0x144>)
 80021a4:	4818      	ldr	r0, [pc, #96]	; (8002208 <HCSR04_MeasureIn+0x148>)
 80021a6:	f004 f85d 	bl	8006264 <siprintf>
		Is_First_Captured1 = 0; // set it back to false
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HCSR04_MeasureIn+0x130>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020a 	bic.w	r2, r2, #10
 80021be:	621a      	str	r2, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a12      	ldr	r2, [r2, #32]
 80021ca:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HCSR04_MeasureIn+0x14c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HCSR04_MeasureIn+0x14c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0202 	bic.w	r2, r2, #2
 80021da:	60da      	str	r2, [r3, #12]
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	f3af 8000 	nop.w
 80021e8:	b020c49c 	.word	0xb020c49c
 80021ec:	3fa16872 	.word	0x3fa16872
 80021f0:	20000328 	.word	0x20000328
 80021f4:	2000031c 	.word	0x2000031c
 80021f8:	20000320 	.word	0x20000320
 80021fc:	20000324 	.word	0x20000324
 8002200:	2000032a 	.word	0x2000032a
 8002204:	0800883c 	.word	0x0800883c
 8002208:	2000032c 	.word	0x2000032c
 800220c:	20000258 	.word	0x20000258

08002210 <HCSR04_MeasureOut>:

void HCSR04_MeasureOut (TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	if (Is_First_Captured2==0) // if the first value is not captured
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HCSR04_MeasureOut+0x130>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11a      	bne.n	8002256 <HCSR04_MeasureOut+0x46>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8002220:	2104      	movs	r1, #4
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f002 fffc 	bl	8005220 <HAL_TIM_ReadCapturedValue>
 8002228:	4603      	mov	r3, r0
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HCSR04_MeasureOut+0x134>)
 800222c:	6013      	str	r3, [r2, #0]
		Is_First_Captured2 = 1;  // set the first captured as true
 800222e:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HCSR04_MeasureOut+0x130>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002242:	621a      	str	r2, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0220 	orr.w	r2, r2, #32
 8002252:	621a      	str	r2, [r3, #32]

		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
	}
}
 8002254:	e06a      	b.n	800232c <HCSR04_MeasureOut+0x11c>
	else if (Is_First_Captured2==1)   // if the first is already captured
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HCSR04_MeasureOut+0x130>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d166      	bne.n	800232c <HCSR04_MeasureOut+0x11c>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 800225e:	2104      	movs	r1, #4
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 ffdd 	bl	8005220 <HAL_TIM_ReadCapturedValue>
 8002266:	4603      	mov	r3, r0
 8002268:	4a37      	ldr	r2, [pc, #220]	; (8002348 <HCSR04_MeasureOut+0x138>)
 800226a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
		if (IC_Val2 > IC_Val1)
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HCSR04_MeasureOut+0x138>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HCSR04_MeasureOut+0x134>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d907      	bls.n	8002290 <HCSR04_MeasureOut+0x80>
			Difference = IC_Val2-IC_Val1;
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HCSR04_MeasureOut+0x138>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HCSR04_MeasureOut+0x134>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	4a30      	ldr	r2, [pc, #192]	; (800234c <HCSR04_MeasureOut+0x13c>)
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00f      	b.n	80022b0 <HCSR04_MeasureOut+0xa0>
		else if (IC_Val1 > IC_Val2)
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HCSR04_MeasureOut+0x134>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HCSR04_MeasureOut+0x138>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d909      	bls.n	80022b0 <HCSR04_MeasureOut+0xa0>
			Difference = (0xffff - IC_Val1) + IC_Val2;
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HCSR04_MeasureOut+0x138>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HCSR04_MeasureOut+0x134>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80022aa:	33ff      	adds	r3, #255	; 0xff
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <HCSR04_MeasureOut+0x13c>)
 80022ae:	6013      	str	r3, [r2, #0]
		DistanceOut = Difference * .034/2;
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <HCSR04_MeasureOut+0x13c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f925 	bl	8000504 <__aeabi_ui2d>
 80022ba:	a31f      	add	r3, pc, #124	; (adr r3, 8002338 <HCSR04_MeasureOut+0x128>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f99a 	bl	80005f8 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d4:	f7fe faba 	bl	800084c <__aeabi_ddiv>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc62 	bl	8000ba8 <__aeabi_d2uiz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HCSR04_MeasureOut+0x140>)
 80022ea:	701a      	strb	r2, [r3, #0]
		sprintf(printDistanceOut, "Distance: %d", DistanceOut);
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HCSR04_MeasureOut+0x140>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4918      	ldr	r1, [pc, #96]	; (8002354 <HCSR04_MeasureOut+0x144>)
 80022f4:	4818      	ldr	r0, [pc, #96]	; (8002358 <HCSR04_MeasureOut+0x148>)
 80022f6:	f003 ffb5 	bl	8006264 <siprintf>
		Is_First_Captured2 = 0; // set it back to false
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HCSR04_MeasureOut+0x130>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800230e:	621a      	str	r2, [r3, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a12      	ldr	r2, [r2, #32]
 800231a:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HCSR04_MeasureOut+0x14c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HCSR04_MeasureOut+0x14c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	f3af 8000 	nop.w
 8002338:	b020c49c 	.word	0xb020c49c
 800233c:	3fa16872 	.word	0x3fa16872
 8002340:	20000329 	.word	0x20000329
 8002344:	2000031c 	.word	0x2000031c
 8002348:	20000320 	.word	0x20000320
 800234c:	20000324 	.word	0x20000324
 8002350:	2000032b 	.word	0x2000032b
 8002354:	0800883c 	.word	0x0800883c
 8002358:	20000340 	.word	0x20000340
 800235c:	20000258 	.word	0x20000258

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 fda2 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM1_CC_IRQHandler+0x10>)
 80023ba:	f002 fcc5 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000258 	.word	0x20000258

080023c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <TIM2_IRQHandler+0x10>)
 80023ce:	f002 fcbb 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002a0 	.word	0x200002a0

080023dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <SPI1_IRQHandler+0x10>)
 80023e2:	f002 f899 	bl	8004518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000200 	.word	0x20000200

080023f0 <MFRC522_Compare>:
uint8_t CardID_Print[50] = {'\0'};
uint8_t buffer_Detection[50] = {'\0'};


  MFRC522_Status_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID)
  {
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  	uint8_t i;

  	for (i = 0; i < 4; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e00e      	b.n	800241e <MFRC522_Compare+0x2e>
  		if (CardID[i] != CompareID[i])
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	440b      	add	r3, r1
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <MFRC522_Compare+0x28>
  			return MI_ERR;
 8002414:	2302      	movs	r3, #2
 8002416:	e006      	b.n	8002426 <MFRC522_Compare+0x36>
  	for (i = 0; i < 4; i++)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	3301      	adds	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d9ed      	bls.n	8002400 <MFRC522_Compare+0x10>

  	return MI_OK;
 8002424:	2300      	movs	r3, #0
  }
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <MFRC522_WriteRegister>:

  void MFRC522_WriteRegister(uint8_t addr, uint8_t val)
  {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]
      uint8_t data[2];

      data[0] = (addr << 1) & 0x7E;  // Set address and clear write bit
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800244e:	b2db      	uxtb	r3, r3
 8002450:	733b      	strb	r3, [r7, #12]
      data[1] = val;
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	737b      	strb	r3, [r7, #13]

      HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2110      	movs	r1, #16
 800245a:	480a      	ldr	r0, [pc, #40]	; (8002484 <MFRC522_WriteRegister+0x50>)
 800245c:	f001 f876 	bl	800354c <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8002460:	f107 010c 	add.w	r1, r7, #12
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	2202      	movs	r2, #2
 800246a:	4807      	ldr	r0, [pc, #28]	; (8002488 <MFRC522_WriteRegister+0x54>)
 800246c:	f001 fd75 	bl	8003f5a <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	2110      	movs	r1, #16
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <MFRC522_WriteRegister+0x50>)
 8002476:	f001 f869 	bl	800354c <HAL_GPIO_WritePin>
  }
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40020000 	.word	0x40020000
 8002488:	20000200 	.word	0x20000200

0800248c <MFRC522_ReadRegister>:

  uint8_t MFRC522_ReadRegister(uint8_t reg)
  {
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
      // Create the command byte by setting the MSB to 0 for a read operation
      uint8_t command = ((reg << 1) & 0x7E) | 0x80;
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	b25b      	sxtb	r3, r3
 800249c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	73fb      	strb	r3, [r7, #15]
      uint8_t buf[2] = {command, 0};
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	733b      	strb	r3, [r7, #12]
 80024ae:	2300      	movs	r3, #0
 80024b0:	737b      	strb	r3, [r7, #13]

      // Transmit the command byte to read the register value
      HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2110      	movs	r1, #16
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <MFRC522_ReadRegister+0x5c>)
 80024b8:	f001 f848 	bl	800354c <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, buf, buf, 2, HAL_MAX_DELAY);
 80024bc:	f107 020c 	add.w	r2, r7, #12
 80024c0:	f107 010c 	add.w	r1, r7, #12
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2302      	movs	r3, #2
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <MFRC522_ReadRegister+0x60>)
 80024ce:	f001 fe80 	bl	80041d2 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2110      	movs	r1, #16
 80024d6:	4804      	ldr	r0, [pc, #16]	; (80024e8 <MFRC522_ReadRegister+0x5c>)
 80024d8:	f001 f838 	bl	800354c <HAL_GPIO_WritePin>

      return buf[1];
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
  }
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020000 	.word	0x40020000
 80024ec:	20000200 	.word	0x20000200

080024f0 <MFRC522_SetBitMask>:

  void MFRC522_SetBitMask(uint8_t reg, uint8_t mask)
  {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	460a      	mov	r2, r1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71bb      	strb	r3, [r7, #6]
  	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffc2 	bl	800248c <MFRC522_ReadRegister>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	79bb      	ldrb	r3, [r7, #6]
 800250e:	4313      	orrs	r3, r2
 8002510:	b2da      	uxtb	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff8c 	bl	8002434 <MFRC522_WriteRegister>
  }
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <MFRC522_ClearBitMask>:

  void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask)
  {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	4613      	mov	r3, r2
 8002532:	71bb      	strb	r3, [r7, #6]
  	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffa8 	bl	800248c <MFRC522_ReadRegister>
 800253c:	4603      	mov	r3, r0
 800253e:	b25a      	sxtb	r2, r3
 8002540:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002544:	43db      	mvns	r3, r3
 8002546:	b25b      	sxtb	r3, r3
 8002548:	4013      	ands	r3, r2
 800254a:	b25b      	sxtb	r3, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff6e 	bl	8002434 <MFRC522_WriteRegister>
  }
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <MFRC522_AntennaOn>:

  void MFRC522_AntennaOn(void)
  {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  	uint8_t temp;

  	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002566:	2014      	movs	r0, #20
 8002568:	f7ff ff90 	bl	800248c <MFRC522_ReadRegister>
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]

  	if (!(temp & 0x03))
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <MFRC522_AntennaOn+0x2a>
  		MFRC522_WriteRegister(MFRC522_REG_TX_CONTROL, temp | 0x03);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f043 0303 	orr.w	r3, r3, #3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	2014      	movs	r0, #20
 8002586:	f7ff ff55 	bl	8002434 <MFRC522_WriteRegister>

  }
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <MFRC522_Reset>:
  {
  	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
  }

  void MFRC522_Reset(void)
  {
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002596:	210f      	movs	r1, #15
 8002598:	2001      	movs	r0, #1
 800259a:	f7ff ff4b 	bl	8002434 <MFRC522_WriteRegister>
  }
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <MFRC522_ToCard>:


  MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen)
  {
 80025a2:	b590      	push	{r4, r7, lr}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	4613      	mov	r3, r2
 80025b2:	73bb      	strb	r3, [r7, #14]
  	MFRC522_Status_t status = MI_ERR;
 80025b4:	2302      	movs	r3, #2
 80025b6:	75fb      	strb	r3, [r7, #23]
  	uint8_t irqEn = 0x00;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75bb      	strb	r3, [r7, #22]
  	uint8_t waitIRq = 0x00;
 80025bc:	2300      	movs	r3, #0
 80025be:	757b      	strb	r3, [r7, #21]
  	uint8_t lastBits;
  	uint8_t n;
  	uint16_t i;

  	switch (command)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d006      	beq.n	80025d4 <MFRC522_ToCard+0x32>
 80025c6:	2b0e      	cmp	r3, #14
 80025c8:	d109      	bne.n	80025de <MFRC522_ToCard+0x3c>
  	{
  		case PCD_AUTHENT:
  		{
  			irqEn = 0x12;
 80025ca:	2312      	movs	r3, #18
 80025cc:	75bb      	strb	r3, [r7, #22]
  			waitIRq = 0x10;
 80025ce:	2310      	movs	r3, #16
 80025d0:	757b      	strb	r3, [r7, #21]
  			break;
 80025d2:	e005      	b.n	80025e0 <MFRC522_ToCard+0x3e>
  		}
  		case PCD_TRANSCEIVE:
  		{
  			irqEn = 0x77;
 80025d4:	2377      	movs	r3, #119	; 0x77
 80025d6:	75bb      	strb	r3, [r7, #22]
  			waitIRq = 0x30;
 80025d8:	2330      	movs	r3, #48	; 0x30
 80025da:	757b      	strb	r3, [r7, #21]
  			break;
 80025dc:	e000      	b.n	80025e0 <MFRC522_ToCard+0x3e>
  		}
  		default:
  			break;
 80025de:	bf00      	nop
  	}

  	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80025e0:	7dbb      	ldrb	r3, [r7, #22]
 80025e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	2002      	movs	r0, #2
 80025ec:	f7ff ff22 	bl	8002434 <MFRC522_WriteRegister>
  	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	2004      	movs	r0, #4
 80025f4:	f7ff ff96 	bl	8002524 <MFRC522_ClearBitMask>
  	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	200a      	movs	r0, #10
 80025fc:	f7ff ff78 	bl	80024f0 <MFRC522_SetBitMask>

  	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8002600:	2100      	movs	r1, #0
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff ff16 	bl	8002434 <MFRC522_WriteRegister>

  	//Writing data to the FIFO
  	for (i = 0; i < sendLen; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	827b      	strh	r3, [r7, #18]
 800260c:	e00a      	b.n	8002624 <MFRC522_ToCard+0x82>
  		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	2009      	movs	r0, #9
 800261a:	f7ff ff0b 	bl	8002434 <MFRC522_WriteRegister>
  	for (i = 0; i < sendLen; i++)
 800261e:	8a7b      	ldrh	r3, [r7, #18]
 8002620:	3301      	adds	r3, #1
 8002622:	827b      	strh	r3, [r7, #18]
 8002624:	7bbb      	ldrb	r3, [r7, #14]
 8002626:	b29b      	uxth	r3, r3
 8002628:	8a7a      	ldrh	r2, [r7, #18]
 800262a:	429a      	cmp	r2, r3
 800262c:	d3ef      	bcc.n	800260e <MFRC522_ToCard+0x6c>

  	//Execute the command
  	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	4619      	mov	r1, r3
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fefe 	bl	8002434 <MFRC522_WriteRegister>

  	if (command == PCD_TRANSCEIVE)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d103      	bne.n	8002646 <MFRC522_ToCard+0xa4>
  		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	200d      	movs	r0, #13
 8002642:	f7ff ff55 	bl	80024f0 <MFRC522_SetBitMask>

  	//Waiting to receive data to complete
  	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8002646:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800264a:	827b      	strh	r3, [r7, #18]
  	do {
  		//CommIrqReg[7..0]
  		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
  		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800264c:	2004      	movs	r0, #4
 800264e:	f7ff ff1d 	bl	800248c <MFRC522_ReadRegister>
 8002652:	4603      	mov	r3, r0
 8002654:	753b      	strb	r3, [r7, #20]
  		i--;
 8002656:	8a7b      	ldrh	r3, [r7, #18]
 8002658:	3b01      	subs	r3, #1
 800265a:	827b      	strh	r3, [r7, #18]
  	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <MFRC522_ToCard+0xd6>
 8002662:	7d3b      	ldrb	r3, [r7, #20]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <MFRC522_ToCard+0xd6>
 800266c:	7d3a      	ldrb	r2, [r7, #20]
 800266e:	7d7b      	ldrb	r3, [r7, #21]
 8002670:	4013      	ands	r3, r2
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0e9      	beq.n	800264c <MFRC522_ToCard+0xaa>

  	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	200d      	movs	r0, #13
 800267c:	f7ff ff52 	bl	8002524 <MFRC522_ClearBitMask>

  	if (i != 0)  {
 8002680:	8a7b      	ldrh	r3, [r7, #18]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d057      	beq.n	8002736 <MFRC522_ToCard+0x194>
  		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8002686:	2006      	movs	r0, #6
 8002688:	f7ff ff00 	bl	800248c <MFRC522_ReadRegister>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 031b 	and.w	r3, r3, #27
 8002692:	2b00      	cmp	r3, #0
 8002694:	d14d      	bne.n	8002732 <MFRC522_ToCard+0x190>

  			status = MI_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]

  			if (n & irqEn & 0x01)
 800269a:	7d3a      	ldrb	r2, [r7, #20]
 800269c:	7dbb      	ldrb	r3, [r7, #22]
 800269e:	4013      	ands	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MFRC522_ToCard+0x10c>
  				status = MI_NOTAGERR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]

  			if (command == PCD_TRANSCEIVE) {
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b0c      	cmp	r3, #12
 80026b2:	d140      	bne.n	8002736 <MFRC522_ToCard+0x194>
  				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80026b4:	200a      	movs	r0, #10
 80026b6:	f7ff fee9 	bl	800248c <MFRC522_ReadRegister>
 80026ba:	4603      	mov	r3, r0
 80026bc:	753b      	strb	r3, [r7, #20]
  				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80026be:	200c      	movs	r0, #12
 80026c0:	f7ff fee4 	bl	800248c <MFRC522_ReadRegister>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	747b      	strb	r3, [r7, #17]

  				if (lastBits)
 80026cc:	7c7b      	ldrb	r3, [r7, #17]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <MFRC522_ToCard+0x148>
  					*backLen = (n - 1) * 8 + lastBits;
 80026d2:	7d3b      	ldrb	r3, [r7, #20]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	b29a      	uxth	r2, r3
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e005      	b.n	80026f6 <MFRC522_ToCard+0x154>
  				else
  					*backLen = n * 8;
 80026ea:	7d3b      	ldrb	r3, [r7, #20]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	801a      	strh	r2, [r3, #0]


  				if (n == 0)
 80026f6:	7d3b      	ldrb	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <MFRC522_ToCard+0x15e>
  					n = 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	753b      	strb	r3, [r7, #20]

  				if (n > MFRC522_MAX_LEN)
 8002700:	7d3b      	ldrb	r3, [r7, #20]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d901      	bls.n	800270a <MFRC522_ToCard+0x168>
  					n = MFRC522_MAX_LEN;
 8002706:	2310      	movs	r3, #16
 8002708:	753b      	strb	r3, [r7, #20]

  				//Reading the received data in FIFO
  				for (i = 0; i < n; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	827b      	strh	r3, [r7, #18]
 800270e:	e00a      	b.n	8002726 <MFRC522_ToCard+0x184>
  					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8002710:	8a7b      	ldrh	r3, [r7, #18]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	18d4      	adds	r4, r2, r3
 8002716:	2009      	movs	r0, #9
 8002718:	f7ff feb8 	bl	800248c <MFRC522_ReadRegister>
 800271c:	4603      	mov	r3, r0
 800271e:	7023      	strb	r3, [r4, #0]
  				for (i = 0; i < n; i++)
 8002720:	8a7b      	ldrh	r3, [r7, #18]
 8002722:	3301      	adds	r3, #1
 8002724:	827b      	strh	r3, [r7, #18]
 8002726:	7d3b      	ldrb	r3, [r7, #20]
 8002728:	b29b      	uxth	r3, r3
 800272a:	8a7a      	ldrh	r2, [r7, #18]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3ef      	bcc.n	8002710 <MFRC522_ToCard+0x16e>
 8002730:	e001      	b.n	8002736 <MFRC522_ToCard+0x194>
  			}
  		}
  		else
  			status = MI_ERR;
 8002732:	2302      	movs	r3, #2
 8002734:	75fb      	strb	r3, [r7, #23]

  	}

  	return status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
  }
 8002738:	4618      	mov	r0, r3
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}

08002740 <MFRC522_Anticoll>:

  MFRC522_Status_t MFRC522_Anticoll(uint8_t *serNum)
  {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
      MFRC522_Status_t status;
      uint8_t i, check = 0x00;
 8002748:	2300      	movs	r3, #0
 800274a:	737b      	strb	r3, [r7, #13]
      uint8_t size = sizeof(serNum);
 800274c:	2304      	movs	r3, #4
 800274e:	733b      	strb	r3, [r7, #12]

      //Clear interrupts
      MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);
 8002750:	2100      	movs	r1, #0
 8002752:	200d      	movs	r0, #13
 8002754:	f7ff fe6e 	bl	8002434 <MFRC522_WriteRegister>

      //Send Request command
      serNum[0] = PICC_ANTICOLL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2293      	movs	r2, #147	; 0x93
 800275c:	701a      	strb	r2, [r3, #0]
      serNum[1] = 0x20;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3301      	adds	r3, #1
 8002762:	2220      	movs	r2, #32
 8002764:	701a      	strb	r2, [r3, #0]
      status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &size);
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	200c      	movs	r0, #12
 8002774:	f7ff ff15 	bl	80025a2 <MFRC522_ToCard>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]

      //If status is OK
      if (status == MI_OK) {
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <MFRC522_Anticoll+0x74>
          //Check received data with check byte
          for (i = 0; i < 4; i++)
 8002782:	2300      	movs	r3, #0
 8002784:	73bb      	strb	r3, [r7, #14]
 8002786:	e009      	b.n	800279c <MFRC522_Anticoll+0x5c>
              check ^= serNum[i];
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	7b7b      	ldrb	r3, [r7, #13]
 8002792:	4053      	eors	r3, r2
 8002794:	737b      	strb	r3, [r7, #13]
          for (i = 0; i < 4; i++)
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	3301      	adds	r3, #1
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9f2      	bls.n	8002788 <MFRC522_Anticoll+0x48>

          if (check != serNum[i])
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	7b7a      	ldrb	r2, [r7, #13]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <MFRC522_Anticoll+0x74>
              status = MI_ERR;
 80027b0:	2302      	movs	r3, #2
 80027b2:	73fb      	strb	r3, [r7, #15]

      }

      return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
  }
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <MFRC522_CalculateCRC>:

  void MFRC522_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result)
  {
 80027be:	b590      	push	{r4, r7, lr}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	460b      	mov	r3, r1
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	72fb      	strb	r3, [r7, #11]
	  uint8_t i, n;

	  	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80027cc:	2104      	movs	r1, #4
 80027ce:	2005      	movs	r0, #5
 80027d0:	f7ff fea8 	bl	8002524 <MFRC522_ClearBitMask>
	  	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	200a      	movs	r0, #10
 80027d8:	f7ff fe8a 	bl	80024f0 <MFRC522_SetBitMask>
	  	//Write_MFRC522(CommandReg, PCD_IDLE);

	  	//Writing data to the FIFO
	  	for (i = 0; i < length; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
 80027e0:	e00a      	b.n	80027f8 <MFRC522_CalculateCRC+0x3a>
	  		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(data+i));
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	2009      	movs	r0, #9
 80027ee:	f7ff fe21 	bl	8002434 <MFRC522_WriteRegister>
	  	for (i = 0; i < length; i++)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	3301      	adds	r3, #1
 80027f6:	75fb      	strb	r3, [r7, #23]
 80027f8:	7dfa      	ldrb	r2, [r7, #23]
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3f0      	bcc.n	80027e2 <MFRC522_CalculateCRC+0x24>

	  	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002800:	2103      	movs	r1, #3
 8002802:	2001      	movs	r0, #1
 8002804:	f7ff fe16 	bl	8002434 <MFRC522_WriteRegister>

	  	//Wait CRC calculation is complete
	  	i = 0xFF;
 8002808:	23ff      	movs	r3, #255	; 0xff
 800280a:	75fb      	strb	r3, [r7, #23]

	  	do
	  	{
	  		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800280c:	2005      	movs	r0, #5
 800280e:	f7ff fe3d 	bl	800248c <MFRC522_ReadRegister>
 8002812:	4603      	mov	r3, r0
 8002814:	75bb      	strb	r3, [r7, #22]
	  		i--;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	3b01      	subs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
	  	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <MFRC522_CalculateCRC+0x6e>
 8002822:	7dbb      	ldrb	r3, [r7, #22]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <MFRC522_CalculateCRC+0x4e>

	  	//Read CRC calculation result
	  	result[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800282c:	2022      	movs	r0, #34	; 0x22
 800282e:	f7ff fe2d 	bl	800248c <MFRC522_ReadRegister>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	701a      	strb	r2, [r3, #0]
	  	result[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1c5c      	adds	r4, r3, #1
 800283e:	2021      	movs	r0, #33	; 0x21
 8002840:	f7ff fe24 	bl	800248c <MFRC522_ReadRegister>
 8002844:	4603      	mov	r3, r0
 8002846:	7023      	strb	r3, [r4, #0]
  }
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <MFRC522_SelectTag>:

  MFRC522_Status_t MFRC522_SelectTag(uint8_t *uid)
  {
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	6078      	str	r0, [r7, #4]
      uint8_t status, i;
      uint8_t buffer[9];
      uint8_t size;

      buffer[0] = PICC_SELECTTAG;
 8002858:	2393      	movs	r3, #147	; 0x93
 800285a:	733b      	strb	r3, [r7, #12]
      buffer[1] = 0x70;
 800285c:	2370      	movs	r3, #112	; 0x70
 800285e:	737b      	strb	r3, [r7, #13]

      for (i = 0; i < 5; i++)
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
 8002864:	e00c      	b.n	8002880 <MFRC522_SelectTag+0x30>
          buffer[i+2] = *(uid+i);
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	441a      	add	r2, r3
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	3302      	adds	r3, #2
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	3318      	adds	r3, #24
 8002874:	443b      	add	r3, r7
 8002876:	f803 2c0c 	strb.w	r2, [r3, #-12]
      for (i = 0; i < 5; i++)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	3301      	adds	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d9ef      	bls.n	8002866 <MFRC522_SelectTag+0x16>

      MFRC522_CalculateCRC(buffer, 7, &buffer[7]);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	1dda      	adds	r2, r3, #7
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2107      	movs	r1, #7
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff93 	bl	80027be <MFRC522_CalculateCRC>

      status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &size);
 8002898:	f107 020c 	add.w	r2, r7, #12
 800289c:	f107 010c 	add.w	r1, r7, #12
 80028a0:	f107 030b 	add.w	r3, r7, #11
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	2209      	movs	r2, #9
 80028aa:	200c      	movs	r0, #12
 80028ac:	f7ff fe79 	bl	80025a2 <MFRC522_ToCard>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75bb      	strb	r3, [r7, #22]

      if ((status == MI_OK) && (size == 0x18))
 80028b4:	7dbb      	ldrb	r3, [r7, #22]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <MFRC522_SelectTag+0x74>
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	2b18      	cmp	r3, #24
 80028be:	d101      	bne.n	80028c4 <MFRC522_SelectTag+0x74>
          return MI_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <MFRC522_SelectTag+0x76>
      else
          return MI_ERR;
 80028c4:	2302      	movs	r3, #2
  }
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <MFRC522_Auth>:

  MFRC522_Status_t MFRC522_Auth(uint8_t authMode, uint8_t blockAddr, uint8_t *sectorKey, uint8_t *uid)
  {
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08a      	sub	sp, #40	; 0x28
 80028d2:	af02      	add	r7, sp, #8
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	460b      	mov	r3, r1
 80028de:	73bb      	strb	r3, [r7, #14]
	  uint16_t recvBits;
	  uint8_t i;
	  uint8_t buff[12];

      //Verify the command block address + sector + password + card serial number
      buff[0] = authMode;
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	743b      	strb	r3, [r7, #16]
      buff[1] = blockAddr;
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	747b      	strb	r3, [r7, #17]

      for (i = 0; i < 6; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	77bb      	strb	r3, [r7, #30]
 80028ec:	e00c      	b.n	8002908 <MFRC522_Auth+0x3a>
      	buff[i+2] = *(sectorKey+i);
 80028ee:	7fbb      	ldrb	r3, [r7, #30]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	441a      	add	r2, r3
 80028f4:	7fbb      	ldrb	r3, [r7, #30]
 80028f6:	3302      	adds	r3, #2
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	3320      	adds	r3, #32
 80028fc:	443b      	add	r3, r7
 80028fe:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (i = 0; i < 6; i++)
 8002902:	7fbb      	ldrb	r3, [r7, #30]
 8002904:	3301      	adds	r3, #1
 8002906:	77bb      	strb	r3, [r7, #30]
 8002908:	7fbb      	ldrb	r3, [r7, #30]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d9ef      	bls.n	80028ee <MFRC522_Auth+0x20>

      for (i = 0; i < 4; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	77bb      	strb	r3, [r7, #30]
 8002912:	e00c      	b.n	800292e <MFRC522_Auth+0x60>
      	buff[i+8] = *(uid+i);
 8002914:	7fbb      	ldrb	r3, [r7, #30]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	441a      	add	r2, r3
 800291a:	7fbb      	ldrb	r3, [r7, #30]
 800291c:	3308      	adds	r3, #8
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	3320      	adds	r3, #32
 8002922:	443b      	add	r3, r7
 8002924:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (i = 0; i < 4; i++)
 8002928:	7fbb      	ldrb	r3, [r7, #30]
 800292a:	3301      	adds	r3, #1
 800292c:	77bb      	strb	r3, [r7, #30]
 800292e:	7fbb      	ldrb	r3, [r7, #30]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d9ef      	bls.n	8002914 <MFRC522_Auth+0x46>

      status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8002934:	f107 0210 	add.w	r2, r7, #16
 8002938:	f107 0110 	add.w	r1, r7, #16
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	220c      	movs	r2, #12
 8002946:	200e      	movs	r0, #14
 8002948:	f7ff fe2b 	bl	80025a2 <MFRC522_ToCard>
 800294c:	4603      	mov	r3, r0
 800294e:	77fb      	strb	r3, [r7, #31]

      if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08)))
 8002950:	7ffb      	ldrb	r3, [r7, #31]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <MFRC522_Auth+0x98>
 8002956:	2008      	movs	r0, #8
 8002958:	f7ff fd98 	bl	800248c <MFRC522_ReadRegister>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <MFRC522_Auth+0x9c>
      {
        	status = MI_ERR;
 8002966:	2302      	movs	r3, #2
 8002968:	77fb      	strb	r3, [r7, #31]
      }


      	return status;
 800296a:	7ffb      	ldrb	r3, [r7, #31]
  }
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <MFRC522_Read>:

  MFRC522_Status_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
  {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
	  MFRC522_Status_t status;
	  	uint16_t unLen;

	  	recvData[0] = PICC_READ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2230      	movs	r2, #48	; 0x30
 8002984:	701a      	strb	r2, [r3, #0]
	  	recvData[1] = blockAddr;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	79fa      	ldrb	r2, [r7, #7]
 800298c:	701a      	strb	r2, [r3, #0]
	  	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	3302      	adds	r3, #2
 8002992:	461a      	mov	r2, r3
 8002994:	2102      	movs	r1, #2
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f7ff ff11 	bl	80027be <MFRC522_CalculateCRC>
	  	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	200c      	movs	r0, #12
 80029aa:	f7ff fdfa 	bl	80025a2 <MFRC522_ToCard>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]

	  	if ((status != MI_OK) || (unLen != 0x90))
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <MFRC522_Read+0x4a>
 80029b8:	89bb      	ldrh	r3, [r7, #12]
 80029ba:	2b90      	cmp	r3, #144	; 0x90
 80029bc:	d001      	beq.n	80029c2 <MFRC522_Read+0x4e>
	  		status = MI_ERR;
 80029be:	2302      	movs	r3, #2
 80029c0:	73fb      	strb	r3, [r7, #15]

	  	return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
  }
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <MFRC522_Init>:

  	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
  }

  void MFRC522_Init(void)
  {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	  // Set RST pin high to bring MFRC522 out of reset
	  HAL_GPIO_WritePin(MFRC522_RESET_PORT, MFRC522_RESET_PIN, GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2110      	movs	r1, #16
 80029d4:	4815      	ldr	r0, [pc, #84]	; (8002a2c <MFRC522_Init+0x60>)
 80029d6:	f000 fdb9 	bl	800354c <HAL_GPIO_WritePin>
	  // Set CS pin low to enable communication with MFRC522
	  HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	2110      	movs	r1, #16
 80029de:	4814      	ldr	r0, [pc, #80]	; (8002a30 <MFRC522_Init+0x64>)
 80029e0:	f000 fdb4 	bl	800354c <HAL_GPIO_WritePin>

	  MFRC522_Reset();
 80029e4:	f7ff fdd5 	bl	8002592 <MFRC522_Reset>

	  // Initialize MFRC522
	  MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80029e8:	218d      	movs	r1, #141	; 0x8d
 80029ea:	202a      	movs	r0, #42	; 0x2a
 80029ec:	f7ff fd22 	bl	8002434 <MFRC522_WriteRegister>
	  MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80029f0:	213e      	movs	r1, #62	; 0x3e
 80029f2:	202b      	movs	r0, #43	; 0x2b
 80029f4:	f7ff fd1e 	bl	8002434 <MFRC522_WriteRegister>
	  MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80029f8:	211e      	movs	r1, #30
 80029fa:	202d      	movs	r0, #45	; 0x2d
 80029fc:	f7ff fd1a 	bl	8002434 <MFRC522_WriteRegister>
	  MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8002a00:	2100      	movs	r1, #0
 8002a02:	202c      	movs	r0, #44	; 0x2c
 8002a04:	f7ff fd16 	bl	8002434 <MFRC522_WriteRegister>
	  MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8002a08:	2140      	movs	r1, #64	; 0x40
 8002a0a:	2015      	movs	r0, #21
 8002a0c:	f7ff fd12 	bl	8002434 <MFRC522_WriteRegister>
	  MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8002a10:	213d      	movs	r1, #61	; 0x3d
 8002a12:	2011      	movs	r0, #17
 8002a14:	f7ff fd0e 	bl	8002434 <MFRC522_WriteRegister>

	  // Enable antenna
	  MFRC522_AntennaOn();
 8002a18:	f7ff fda2 	bl	8002560 <MFRC522_AntennaOn>
	  // Set CS pin high to disable MFRC522
	  HAL_GPIO_WritePin(MFRC522_CS_PORT, MFRC522_CS_PIN, GPIO_PIN_SET);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2110      	movs	r1, #16
 8002a20:	4803      	ldr	r0, [pc, #12]	; (8002a30 <MFRC522_Init+0x64>)
 8002a22:	f000 fd93 	bl	800354c <HAL_GPIO_WritePin>
    }
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40020000 	.word	0x40020000

08002a34 <MFRC522_Request>:

  MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
      MFRC522_Status_t status;
      uint16_t backBits; // The received data bits

      MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);
 8002a40:	2107      	movs	r1, #7
 8002a42:	200d      	movs	r0, #13
 8002a44:	f7ff fcf6 	bl	8002434 <MFRC522_WriteRegister>

      TagType[0] = reqMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	701a      	strb	r2, [r3, #0]
      status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	200c      	movs	r0, #12
 8002a5c:	f7ff fda1 	bl	80025a2 <MFRC522_ToCard>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]

      if (status != MI_OK || backBits != 0x10)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <MFRC522_Request+0x3c>
 8002a6a:	89bb      	ldrh	r3, [r7, #12]
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d001      	beq.n	8002a74 <MFRC522_Request+0x40>
          status = MI_ERR;
 8002a70:	2302      	movs	r3, #2
 8002a72:	73fb      	strb	r3, [r7, #15]

      return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
  }
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <ReadCardValue>:

  MFRC522_Status_t ReadCardValue(void)
  {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af02      	add	r7, sp, #8
	  MFRC522_Init();
 8002a86:	f7ff ffa1 	bl	80029cc <MFRC522_Init>
      MFRC522_Status_t status = MI_ERR;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      uint8_t buffer[18] = {0};
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	819a      	strh	r2, [r3, #12]
      uint8_t serial[5] = {0};
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	743b      	strb	r3, [r7, #16]
      uint8_t key[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8002aaa:	4a50      	ldr	r2, [pc, #320]	; (8002bec <ReadCardValue+0x16c>)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab2:	6018      	str	r0, [r3, #0]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	8019      	strh	r1, [r3, #0]
      uint8_t sector = 3;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      uint8_t block = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

      // Check for card
      status = MFRC522_Request(PICC_REQIDL, buffer);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2026      	movs	r0, #38	; 0x26
 8002acc:	f7ff ffb2 	bl	8002a34 <MFRC522_Request>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (status != MI_OK)
 8002ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <ReadCardValue+0x6c>
      {
    	  sprintf((char*)buffer_Detection,"No card found");
 8002ade:	4944      	ldr	r1, [pc, #272]	; (8002bf0 <ReadCardValue+0x170>)
 8002ae0:	4844      	ldr	r0, [pc, #272]	; (8002bf4 <ReadCardValue+0x174>)
 8002ae2:	f003 fbbf 	bl	8006264 <siprintf>
          return status;
 8002ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002aea:	e07b      	b.n	8002be4 <ReadCardValue+0x164>
      }

      // Get card serial number
      status = MFRC522_Anticoll(serial);
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fe25 	bl	8002740 <MFRC522_Anticoll>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (status != MI_OK)
 8002afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <ReadCardValue+0x92>
      {
    	  sprintf((char*)buffer_Detection,"Error reading card serial number\r\n");
 8002b04:	493c      	ldr	r1, [pc, #240]	; (8002bf8 <ReadCardValue+0x178>)
 8002b06:	483b      	ldr	r0, [pc, #236]	; (8002bf4 <ReadCardValue+0x174>)
 8002b08:	f003 fbac 	bl	8006264 <siprintf>
          return status;
 8002b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b10:	e068      	b.n	8002be4 <ReadCardValue+0x164>
      }

      // Select card
      status = MFRC522_SelectTag(serial);
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fe9a 	bl	8002850 <MFRC522_SelectTag>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (status != MI_OK)
 8002b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <ReadCardValue+0xb8>
      {
    	  sprintf((char*)buffer_Detection,"Error selecting card\r\n");
 8002b2a:	4934      	ldr	r1, [pc, #208]	; (8002bfc <ReadCardValue+0x17c>)
 8002b2c:	4831      	ldr	r0, [pc, #196]	; (8002bf4 <ReadCardValue+0x174>)
 8002b2e:	f003 fb99 	bl	8006264 <siprintf>
          return status;
 8002b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b36:	e055      	b.n	8002be4 <ReadCardValue+0x164>
      }

      // Authenticate with card
      status = MFRC522_Auth(PICC_AUTHENT1A, sector, key, serial);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	1d3a      	adds	r2, r7, #4
 8002b3e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8002b42:	2060      	movs	r0, #96	; 0x60
 8002b44:	f7ff fec3 	bl	80028ce <MFRC522_Auth>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (status != MI_OK)
 8002b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <ReadCardValue+0xe4>
      {
    	  sprintf((char*)buffer_Detection,"Error authenticating with card\r\n");
 8002b56:	492a      	ldr	r1, [pc, #168]	; (8002c00 <ReadCardValue+0x180>)
 8002b58:	4826      	ldr	r0, [pc, #152]	; (8002bf4 <ReadCardValue+0x174>)
 8002b5a:	f003 fb83 	bl	8006264 <siprintf>
          return status;
 8002b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b62:	e03f      	b.n	8002be4 <ReadCardValue+0x164>
      }

      // Read value from card
      status = MFRC522_Read(block, buffer);
 8002b64:	f107 0214 	add.w	r2, r7, #20
 8002b68:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff00 	bl	8002974 <MFRC522_Read>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (status != MI_OK)
 8002b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <ReadCardValue+0x110>
      {
    	  sprintf((char*)buffer_Detection,"Error reading card value\r\n");
 8002b82:	4920      	ldr	r1, [pc, #128]	; (8002c04 <ReadCardValue+0x184>)
 8002b84:	481b      	ldr	r0, [pc, #108]	; (8002bf4 <ReadCardValue+0x174>)
 8002b86:	f003 fb6d 	bl	8006264 <siprintf>
          return status;
 8002b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b8e:	e029      	b.n	8002be4 <ReadCardValue+0x164>
      }

      // Process value and output
      for (int  i = 0 ; i < 4 ; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	e00c      	b.n	8002bb0 <ReadCardValue+0x130>
    	  CardID[i] = buffer[i]; // Assigning the UID to a global variable
 8002b96:	f107 0214 	add.w	r2, r7, #20
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	7819      	ldrb	r1, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <ReadCardValue+0x188>)
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	4413      	add	r3, r2
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
      for (int  i = 0 ; i < 4 ; i++)
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	3301      	adds	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	ddef      	ble.n	8002b96 <ReadCardValue+0x116>

      sprintf(CardID_Print, "%02x %02x %02x %02x", (uint32_t)buffer[0], (uint32_t)buffer[1], (uint32_t)buffer[2], (uint32_t)buffer[3]);
 8002bb6:	7d3b      	ldrb	r3, [r7, #20]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	7d7b      	ldrb	r3, [r7, #21]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	7dbb      	ldrb	r3, [r7, #22]
 8002bc0:	7dfa      	ldrb	r2, [r7, #23]
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	4910      	ldr	r1, [pc, #64]	; (8002c0c <ReadCardValue+0x18c>)
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <ReadCardValue+0x190>)
 8002bce:	f003 fb49 	bl	8006264 <siprintf>
      status = MI_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      sprintf((char*)buffer_Detection,"Card Detected!");
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <ReadCardValue+0x194>)
 8002bda:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <ReadCardValue+0x174>)
 8002bdc:	f003 fb42 	bl	8006264 <siprintf>
      return status;
 8002be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  }
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	080088fc 	.word	0x080088fc
 8002bf0:	0800884c 	.word	0x0800884c
 8002bf4:	2000038c 	.word	0x2000038c
 8002bf8:	0800885c 	.word	0x0800885c
 8002bfc:	08008880 	.word	0x08008880
 8002c00:	08008898 	.word	0x08008898
 8002c04:	080088bc 	.word	0x080088bc
 8002c08:	20000354 	.word	0x20000354
 8002c0c:	080088d8 	.word	0x080088d8
 8002c10:	20000358 	.word	0x20000358
 8002c14:	080088ec 	.word	0x080088ec

08002c18 <microDelay>:
 */

#include "stm32f4xx_microDelay.h"

void microDelay(uint16_t us)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <microDelay+0x30>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8002c2a:	bf00      	nop
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <microDelay+0x30>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3f9      	bcc.n	8002c2c <microDelay+0x14>
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200002a0 	.word	0x200002a0

08002c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return 1;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_kill>:

int _kill(int pid, int sig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c66:	f002 fe61 	bl	800592c <__errno>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2216      	movs	r2, #22
 8002c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_exit>:

void _exit (int status)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffe7 	bl	8002c5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c8e:	e7fe      	b.n	8002c8e <_exit+0x12>

08002c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e00a      	b.n	8002cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ca2:	f3af 8000 	nop.w
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60ba      	str	r2, [r7, #8]
 8002cae:	b2ca      	uxtb	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dbf0      	blt.n	8002ca2 <_read+0x12>
  }

  return len;
 8002cc0:	687b      	ldr	r3, [r7, #4]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e009      	b.n	8002cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbf1      	blt.n	8002cdc <_write+0x12>
  }
  return len;
 8002cf8:	687b      	ldr	r3, [r7, #4]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_close>:

int _close(int file)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_isatty>:

int _isatty(int file)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <_sbrk+0x5c>)
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <_sbrk+0x60>)
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <_sbrk+0x64>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <_sbrk+0x64>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <_sbrk+0x68>)
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d9c:	f002 fdc6 	bl	800592c <__errno>
 8002da0:	4603      	mov	r3, r0
 8002da2:	220c      	movs	r2, #12
 8002da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e009      	b.n	8002dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <_sbrk+0x64>)
 8002dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20020000 	.word	0x20020000
 8002dcc:	00000400 	.word	0x00000400
 8002dd0:	200003c0 	.word	0x200003c0
 8002dd4:	200003d8 	.word	0x200003d8

08002dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <SystemInit+0x20>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <SystemInit+0x20>)
 8002de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e18:	4c0b      	ldr	r4, [pc, #44]	; (8002e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e26:	f7ff ffd7 	bl	8002dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2a:	f002 fd85 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2e:	f7fe f85d 	bl	8000eec <main>
  bx  lr    
 8002e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e40:	08008cfc 	.word	0x08008cfc
  ldr r2, =_sbss
 8002e44:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e48:	200003d8 	.word	0x200003d8

08002e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_Init+0x40>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_Init+0x40>)
 8002e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_Init+0x40>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 f94f 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f808 	bl	8002e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff f802 	bl	8001e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_InitTick+0x54>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f967 	bl	8003186 <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00e      	b.n	8002ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d80a      	bhi.n	8002ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 f92f 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <HAL_InitTick+0x5c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_IncTick+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_IncTick+0x24>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000010 	.word	0x20000010
 8002f18:	200003c4 	.word	0x200003c4

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200003c4 	.word	0x200003c4

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000010 	.word	0x20000010

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff3e 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff31 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa2 	bl	80030d8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d004      	beq.n	80031bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e00c      	b.n	80031d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e16b      	b.n	80034d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 815a 	bne.w	80034d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80b4 	beq.w	80034d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a5f      	ldr	r2, [pc, #380]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a5b      	ldr	r2, [pc, #364]	; (80034f4 <HAL_GPIO_Init+0x310>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_GPIO_Init+0x314>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <HAL_GPIO_Init+0x226>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_GPIO_Init+0x318>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d025      	beq.n	8003406 <HAL_GPIO_Init+0x222>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a50      	ldr	r2, [pc, #320]	; (8003500 <HAL_GPIO_Init+0x31c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <HAL_GPIO_Init+0x21e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4f      	ldr	r2, [pc, #316]	; (8003504 <HAL_GPIO_Init+0x320>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x21a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_GPIO_Init+0x324>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x216>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_GPIO_Init+0x328>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x212>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_GPIO_Init+0x32c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x20e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_GPIO_Init+0x330>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x20a>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e00e      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_Init+0x228>
 800340a:	2300      	movs	r3, #0
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341c:	4935      	ldr	r1, [pc, #212]	; (80034f4 <HAL_GPIO_Init+0x310>)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_GPIO_Init+0x334>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344e:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_GPIO_Init+0x334>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a2:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	f67f ae90 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021000 	.word	0x40021000
 800350c:	40021400 	.word	0x40021400
 8003510:	40021800 	.word	0x40021800
 8003514:	40021c00 	.word	0x40021c00
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e267      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e242      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff fc70 	bl	8002f1c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7ff fc6c 	bl	8002f1c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e207      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff fc5c 	bl	8002f1c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7ff fc58 	bl	8002f1c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1f3      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff fc11 	bl	8002f1c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff fc0d 	bl	8002f1c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7ff fbf0 	bl	8002f1c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff fbec 	bl	8002f1c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e187      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7ff fbd0 	bl	8002f1c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7ff fbcc 	bl	8002f1c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e167      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7ff fbb9 	bl	8002f1c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff fbb5 	bl	8002f1c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e150      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7d      	ldr	r3, [pc, #500]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a7c      	ldr	r2, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b77      	ldr	r3, [pc, #476]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b74      	ldr	r3, [pc, #464]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7ff fb75 	bl	8002f1c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7ff fb71 	bl	8002f1c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5e      	ldr	r2, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a5b      	ldr	r2, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7ff fb36 	bl	8002f1c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7ff fb32 	bl	8002f1c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0cb      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7ff fb20 	bl	8002f1c <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7ff fb1c 	bl	8002f1c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4a38      	ldr	r2, [pc, #224]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a1 	beq.w	8003a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d05c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d141      	bne.n	80039b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7ff faf0 	bl	8002f1c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7ff faec 	bl	8002f1c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	491b      	ldr	r1, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7ff fac5 	bl	8002f1c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003996:	f7ff fac1 	bl	8002f1c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x416>
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7ff faae 	bl	8002f1c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7ff faaa 	bl	8002f1c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e038      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7ff f9dc 	bl	8002f1c <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7ff f9d8 	bl	8002f1c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f93c 	bl	8002e94 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08008904 	.word	0x08008904
 8003c34:	20000008 	.word	0x20000008
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b094      	sub	sp, #80	; 0x50
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80e1 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e0db      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c74:	e0db      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7a:	e0d8      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1a51      	subs	r1, r2, r1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cea:	4651      	mov	r1, sl
 8003cec:	018a      	lsls	r2, r1, #6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	eb49 0303 	adc.w	r3, r9, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	024b      	lsls	r3, r1, #9
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d38:	4621      	mov	r1, r4
 8003d3a:	024a      	lsls	r2, r1, #9
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4c:	f7fc ff4c 	bl	8000be8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	e058      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	4611      	mov	r1, r2
 8003d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d86:	0150      	lsls	r0, r2, #5
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dac:	ebb2 040a 	subs.w	r4, r2, sl
 8003db0:	eb63 050b 	sbc.w	r5, r3, fp
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	2200      	movs	r2, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	f7fc fef2 	bl	8000be8 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3750      	adds	r7, #80	; 0x50
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe f81e 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0104 	and.w	r1, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0210 	and.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_SPI_Transmit+0x22>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e126      	b.n	80041ca <HAL_SPI_Transmit+0x270>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f84:	f7fe ffca 	bl	8002f1c <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9e:	e10b      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x52>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb0:	e102      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d14b      	bne.n	80040da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0xf6>
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13e      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004074:	e02b      	b.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a8:	e011      	b.n	80040ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fe ff37 	bl	8002f1c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x168>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x16e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040cc:	e074      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ce      	bne.n	8004076 <HAL_SPI_Transmit+0x11c>
 80040d8:	e04c      	b.n	8004174 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x18e>
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d140      	bne.n	800416a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800410e:	e02c      	b.n	800416a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d113      	bne.n	8004146 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	86da      	strh	r2, [r3, #54]	; 0x36
 8004144:	e011      	b.n	800416a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004146:	f7fe fee9 	bl	8002f1c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_Transmit+0x204>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d102      	bne.n	8004164 <HAL_SPI_Transmit+0x20a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004168:	e026      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1cd      	bne.n	8004110 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fb73 	bl	8004864 <SPI_EndRxTxTransaction>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e000      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08c      	sub	sp, #48	; 0x30
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041e0:	2301      	movs	r3, #1
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x26>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e18a      	b.n	800450e <HAL_SPI_TransmitReceive+0x33c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004200:	f7fe fe8c 	bl	8002f1c <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800420c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800421a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421e:	2b01      	cmp	r3, #1
 8004220:	d00f      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x70>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004228:	d107      	bne.n	800423a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_SPI_TransmitReceive+0x68>
 8004232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004236:	2b04      	cmp	r3, #4
 8004238:	d003      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800423a:	2302      	movs	r3, #2
 800423c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004240:	e15b      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x82>
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800425a:	e14e      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b04      	cmp	r3, #4
 8004266:	d003      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2205      	movs	r2, #5
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	887a      	ldrh	r2, [r7, #2]
 8004292:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d007      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d178      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x10a>
 80042d6:	8b7b      	ldrh	r3, [r7, #26]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d166      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004300:	e053      	b.n	80043aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d11b      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x176>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x176>
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d113      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d119      	bne.n	800438a <HAL_SPI_TransmitReceive+0x1b8>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d014      	beq.n	800438a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	b292      	uxth	r2, r2
 800436c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800438a:	f7fe fdc7 	bl	8002f1c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004396:	429a      	cmp	r2, r3
 8004398:	d807      	bhi.n	80043aa <HAL_SPI_TransmitReceive+0x1d8>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d003      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043a8:	e0a7      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1a6      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x130>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1a1      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x130>
 80043be:	e07c      	b.n	80044ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_TransmitReceive+0x1fc>
 80043c8:	8b7b      	ldrh	r3, [r7, #26]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d16b      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f4:	e057      	b.n	80044a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d11c      	bne.n	800443e <HAL_SPI_TransmitReceive+0x26c>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_SPI_TransmitReceive+0x26c>
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d114      	bne.n	800443e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	7812      	ldrb	r2, [r2, #0]
 8004420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d119      	bne.n	8004480 <HAL_SPI_TransmitReceive+0x2ae>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d014      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004480:	f7fe fd4c 	bl	8002f1c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800448c:	429a      	cmp	r2, r3
 800448e:	d803      	bhi.n	8004498 <HAL_SPI_TransmitReceive+0x2c6>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d102      	bne.n	800449e <HAL_SPI_TransmitReceive+0x2cc>
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044a4:	e029      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1a2      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x224>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d19d      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f9d0 	bl	8004864 <SPI_EndRxTxTransaction>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044d6:	e010      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	e000      	b.n	80044fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800450a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800450e:	4618      	mov	r0, r3
 8004510:	3730      	adds	r7, #48	; 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10f      	bne.n	800455c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
    return;
 800455a:	e0d7      	b.n	800470c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_SPI_IRQHandler+0x66>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	09db      	lsrs	r3, r3, #7
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    return;
 800457c:	e0c6      	b.n	800470c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_SPI_IRQHandler+0x8c>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80b4 	beq.w	800470c <HAL_SPI_IRQHandler+0x1f4>
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80ad 	beq.w	800470c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d023      	beq.n	8004606 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d011      	beq.n	80045ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f043 0204 	orr.w	r2, r3, #4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e00b      	b.n	8004606 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
        return;
 8004604:	e082      	b.n	800470c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f043 0208 	orr.w	r2, r3, #8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04f      	beq.n	800470a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004678:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_SPI_IRQHandler+0x17e>
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d034      	beq.n	8004700 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0203 	bic.w	r2, r2, #3
 80046a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_SPI_IRQHandler+0x1fc>)
 80046b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fd6f 	bl	800319e <HAL_DMA_Abort_IT>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046de:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <HAL_SPI_IRQHandler+0x1fc>)
 80046e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fd59 	bl	800319e <HAL_DMA_Abort_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80046fe:	e003      	b.n	8004708 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f809 	bl	8004718 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004706:	e000      	b.n	800470a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004708:	bf00      	nop
    return;
 800470a:	bf00      	nop
  }
}
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	0800472d 	.word	0x0800472d

08004718 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffe6 	bl	8004718 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004764:	f7fe fbda 	bl	8002f1c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	4413      	add	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004774:	f7fe fbd2 	bl	8002f1c <HAL_GetTick>
 8004778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800477a:	4b39      	ldr	r3, [pc, #228]	; (8004860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	015b      	lsls	r3, r3, #5
 8004780:	0d1b      	lsrs	r3, r3, #20
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478a:	e054      	b.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d050      	beq.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004794:	f7fe fbc2 	bl	8002f1c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d902      	bls.n	80047aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d13d      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d111      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d004      	beq.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d107      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d10f      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e017      	b.n	8004856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3b01      	subs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	429a      	cmp	r2, r3
 8004852:	d19b      	bne.n	800478c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000008 	.word	0x20000008

08004864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <SPI_EndRxTxTransaction+0x7c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <SPI_EndRxTxTransaction+0x80>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0d5b      	lsrs	r3, r3, #21
 800487c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488e:	d112      	bne.n	80048b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff ff5a 	bl	8004754 <SPI_WaitFlagStateUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e00f      	b.n	80048d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3b01      	subs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d0f2      	beq.n	80048b6 <SPI_EndRxTxTransaction+0x52>
 80048d0:	e000      	b.n	80048d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80048d2:	bf00      	nop
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000008 	.word	0x20000008
 80048e4:	165e9f81 	.word	0x165e9f81

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fb74 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fce6 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e046      	b.n	8004a2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_TIM_Base_Start+0xb4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d01d      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_TIM_Base_Start+0xb8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_TIM_Base_Start+0xbc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <HAL_TIM_Base_Start+0xc0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_TIM_Base_Start+0xc4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <HAL_TIM_Base_Start+0xc8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_TIM_Base_Start+0x70>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIM_Base_Start+0xcc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d111      	bne.n	8004a1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	d010      	beq.n	8004a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e007      	b.n	8004a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40001800 	.word	0x40001800

08004a58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e041      	b.n	8004aee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd fa74 	bl	8001f6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fc2e 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_IC_Start_IT+0x1e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x46>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_IC_Start_IT+0x2e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x46>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0x3e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x46>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_TIM_IC_Start_IT+0x58>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e013      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0x80>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d104      	bne.n	8004b60 <HAL_TIM_IC_Start_IT+0x68>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e00b      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0x80>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d104      	bne.n	8004b70 <HAL_TIM_IC_Start_IT+0x78>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b7a:	7bbb      	ldrb	r3, [r7, #14]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d102      	bne.n	8004b86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b80:	7b7b      	ldrb	r3, [r7, #13]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d001      	beq.n	8004b8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0cc      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	e013      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0xca>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0xb2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0xca>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_IC_Start_IT+0xc2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	e003      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0xca>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0xda>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	e013      	b.n	8004bfa <HAL_TIM_IC_Start_IT+0x102>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_IC_Start_IT+0xea>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be0:	e00b      	b.n	8004bfa <HAL_TIM_IC_Start_IT+0x102>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_IC_Start_IT+0xfa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	e003      	b.n	8004bfa <HAL_TIM_IC_Start_IT+0x102>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d841      	bhi.n	8004c84 <HAL_TIM_IC_Start_IT+0x18c>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <HAL_TIM_IC_Start_IT+0x110>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c85 	.word	0x08004c85
 8004c10:	08004c85 	.word	0x08004c85
 8004c14:	08004c85 	.word	0x08004c85
 8004c18:	08004c4f 	.word	0x08004c4f
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c85 	.word	0x08004c85
 8004c24:	08004c85 	.word	0x08004c85
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004c85 	.word	0x08004c85
 8004c38:	08004c73 	.word	0x08004c73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0202 	orr.w	r2, r2, #2
 8004c4a:	60da      	str	r2, [r3, #12]
      break;
 8004c4c:	e01d      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0204 	orr.w	r2, r2, #4
 8004c5c:	60da      	str	r2, [r3, #12]
      break;
 8004c5e:	e014      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	60da      	str	r2, [r3, #12]
      break;
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0210 	orr.w	r2, r2, #16
 8004c80:	60da      	str	r2, [r3, #12]
      break;
 8004c82:	e002      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d148      	bne.n	8004d22 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2201      	movs	r2, #1
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fd91 	bl	80057c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <HAL_TIM_IC_Start_IT+0x234>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d01d      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_TIM_IC_Start_IT+0x238>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <HAL_TIM_IC_Start_IT+0x23c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_TIM_IC_Start_IT+0x240>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_TIM_IC_Start_IT+0x244>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_TIM_IC_Start_IT+0x248>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_TIM_IC_Start_IT+0x1f6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <HAL_TIM_IC_Start_IT+0x24c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d010      	beq.n	8004d22 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	e007      	b.n	8004d22 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40010400 	.word	0x40010400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40001800 	.word	0x40001800

08004d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fca2 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa92 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa99 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0204 	mvn.w	r2, #4
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fc78 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa68 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa6f 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fc4e 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa3e 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa45 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2208      	movs	r2, #8
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fc24 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa14 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa1b 	bl	80052d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9ee 	bl	80052a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fd10 	bl	8005918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9e0 	bl	80052e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0220 	mvn.w	r2, #32
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fcda 	bl	8005904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e088      	b.n	8005088 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f000 fa50 	bl	8005438 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 020c 	bic.w	r2, r2, #12
 8004fa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]
 8004fba:	e060      	b.n	800507e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d11c      	bne.n	8004ffc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f000 fad4 	bl	800557e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fe4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6999      	ldr	r1, [r3, #24]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	619a      	str	r2, [r3, #24]
 8004ffa:	e040      	b.n	800507e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d11b      	bne.n	800503a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f000 fb21 	bl	8005658 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 020c 	bic.w	r2, r2, #12
 8005024:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	61da      	str	r2, [r3, #28]
 8005038:	e021      	b.n	800507e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d11c      	bne.n	800507a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f000 fb3e 	bl	80056d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005062:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69d9      	ldr	r1, [r3, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	61da      	str	r2, [r3, #28]
 8005078:	e001      	b.n	800507e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_ConfigClockSource+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0b4      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x186>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xd4>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	f000 8086 	beq.w	8005202 <HAL_TIM_ConfigClockSource+0x172>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xa6>
 8005100:	2b70      	cmp	r3, #112	; 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x11a>
 8005108:	2b60      	cmp	r3, #96	; 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b50      	cmp	r3, #80	; 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xfa>
 8005110:	2b50      	cmp	r3, #80	; 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x13a>
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fb1b 	bl	8005780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04f      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fb04 	bl	8005780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f9c2 	bl	8005520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fad1 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fa1e 	bl	80055f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	; 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fac1 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 f9a2 	bl	8005520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fab1 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 faa8 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051fa:	e003      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e000      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d831      	bhi.n	8005298 <HAL_TIM_ReadCapturedValue+0x78>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005271 	.word	0x08005271
 8005240:	08005299 	.word	0x08005299
 8005244:	08005299 	.word	0x08005299
 8005248:	08005299 	.word	0x08005299
 800524c:	0800527b 	.word	0x0800527b
 8005250:	08005299 	.word	0x08005299
 8005254:	08005299 	.word	0x08005299
 8005258:	08005299 	.word	0x08005299
 800525c:	08005285 	.word	0x08005285
 8005260:	08005299 	.word	0x08005299
 8005264:	08005299 	.word	0x08005299
 8005268:	08005299 	.word	0x08005299
 800526c:	0800528f 	.word	0x0800528f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	60fb      	str	r3, [r7, #12]

      break;
 8005278:	e00f      	b.n	800529a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	60fb      	str	r3, [r7, #12]

      break;
 8005282:	e00a      	b.n	800529a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	60fb      	str	r3, [r7, #12]

      break;
 800528c:	e005      	b.n	800529a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	60fb      	str	r3, [r7, #12]

      break;
 8005296:	e000      	b.n	800529a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005298:	bf00      	nop
  }

  return tmpreg;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a40      	ldr	r2, [pc, #256]	; (800540c <TIM_Base_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d00f      	beq.n	8005338 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3d      	ldr	r2, [pc, #244]	; (8005410 <TIM_Base_SetConfig+0x118>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00b      	beq.n	8005338 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <TIM_Base_SetConfig+0x11c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <TIM_Base_SetConfig+0x120>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a3a      	ldr	r2, [pc, #232]	; (800541c <TIM_Base_SetConfig+0x124>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2f      	ldr	r2, [pc, #188]	; (800540c <TIM_Base_SetConfig+0x114>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02b      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d027      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <TIM_Base_SetConfig+0x118>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d023      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2b      	ldr	r2, [pc, #172]	; (8005414 <TIM_Base_SetConfig+0x11c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01f      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2a      	ldr	r2, [pc, #168]	; (8005418 <TIM_Base_SetConfig+0x120>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01b      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a29      	ldr	r2, [pc, #164]	; (800541c <TIM_Base_SetConfig+0x124>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d017      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a28      	ldr	r2, [pc, #160]	; (8005420 <TIM_Base_SetConfig+0x128>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a27      	ldr	r2, [pc, #156]	; (8005424 <TIM_Base_SetConfig+0x12c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00f      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <TIM_Base_SetConfig+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a25      	ldr	r2, [pc, #148]	; (800542c <TIM_Base_SetConfig+0x134>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a24      	ldr	r2, [pc, #144]	; (8005430 <TIM_Base_SetConfig+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a23      	ldr	r2, [pc, #140]	; (8005434 <TIM_Base_SetConfig+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0a      	ldr	r2, [pc, #40]	; (800540c <TIM_Base_SetConfig+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0xf8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0c      	ldr	r2, [pc, #48]	; (800541c <TIM_Base_SetConfig+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d103      	bne.n	80053f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	615a      	str	r2, [r3, #20]
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800
 800542c:	40001800 	.word	0x40001800
 8005430:	40001c00 	.word	0x40001c00
 8005434:	40002000 	.word	0x40002000

08005438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <TIM_TI1_SetConfig+0xcc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01b      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d017      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <TIM_TI1_SetConfig+0xd0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a24      	ldr	r2, [pc, #144]	; (800550c <TIM_TI1_SetConfig+0xd4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a23      	ldr	r2, [pc, #140]	; (8005510 <TIM_TI1_SetConfig+0xd8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <TIM_TI1_SetConfig+0xdc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a21      	ldr	r2, [pc, #132]	; (8005518 <TIM_TI1_SetConfig+0xe0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_TI1_SetConfig+0x66>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a20      	ldr	r2, [pc, #128]	; (800551c <TIM_TI1_SetConfig+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <TIM_TI1_SetConfig+0x6a>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <TIM_TI1_SetConfig+0x6c>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e003      	b.n	80054c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f023 030a 	bic.w	r3, r3, #10
 80054dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f003 030a 	and.w	r3, r3, #10
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40010400 	.word	0x40010400
 8005518:	40014000 	.word	0x40014000
 800551c:	40001800 	.word	0x40001800

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0210 	bic.w	r2, r3, #16
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	031b      	lsls	r3, r3, #12
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f023 0210 	bic.w	r2, r3, #16
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	031b      	lsls	r3, r3, #12
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	621a      	str	r2, [r3, #32]
}
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	b2db      	uxtb	r3, r3
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800570e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	031b      	lsls	r3, r3, #12
 8005714:	b29b      	uxth	r3, r3
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005722:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	031b      	lsls	r3, r3, #12
 8005728:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	f043 0307 	orr.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	609a      	str	r2, [r3, #8]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2201      	movs	r2, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005820:	2302      	movs	r3, #2
 8005822:	e05a      	b.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a21      	ldr	r2, [pc, #132]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005870:	d01d      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1a      	ldr	r2, [pc, #104]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a17      	ldr	r2, [pc, #92]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10c      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40001800 	.word	0x40001800

08005904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	; (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000014 	.word	0x20000014

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	; (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	; (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	; (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x44>)
 800594c:	f002 ff04 	bl	8008758 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	08008cf4 	.word	0x08008cf4
 8005974:	08008cf4 	.word	0x08008cf4
 8005978:	08008cf4 	.word	0x08008cf4
 800597c:	08008cf8 	.word	0x08008cf8

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <__cvt>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	ec55 4b10 	vmov	r4, r5, d0
 8005998:	2d00      	cmp	r5, #0
 800599a:	460e      	mov	r6, r1
 800599c:	4619      	mov	r1, r3
 800599e:	462b      	mov	r3, r5
 80059a0:	bfbb      	ittet	lt
 80059a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059a6:	461d      	movlt	r5, r3
 80059a8:	2300      	movge	r3, #0
 80059aa:	232d      	movlt	r3, #45	; 0x2d
 80059ac:	700b      	strb	r3, [r1, #0]
 80059ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059b4:	4691      	mov	r9, r2
 80059b6:	f023 0820 	bic.w	r8, r3, #32
 80059ba:	bfbc      	itt	lt
 80059bc:	4622      	movlt	r2, r4
 80059be:	4614      	movlt	r4, r2
 80059c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059c4:	d005      	beq.n	80059d2 <__cvt+0x42>
 80059c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059ca:	d100      	bne.n	80059ce <__cvt+0x3e>
 80059cc:	3601      	adds	r6, #1
 80059ce:	2102      	movs	r1, #2
 80059d0:	e000      	b.n	80059d4 <__cvt+0x44>
 80059d2:	2103      	movs	r1, #3
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	ab02      	add	r3, sp, #8
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	ec45 4b10 	vmov	d0, r4, r5
 80059e0:	4653      	mov	r3, sl
 80059e2:	4632      	mov	r2, r6
 80059e4:	f000 fcec 	bl	80063c0 <_dtoa_r>
 80059e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059ec:	4607      	mov	r7, r0
 80059ee:	d102      	bne.n	80059f6 <__cvt+0x66>
 80059f0:	f019 0f01 	tst.w	r9, #1
 80059f4:	d022      	beq.n	8005a3c <__cvt+0xac>
 80059f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059fa:	eb07 0906 	add.w	r9, r7, r6
 80059fe:	d110      	bne.n	8005a22 <__cvt+0x92>
 8005a00:	783b      	ldrb	r3, [r7, #0]
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d10a      	bne.n	8005a1c <__cvt+0x8c>
 8005a06:	2200      	movs	r2, #0
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7fb f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a12:	b918      	cbnz	r0, 8005a1c <__cvt+0x8c>
 8005a14:	f1c6 0601 	rsb	r6, r6, #1
 8005a18:	f8ca 6000 	str.w	r6, [sl]
 8005a1c:	f8da 3000 	ldr.w	r3, [sl]
 8005a20:	4499      	add	r9, r3
 8005a22:	2200      	movs	r2, #0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fb f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a2e:	b108      	cbz	r0, 8005a34 <__cvt+0xa4>
 8005a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a34:	2230      	movs	r2, #48	; 0x30
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	454b      	cmp	r3, r9
 8005a3a:	d307      	bcc.n	8005a4c <__cvt+0xbc>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a40:	1bdb      	subs	r3, r3, r7
 8005a42:	4638      	mov	r0, r7
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	b004      	add	sp, #16
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	1c59      	adds	r1, r3, #1
 8005a4e:	9103      	str	r1, [sp, #12]
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e7f0      	b.n	8005a36 <__cvt+0xa6>

08005a54 <__exponent>:
 8005a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a56:	4603      	mov	r3, r0
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	bfb8      	it	lt
 8005a5c:	4249      	neglt	r1, r1
 8005a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a62:	bfb4      	ite	lt
 8005a64:	222d      	movlt	r2, #45	; 0x2d
 8005a66:	222b      	movge	r2, #43	; 0x2b
 8005a68:	2909      	cmp	r1, #9
 8005a6a:	7042      	strb	r2, [r0, #1]
 8005a6c:	dd2a      	ble.n	8005ac4 <__exponent+0x70>
 8005a6e:	f10d 0407 	add.w	r4, sp, #7
 8005a72:	46a4      	mov	ip, r4
 8005a74:	270a      	movs	r7, #10
 8005a76:	46a6      	mov	lr, r4
 8005a78:	460a      	mov	r2, r1
 8005a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8005a82:	3530      	adds	r5, #48	; 0x30
 8005a84:	2a63      	cmp	r2, #99	; 0x63
 8005a86:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a8e:	4631      	mov	r1, r6
 8005a90:	dcf1      	bgt.n	8005a76 <__exponent+0x22>
 8005a92:	3130      	adds	r1, #48	; 0x30
 8005a94:	f1ae 0502 	sub.w	r5, lr, #2
 8005a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a9c:	1c44      	adds	r4, r0, #1
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4561      	cmp	r1, ip
 8005aa2:	d30a      	bcc.n	8005aba <__exponent+0x66>
 8005aa4:	f10d 0209 	add.w	r2, sp, #9
 8005aa8:	eba2 020e 	sub.w	r2, r2, lr
 8005aac:	4565      	cmp	r5, ip
 8005aae:	bf88      	it	hi
 8005ab0:	2200      	movhi	r2, #0
 8005ab2:	4413      	add	r3, r2
 8005ab4:	1a18      	subs	r0, r3, r0
 8005ab6:	b003      	add	sp, #12
 8005ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ac2:	e7ed      	b.n	8005aa0 <__exponent+0x4c>
 8005ac4:	2330      	movs	r3, #48	; 0x30
 8005ac6:	3130      	adds	r1, #48	; 0x30
 8005ac8:	7083      	strb	r3, [r0, #2]
 8005aca:	70c1      	strb	r1, [r0, #3]
 8005acc:	1d03      	adds	r3, r0, #4
 8005ace:	e7f1      	b.n	8005ab4 <__exponent+0x60>

08005ad0 <_printf_float>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	ed2d 8b02 	vpush	{d8}
 8005ad8:	b08d      	sub	sp, #52	; 0x34
 8005ada:	460c      	mov	r4, r1
 8005adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	461f      	mov	r7, r3
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	f001 fa59 	bl	8006f9c <_localeconv_r>
 8005aea:	f8d0 a000 	ldr.w	sl, [r0]
 8005aee:	4650      	mov	r0, sl
 8005af0:	f7fa fb6e 	bl	80001d0 <strlen>
 8005af4:	2300      	movs	r3, #0
 8005af6:	930a      	str	r3, [sp, #40]	; 0x28
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	f8d8 3000 	ldr.w	r3, [r8]
 8005b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b04:	3307      	adds	r3, #7
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	f103 0208 	add.w	r2, r3, #8
 8005b0e:	f8c8 2000 	str.w	r2, [r8]
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b28:	ee08 0a10 	vmov	s16, r0
 8005b2c:	4b9f      	ldr	r3, [pc, #636]	; (8005dac <_printf_float+0x2dc>)
 8005b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	f7fa fff9 	bl	8000b2c <__aeabi_dcmpun>
 8005b3a:	bb88      	cbnz	r0, 8005ba0 <_printf_float+0xd0>
 8005b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b40:	4b9a      	ldr	r3, [pc, #616]	; (8005dac <_printf_float+0x2dc>)
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295
 8005b46:	f7fa ffd3 	bl	8000af0 <__aeabi_dcmple>
 8005b4a:	bb48      	cbnz	r0, 8005ba0 <_printf_float+0xd0>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fa ffc2 	bl	8000adc <__aeabi_dcmplt>
 8005b58:	b110      	cbz	r0, 8005b60 <_printf_float+0x90>
 8005b5a:	232d      	movs	r3, #45	; 0x2d
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	4b93      	ldr	r3, [pc, #588]	; (8005db0 <_printf_float+0x2e0>)
 8005b62:	4894      	ldr	r0, [pc, #592]	; (8005db4 <_printf_float+0x2e4>)
 8005b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b68:	bf94      	ite	ls
 8005b6a:	4698      	movls	r8, r3
 8005b6c:	4680      	movhi	r8, r0
 8005b6e:	2303      	movs	r3, #3
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	f023 0204 	bic.w	r2, r3, #4
 8005b78:	6022      	str	r2, [r4, #0]
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	9700      	str	r7, [sp, #0]
 8005b80:	4633      	mov	r3, r6
 8005b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 f9d8 	bl	8005f3c <_printf_common>
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f040 8090 	bne.w	8005cb2 <_printf_float+0x1e2>
 8005b92:	f04f 30ff 	mov.w	r0, #4294967295
 8005b96:	b00d      	add	sp, #52	; 0x34
 8005b98:	ecbd 8b02 	vpop	{d8}
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fa ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8005bac:	b140      	cbz	r0, 8005bc0 <_printf_float+0xf0>
 8005bae:	464b      	mov	r3, r9
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bfbc      	itt	lt
 8005bb4:	232d      	movlt	r3, #45	; 0x2d
 8005bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bba:	487f      	ldr	r0, [pc, #508]	; (8005db8 <_printf_float+0x2e8>)
 8005bbc:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <_printf_float+0x2ec>)
 8005bbe:	e7d1      	b.n	8005b64 <_printf_float+0x94>
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bc6:	9206      	str	r2, [sp, #24]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	d13f      	bne.n	8005c4c <_printf_float+0x17c>
 8005bcc:	2306      	movs	r3, #6
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	6861      	ldr	r1, [r4, #4]
 8005bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8005bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005be2:	ab09      	add	r3, sp, #36	; 0x24
 8005be4:	ec49 8b10 	vmov	d0, r8, r9
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fecd 	bl	8005990 <__cvt>
 8005bf6:	9b06      	ldr	r3, [sp, #24]
 8005bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bfa:	2b47      	cmp	r3, #71	; 0x47
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	d108      	bne.n	8005c12 <_printf_float+0x142>
 8005c00:	1cc8      	adds	r0, r1, #3
 8005c02:	db02      	blt.n	8005c0a <_printf_float+0x13a>
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	4299      	cmp	r1, r3
 8005c08:	dd41      	ble.n	8005c8e <_printf_float+0x1be>
 8005c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c16:	d820      	bhi.n	8005c5a <_printf_float+0x18a>
 8005c18:	3901      	subs	r1, #1
 8005c1a:	465a      	mov	r2, fp
 8005c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c20:	9109      	str	r1, [sp, #36]	; 0x24
 8005c22:	f7ff ff17 	bl	8005a54 <__exponent>
 8005c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c28:	1813      	adds	r3, r2, r0
 8005c2a:	2a01      	cmp	r2, #1
 8005c2c:	4681      	mov	r9, r0
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	dc02      	bgt.n	8005c38 <_printf_float+0x168>
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	07d2      	lsls	r2, r2, #31
 8005c36:	d501      	bpl.n	8005c3c <_printf_float+0x16c>
 8005c38:	3301      	adds	r3, #1
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d09c      	beq.n	8005b7e <_printf_float+0xae>
 8005c44:	232d      	movs	r3, #45	; 0x2d
 8005c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4a:	e798      	b.n	8005b7e <_printf_float+0xae>
 8005c4c:	9a06      	ldr	r2, [sp, #24]
 8005c4e:	2a47      	cmp	r2, #71	; 0x47
 8005c50:	d1be      	bne.n	8005bd0 <_printf_float+0x100>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1bc      	bne.n	8005bd0 <_printf_float+0x100>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7b9      	b.n	8005bce <_printf_float+0xfe>
 8005c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c5e:	d118      	bne.n	8005c92 <_printf_float+0x1c2>
 8005c60:	2900      	cmp	r1, #0
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	dd0b      	ble.n	8005c7e <_printf_float+0x1ae>
 8005c66:	6121      	str	r1, [r4, #16]
 8005c68:	b913      	cbnz	r3, 8005c70 <_printf_float+0x1a0>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	07d0      	lsls	r0, r2, #31
 8005c6e:	d502      	bpl.n	8005c76 <_printf_float+0x1a6>
 8005c70:	3301      	adds	r3, #1
 8005c72:	440b      	add	r3, r1
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c78:	f04f 0900 	mov.w	r9, #0
 8005c7c:	e7de      	b.n	8005c3c <_printf_float+0x16c>
 8005c7e:	b913      	cbnz	r3, 8005c86 <_printf_float+0x1b6>
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	07d2      	lsls	r2, r2, #31
 8005c84:	d501      	bpl.n	8005c8a <_printf_float+0x1ba>
 8005c86:	3302      	adds	r3, #2
 8005c88:	e7f4      	b.n	8005c74 <_printf_float+0x1a4>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e7f2      	b.n	8005c74 <_printf_float+0x1a4>
 8005c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c94:	4299      	cmp	r1, r3
 8005c96:	db05      	blt.n	8005ca4 <_printf_float+0x1d4>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	6121      	str	r1, [r4, #16]
 8005c9c:	07d8      	lsls	r0, r3, #31
 8005c9e:	d5ea      	bpl.n	8005c76 <_printf_float+0x1a6>
 8005ca0:	1c4b      	adds	r3, r1, #1
 8005ca2:	e7e7      	b.n	8005c74 <_printf_float+0x1a4>
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	bfd4      	ite	le
 8005ca8:	f1c1 0202 	rsble	r2, r1, #2
 8005cac:	2201      	movgt	r2, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	e7e0      	b.n	8005c74 <_printf_float+0x1a4>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	055a      	lsls	r2, r3, #21
 8005cb6:	d407      	bmi.n	8005cc8 <_printf_float+0x1f8>
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	4642      	mov	r2, r8
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d12c      	bne.n	8005d20 <_printf_float+0x250>
 8005cc6:	e764      	b.n	8005b92 <_printf_float+0xc2>
 8005cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ccc:	f240 80e0 	bls.w	8005e90 <_printf_float+0x3c0>
 8005cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f7fa fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d034      	beq.n	8005d4a <_printf_float+0x27a>
 8005ce0:	4a37      	ldr	r2, [pc, #220]	; (8005dc0 <_printf_float+0x2f0>)
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f af51 	beq.w	8005b92 <_printf_float+0xc2>
 8005cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	db02      	blt.n	8005cfe <_printf_float+0x22e>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	07d8      	lsls	r0, r3, #31
 8005cfc:	d510      	bpl.n	8005d20 <_printf_float+0x250>
 8005cfe:	ee18 3a10 	vmov	r3, s16
 8005d02:	4652      	mov	r2, sl
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af41 	beq.w	8005b92 <_printf_float+0xc2>
 8005d10:	f04f 0800 	mov.w	r8, #0
 8005d14:	f104 091a 	add.w	r9, r4, #26
 8005d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	dc09      	bgt.n	8005d34 <_printf_float+0x264>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	f100 8105 	bmi.w	8005f32 <_printf_float+0x462>
 8005d28:	68e0      	ldr	r0, [r4, #12]
 8005d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2c:	4298      	cmp	r0, r3
 8005d2e:	bfb8      	it	lt
 8005d30:	4618      	movlt	r0, r3
 8005d32:	e730      	b.n	8005b96 <_printf_float+0xc6>
 8005d34:	2301      	movs	r3, #1
 8005d36:	464a      	mov	r2, r9
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af27 	beq.w	8005b92 <_printf_float+0xc2>
 8005d44:	f108 0801 	add.w	r8, r8, #1
 8005d48:	e7e6      	b.n	8005d18 <_printf_float+0x248>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dc39      	bgt.n	8005dc4 <_printf_float+0x2f4>
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <_printf_float+0x2f0>)
 8005d52:	2301      	movs	r3, #1
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af19 	beq.w	8005b92 <_printf_float+0xc2>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	4313      	orrs	r3, r2
 8005d66:	d102      	bne.n	8005d6e <_printf_float+0x29e>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d5d8      	bpl.n	8005d20 <_printf_float+0x250>
 8005d6e:	ee18 3a10 	vmov	r3, s16
 8005d72:	4652      	mov	r2, sl
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af09 	beq.w	8005b92 <_printf_float+0xc2>
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	f104 0a1a 	add.w	sl, r4, #26
 8005d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8a:	425b      	negs	r3, r3
 8005d8c:	454b      	cmp	r3, r9
 8005d8e:	dc01      	bgt.n	8005d94 <_printf_float+0x2c4>
 8005d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d92:	e792      	b.n	8005cba <_printf_float+0x1ea>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f aef7 	beq.w	8005b92 <_printf_float+0xc2>
 8005da4:	f109 0901 	add.w	r9, r9, #1
 8005da8:	e7ee      	b.n	8005d88 <_printf_float+0x2b8>
 8005daa:	bf00      	nop
 8005dac:	7fefffff 	.word	0x7fefffff
 8005db0:	08008918 	.word	0x08008918
 8005db4:	0800891c 	.word	0x0800891c
 8005db8:	08008924 	.word	0x08008924
 8005dbc:	08008920 	.word	0x08008920
 8005dc0:	08008928 	.word	0x08008928
 8005dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bfa8      	it	ge
 8005dcc:	461a      	movge	r2, r3
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	dc37      	bgt.n	8005e44 <_printf_float+0x374>
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ddc:	f104 021a 	add.w	r2, r4, #26
 8005de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	eba3 0309 	sub.w	r3, r3, r9
 8005de8:	455b      	cmp	r3, fp
 8005dea:	dc33      	bgt.n	8005e54 <_printf_float+0x384>
 8005dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db3b      	blt.n	8005e6c <_printf_float+0x39c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d438      	bmi.n	8005e6c <_printf_float+0x39c>
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e00:	1a9a      	subs	r2, r3, r2
 8005e02:	eba3 0901 	sub.w	r9, r3, r1
 8005e06:	4591      	cmp	r9, r2
 8005e08:	bfa8      	it	ge
 8005e0a:	4691      	movge	r9, r2
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	dc35      	bgt.n	8005e7e <_printf_float+0x3ae>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1a:	f104 0a1a 	add.w	sl, r4, #26
 8005e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	eba3 0309 	sub.w	r3, r3, r9
 8005e28:	4543      	cmp	r3, r8
 8005e2a:	f77f af79 	ble.w	8005d20 <_printf_float+0x250>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4652      	mov	r2, sl
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f aeaa 	beq.w	8005b92 <_printf_float+0xc2>
 8005e3e:	f108 0801 	add.w	r8, r8, #1
 8005e42:	e7ec      	b.n	8005e1e <_printf_float+0x34e>
 8005e44:	4613      	mov	r3, r2
 8005e46:	4631      	mov	r1, r6
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1c0      	bne.n	8005dd4 <_printf_float+0x304>
 8005e52:	e69e      	b.n	8005b92 <_printf_float+0xc2>
 8005e54:	2301      	movs	r3, #1
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	9205      	str	r2, [sp, #20]
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f ae97 	beq.w	8005b92 <_printf_float+0xc2>
 8005e64:	9a05      	ldr	r2, [sp, #20]
 8005e66:	f10b 0b01 	add.w	fp, fp, #1
 8005e6a:	e7b9      	b.n	8005de0 <_printf_float+0x310>
 8005e6c:	ee18 3a10 	vmov	r3, s16
 8005e70:	4652      	mov	r2, sl
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d1be      	bne.n	8005dfa <_printf_float+0x32a>
 8005e7c:	e689      	b.n	8005b92 <_printf_float+0xc2>
 8005e7e:	9a05      	ldr	r2, [sp, #20]
 8005e80:	464b      	mov	r3, r9
 8005e82:	4442      	add	r2, r8
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d1c1      	bne.n	8005e12 <_printf_float+0x342>
 8005e8e:	e680      	b.n	8005b92 <_printf_float+0xc2>
 8005e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	dc01      	bgt.n	8005e9a <_printf_float+0x3ca>
 8005e96:	07db      	lsls	r3, r3, #31
 8005e98:	d538      	bpl.n	8005f0c <_printf_float+0x43c>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f ae74 	beq.w	8005b92 <_printf_float+0xc2>
 8005eaa:	ee18 3a10 	vmov	r3, s16
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f ae6b 	beq.w	8005b92 <_printf_float+0xc2>
 8005ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f7fa fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec8:	b9d8      	cbnz	r0, 8005f02 <_printf_float+0x432>
 8005eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ecc:	f108 0201 	add.w	r2, r8, #1
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d10e      	bne.n	8005efa <_printf_float+0x42a>
 8005edc:	e659      	b.n	8005b92 <_printf_float+0xc2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae52 	beq.w	8005b92 <_printf_float+0xc2>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4543      	cmp	r3, r8
 8005ef8:	dcf1      	bgt.n	8005ede <_printf_float+0x40e>
 8005efa:	464b      	mov	r3, r9
 8005efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f00:	e6dc      	b.n	8005cbc <_printf_float+0x1ec>
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	f104 0a1a 	add.w	sl, r4, #26
 8005f0a:	e7f2      	b.n	8005ef2 <_printf_float+0x422>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4642      	mov	r2, r8
 8005f10:	e7df      	b.n	8005ed2 <_printf_float+0x402>
 8005f12:	2301      	movs	r3, #1
 8005f14:	464a      	mov	r2, r9
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae38 	beq.w	8005b92 <_printf_float+0xc2>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f2a:	1a5b      	subs	r3, r3, r1
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	dcf0      	bgt.n	8005f12 <_printf_float+0x442>
 8005f30:	e6fa      	b.n	8005d28 <_printf_float+0x258>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 0919 	add.w	r9, r4, #25
 8005f3a:	e7f4      	b.n	8005f26 <_printf_float+0x456>

08005f3c <_printf_common>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	4616      	mov	r6, r2
 8005f42:	4699      	mov	r9, r3
 8005f44:	688a      	ldr	r2, [r1, #8]
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bfb8      	it	lt
 8005f50:	4613      	movlt	r3, r2
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f58:	4607      	mov	r7, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b10a      	cbz	r2, 8005f62 <_printf_common+0x26>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	6833      	ldrmi	r3, [r6, #0]
 8005f6a:	3302      	addmi	r3, #2
 8005f6c:	6033      	strmi	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d106      	bne.n	8005f84 <_printf_common+0x48>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	6832      	ldr	r2, [r6, #0]
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc26      	bgt.n	8005fd2 <_printf_common+0x96>
 8005f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f88:	1e13      	subs	r3, r2, #0
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	0692      	lsls	r2, r2, #26
 8005f92:	d42b      	bmi.n	8005fec <_printf_common+0xb0>
 8005f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	47c0      	blx	r8
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d01e      	beq.n	8005fe0 <_printf_common+0xa4>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	68e5      	ldr	r5, [r4, #12]
 8005fa6:	6832      	ldr	r2, [r6, #0]
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	bf08      	it	eq
 8005fb0:	1aad      	subeq	r5, r5, r2
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fbc:	2500      	movne	r5, #0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bfc4      	itt	gt
 8005fc2:	1a9b      	subgt	r3, r3, r2
 8005fc4:	18ed      	addgt	r5, r5, r3
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	341a      	adds	r4, #26
 8005fca:	42b5      	cmp	r5, r6
 8005fcc:	d11a      	bne.n	8006004 <_printf_common+0xc8>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e008      	b.n	8005fe4 <_printf_common+0xa8>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4638      	mov	r0, r7
 8005fda:	47c0      	blx	r8
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d103      	bne.n	8005fe8 <_printf_common+0xac>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	3501      	adds	r5, #1
 8005fea:	e7c6      	b.n	8005f7a <_printf_common+0x3e>
 8005fec:	18e1      	adds	r1, r4, r3
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	2030      	movs	r0, #48	; 0x30
 8005ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff6:	4422      	add	r2, r4
 8005ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006000:	3302      	adds	r3, #2
 8006002:	e7c7      	b.n	8005f94 <_printf_common+0x58>
 8006004:	2301      	movs	r3, #1
 8006006:	4622      	mov	r2, r4
 8006008:	4649      	mov	r1, r9
 800600a:	4638      	mov	r0, r7
 800600c:	47c0      	blx	r8
 800600e:	3001      	adds	r0, #1
 8006010:	d0e6      	beq.n	8005fe0 <_printf_common+0xa4>
 8006012:	3601      	adds	r6, #1
 8006014:	e7d9      	b.n	8005fca <_printf_common+0x8e>
	...

08006018 <_printf_i>:
 8006018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	7e0f      	ldrb	r7, [r1, #24]
 800601e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006020:	2f78      	cmp	r7, #120	; 0x78
 8006022:	4691      	mov	r9, r2
 8006024:	4680      	mov	r8, r0
 8006026:	460c      	mov	r4, r1
 8006028:	469a      	mov	sl, r3
 800602a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800602e:	d807      	bhi.n	8006040 <_printf_i+0x28>
 8006030:	2f62      	cmp	r7, #98	; 0x62
 8006032:	d80a      	bhi.n	800604a <_printf_i+0x32>
 8006034:	2f00      	cmp	r7, #0
 8006036:	f000 80d8 	beq.w	80061ea <_printf_i+0x1d2>
 800603a:	2f58      	cmp	r7, #88	; 0x58
 800603c:	f000 80a3 	beq.w	8006186 <_printf_i+0x16e>
 8006040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006048:	e03a      	b.n	80060c0 <_printf_i+0xa8>
 800604a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800604e:	2b15      	cmp	r3, #21
 8006050:	d8f6      	bhi.n	8006040 <_printf_i+0x28>
 8006052:	a101      	add	r1, pc, #4	; (adr r1, 8006058 <_printf_i+0x40>)
 8006054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060c5 	.word	0x080060c5
 8006060:	08006041 	.word	0x08006041
 8006064:	08006041 	.word	0x08006041
 8006068:	08006041 	.word	0x08006041
 800606c:	08006041 	.word	0x08006041
 8006070:	080060c5 	.word	0x080060c5
 8006074:	08006041 	.word	0x08006041
 8006078:	08006041 	.word	0x08006041
 800607c:	08006041 	.word	0x08006041
 8006080:	08006041 	.word	0x08006041
 8006084:	080061d1 	.word	0x080061d1
 8006088:	080060f5 	.word	0x080060f5
 800608c:	080061b3 	.word	0x080061b3
 8006090:	08006041 	.word	0x08006041
 8006094:	08006041 	.word	0x08006041
 8006098:	080061f3 	.word	0x080061f3
 800609c:	08006041 	.word	0x08006041
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006041 	.word	0x08006041
 80060a8:	08006041 	.word	0x08006041
 80060ac:	080061bb 	.word	0x080061bb
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	602a      	str	r2, [r5, #0]
 80060b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0a3      	b.n	800620c <_printf_i+0x1f4>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	0606      	lsls	r6, r0, #24
 80060ca:	f101 0304 	add.w	r3, r1, #4
 80060ce:	d50a      	bpl.n	80060e6 <_printf_i+0xce>
 80060d0:	680e      	ldr	r6, [r1, #0]
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	da03      	bge.n	80060e0 <_printf_i+0xc8>
 80060d8:	232d      	movs	r3, #45	; 0x2d
 80060da:	4276      	negs	r6, r6
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	485e      	ldr	r0, [pc, #376]	; (800625c <_printf_i+0x244>)
 80060e2:	230a      	movs	r3, #10
 80060e4:	e019      	b.n	800611a <_printf_i+0x102>
 80060e6:	680e      	ldr	r6, [r1, #0]
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ee:	bf18      	it	ne
 80060f0:	b236      	sxthne	r6, r6
 80060f2:	e7ef      	b.n	80060d4 <_printf_i+0xbc>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6820      	ldr	r0, [r4, #0]
 80060f8:	1d19      	adds	r1, r3, #4
 80060fa:	6029      	str	r1, [r5, #0]
 80060fc:	0601      	lsls	r1, r0, #24
 80060fe:	d501      	bpl.n	8006104 <_printf_i+0xec>
 8006100:	681e      	ldr	r6, [r3, #0]
 8006102:	e002      	b.n	800610a <_printf_i+0xf2>
 8006104:	0646      	lsls	r6, r0, #25
 8006106:	d5fb      	bpl.n	8006100 <_printf_i+0xe8>
 8006108:	881e      	ldrh	r6, [r3, #0]
 800610a:	4854      	ldr	r0, [pc, #336]	; (800625c <_printf_i+0x244>)
 800610c:	2f6f      	cmp	r7, #111	; 0x6f
 800610e:	bf0c      	ite	eq
 8006110:	2308      	moveq	r3, #8
 8006112:	230a      	movne	r3, #10
 8006114:	2100      	movs	r1, #0
 8006116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800611a:	6865      	ldr	r5, [r4, #4]
 800611c:	60a5      	str	r5, [r4, #8]
 800611e:	2d00      	cmp	r5, #0
 8006120:	bfa2      	ittt	ge
 8006122:	6821      	ldrge	r1, [r4, #0]
 8006124:	f021 0104 	bicge.w	r1, r1, #4
 8006128:	6021      	strge	r1, [r4, #0]
 800612a:	b90e      	cbnz	r6, 8006130 <_printf_i+0x118>
 800612c:	2d00      	cmp	r5, #0
 800612e:	d04d      	beq.n	80061cc <_printf_i+0x1b4>
 8006130:	4615      	mov	r5, r2
 8006132:	fbb6 f1f3 	udiv	r1, r6, r3
 8006136:	fb03 6711 	mls	r7, r3, r1, r6
 800613a:	5dc7      	ldrb	r7, [r0, r7]
 800613c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006140:	4637      	mov	r7, r6
 8006142:	42bb      	cmp	r3, r7
 8006144:	460e      	mov	r6, r1
 8006146:	d9f4      	bls.n	8006132 <_printf_i+0x11a>
 8006148:	2b08      	cmp	r3, #8
 800614a:	d10b      	bne.n	8006164 <_printf_i+0x14c>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07de      	lsls	r6, r3, #31
 8006150:	d508      	bpl.n	8006164 <_printf_i+0x14c>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	bfde      	ittt	le
 800615a:	2330      	movle	r3, #48	; 0x30
 800615c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006164:	1b52      	subs	r2, r2, r5
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	f8cd a000 	str.w	sl, [sp]
 800616c:	464b      	mov	r3, r9
 800616e:	aa03      	add	r2, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fee2 	bl	8005f3c <_printf_common>
 8006178:	3001      	adds	r0, #1
 800617a:	d14c      	bne.n	8006216 <_printf_i+0x1fe>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	4835      	ldr	r0, [pc, #212]	; (800625c <_printf_i+0x244>)
 8006188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800618c:	6829      	ldr	r1, [r5, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f851 6b04 	ldr.w	r6, [r1], #4
 8006194:	6029      	str	r1, [r5, #0]
 8006196:	061d      	lsls	r5, r3, #24
 8006198:	d514      	bpl.n	80061c4 <_printf_i+0x1ac>
 800619a:	07df      	lsls	r7, r3, #31
 800619c:	bf44      	itt	mi
 800619e:	f043 0320 	orrmi.w	r3, r3, #32
 80061a2:	6023      	strmi	r3, [r4, #0]
 80061a4:	b91e      	cbnz	r6, 80061ae <_printf_i+0x196>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	f023 0320 	bic.w	r3, r3, #32
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	2310      	movs	r3, #16
 80061b0:	e7b0      	b.n	8006114 <_printf_i+0xfc>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	4828      	ldr	r0, [pc, #160]	; (8006260 <_printf_i+0x248>)
 80061be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c2:	e7e3      	b.n	800618c <_printf_i+0x174>
 80061c4:	0659      	lsls	r1, r3, #25
 80061c6:	bf48      	it	mi
 80061c8:	b2b6      	uxthmi	r6, r6
 80061ca:	e7e6      	b.n	800619a <_printf_i+0x182>
 80061cc:	4615      	mov	r5, r2
 80061ce:	e7bb      	b.n	8006148 <_printf_i+0x130>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	6826      	ldr	r6, [r4, #0]
 80061d4:	6961      	ldr	r1, [r4, #20]
 80061d6:	1d18      	adds	r0, r3, #4
 80061d8:	6028      	str	r0, [r5, #0]
 80061da:	0635      	lsls	r5, r6, #24
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0x1cc>
 80061e0:	6019      	str	r1, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0x1d2>
 80061e4:	0670      	lsls	r0, r6, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0x1c8>
 80061e8:	8019      	strh	r1, [r3, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	4615      	mov	r5, r2
 80061f0:	e7ba      	b.n	8006168 <_printf_i+0x150>
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	602a      	str	r2, [r5, #0]
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4628      	mov	r0, r5
 8006200:	f7f9 ffee 	bl	80001e0 <memchr>
 8006204:	b108      	cbz	r0, 800620a <_printf_i+0x1f2>
 8006206:	1b40      	subs	r0, r0, r5
 8006208:	6060      	str	r0, [r4, #4]
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	2300      	movs	r3, #0
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006214:	e7a8      	b.n	8006168 <_printf_i+0x150>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	462a      	mov	r2, r5
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d0ab      	beq.n	800617c <_printf_i+0x164>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	079b      	lsls	r3, r3, #30
 8006228:	d413      	bmi.n	8006252 <_printf_i+0x23a>
 800622a:	68e0      	ldr	r0, [r4, #12]
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	4298      	cmp	r0, r3
 8006230:	bfb8      	it	lt
 8006232:	4618      	movlt	r0, r3
 8006234:	e7a4      	b.n	8006180 <_printf_i+0x168>
 8006236:	2301      	movs	r3, #1
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d09b      	beq.n	800617c <_printf_i+0x164>
 8006244:	3501      	adds	r5, #1
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	9903      	ldr	r1, [sp, #12]
 800624a:	1a5b      	subs	r3, r3, r1
 800624c:	42ab      	cmp	r3, r5
 800624e:	dcf2      	bgt.n	8006236 <_printf_i+0x21e>
 8006250:	e7eb      	b.n	800622a <_printf_i+0x212>
 8006252:	2500      	movs	r5, #0
 8006254:	f104 0619 	add.w	r6, r4, #25
 8006258:	e7f5      	b.n	8006246 <_printf_i+0x22e>
 800625a:	bf00      	nop
 800625c:	0800892a 	.word	0x0800892a
 8006260:	0800893b 	.word	0x0800893b

08006264 <siprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	b500      	push	{lr}
 8006268:	b09c      	sub	sp, #112	; 0x70
 800626a:	ab1d      	add	r3, sp, #116	; 0x74
 800626c:	9002      	str	r0, [sp, #8]
 800626e:	9006      	str	r0, [sp, #24]
 8006270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006274:	4809      	ldr	r0, [pc, #36]	; (800629c <siprintf+0x38>)
 8006276:	9107      	str	r1, [sp, #28]
 8006278:	9104      	str	r1, [sp, #16]
 800627a:	4909      	ldr	r1, [pc, #36]	; (80062a0 <siprintf+0x3c>)
 800627c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006280:	9105      	str	r1, [sp, #20]
 8006282:	6800      	ldr	r0, [r0, #0]
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	a902      	add	r1, sp, #8
 8006288:	f001 fb78 	bl	800797c <_svfiprintf_r>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	b01c      	add	sp, #112	; 0x70
 8006294:	f85d eb04 	ldr.w	lr, [sp], #4
 8006298:	b003      	add	sp, #12
 800629a:	4770      	bx	lr
 800629c:	20000014 	.word	0x20000014
 80062a0:	ffff0208 	.word	0xffff0208

080062a4 <quorem>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	6903      	ldr	r3, [r0, #16]
 80062aa:	690c      	ldr	r4, [r1, #16]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	4607      	mov	r7, r0
 80062b0:	f2c0 8081 	blt.w	80063b6 <quorem+0x112>
 80062b4:	3c01      	subs	r4, #1
 80062b6:	f101 0814 	add.w	r8, r1, #20
 80062ba:	f100 0514 	add.w	r5, r0, #20
 80062be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062cc:	3301      	adds	r3, #1
 80062ce:	429a      	cmp	r2, r3
 80062d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062dc:	d331      	bcc.n	8006342 <quorem+0x9e>
 80062de:	f04f 0e00 	mov.w	lr, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	46ac      	mov	ip, r5
 80062e6:	46f2      	mov	sl, lr
 80062e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ec:	b293      	uxth	r3, r2
 80062ee:	fb06 e303 	mla	r3, r6, r3, lr
 80062f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ebaa 0303 	sub.w	r3, sl, r3
 80062fc:	f8dc a000 	ldr.w	sl, [ip]
 8006300:	0c12      	lsrs	r2, r2, #16
 8006302:	fa13 f38a 	uxtah	r3, r3, sl
 8006306:	fb06 e202 	mla	r2, r6, r2, lr
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006312:	b292      	uxth	r2, r2
 8006314:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800631c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006320:	4581      	cmp	r9, r0
 8006322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006326:	f84c 3b04 	str.w	r3, [ip], #4
 800632a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800632e:	d2db      	bcs.n	80062e8 <quorem+0x44>
 8006330:	f855 300b 	ldr.w	r3, [r5, fp]
 8006334:	b92b      	cbnz	r3, 8006342 <quorem+0x9e>
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	3b04      	subs	r3, #4
 800633a:	429d      	cmp	r5, r3
 800633c:	461a      	mov	r2, r3
 800633e:	d32e      	bcc.n	800639e <quorem+0xfa>
 8006340:	613c      	str	r4, [r7, #16]
 8006342:	4638      	mov	r0, r7
 8006344:	f001 f8c6 	bl	80074d4 <__mcmp>
 8006348:	2800      	cmp	r0, #0
 800634a:	db24      	blt.n	8006396 <quorem+0xf2>
 800634c:	3601      	adds	r6, #1
 800634e:	4628      	mov	r0, r5
 8006350:	f04f 0c00 	mov.w	ip, #0
 8006354:	f858 2b04 	ldr.w	r2, [r8], #4
 8006358:	f8d0 e000 	ldr.w	lr, [r0]
 800635c:	b293      	uxth	r3, r2
 800635e:	ebac 0303 	sub.w	r3, ip, r3
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	fa13 f38e 	uxtah	r3, r3, lr
 8006368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800636c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006376:	45c1      	cmp	r9, r8
 8006378:	f840 3b04 	str.w	r3, [r0], #4
 800637c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006380:	d2e8      	bcs.n	8006354 <quorem+0xb0>
 8006382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800638a:	b922      	cbnz	r2, 8006396 <quorem+0xf2>
 800638c:	3b04      	subs	r3, #4
 800638e:	429d      	cmp	r5, r3
 8006390:	461a      	mov	r2, r3
 8006392:	d30a      	bcc.n	80063aa <quorem+0x106>
 8006394:	613c      	str	r4, [r7, #16]
 8006396:	4630      	mov	r0, r6
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1cc      	bne.n	8006340 <quorem+0x9c>
 80063a6:	3c01      	subs	r4, #1
 80063a8:	e7c7      	b.n	800633a <quorem+0x96>
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1f0      	bne.n	8006394 <quorem+0xf0>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7eb      	b.n	800638e <quorem+0xea>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e7ee      	b.n	8006398 <quorem+0xf4>
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ed2d 8b04 	vpush	{d8-d9}
 80063c8:	ec57 6b10 	vmov	r6, r7, d0
 80063cc:	b093      	sub	sp, #76	; 0x4c
 80063ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063d4:	9106      	str	r1, [sp, #24]
 80063d6:	ee10 aa10 	vmov	sl, s0
 80063da:	4604      	mov	r4, r0
 80063dc:	9209      	str	r2, [sp, #36]	; 0x24
 80063de:	930c      	str	r3, [sp, #48]	; 0x30
 80063e0:	46bb      	mov	fp, r7
 80063e2:	b975      	cbnz	r5, 8006402 <_dtoa_r+0x42>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f000 fddd 	bl	8006fa4 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6260      	str	r0, [r4, #36]	; 0x24
 80063ee:	b920      	cbnz	r0, 80063fa <_dtoa_r+0x3a>
 80063f0:	4ba7      	ldr	r3, [pc, #668]	; (8006690 <_dtoa_r+0x2d0>)
 80063f2:	21ea      	movs	r1, #234	; 0xea
 80063f4:	48a7      	ldr	r0, [pc, #668]	; (8006694 <_dtoa_r+0x2d4>)
 80063f6:	f001 fbd1 	bl	8007b9c <__assert_func>
 80063fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063fe:	6005      	str	r5, [r0, #0]
 8006400:	60c5      	str	r5, [r0, #12]
 8006402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	b151      	cbz	r1, 800641e <_dtoa_r+0x5e>
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	604a      	str	r2, [r1, #4]
 800640c:	2301      	movs	r3, #1
 800640e:	4093      	lsls	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fe1c 	bl	8007050 <_Bfree>
 8006418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	1e3b      	subs	r3, r7, #0
 8006420:	bfaa      	itet	ge
 8006422:	2300      	movge	r3, #0
 8006424:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006428:	f8c8 3000 	strge.w	r3, [r8]
 800642c:	4b9a      	ldr	r3, [pc, #616]	; (8006698 <_dtoa_r+0x2d8>)
 800642e:	bfbc      	itt	lt
 8006430:	2201      	movlt	r2, #1
 8006432:	f8c8 2000 	strlt.w	r2, [r8]
 8006436:	ea33 030b 	bics.w	r3, r3, fp
 800643a:	d11b      	bne.n	8006474 <_dtoa_r+0xb4>
 800643c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006448:	4333      	orrs	r3, r6
 800644a:	f000 8592 	beq.w	8006f72 <_dtoa_r+0xbb2>
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	b963      	cbnz	r3, 800646c <_dtoa_r+0xac>
 8006452:	4b92      	ldr	r3, [pc, #584]	; (800669c <_dtoa_r+0x2dc>)
 8006454:	e022      	b.n	800649c <_dtoa_r+0xdc>
 8006456:	4b92      	ldr	r3, [pc, #584]	; (80066a0 <_dtoa_r+0x2e0>)
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	3308      	adds	r3, #8
 800645c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	b013      	add	sp, #76	; 0x4c
 8006464:	ecbd 8b04 	vpop	{d8-d9}
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	4b8b      	ldr	r3, [pc, #556]	; (800669c <_dtoa_r+0x2dc>)
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	3303      	adds	r3, #3
 8006472:	e7f3      	b.n	800645c <_dtoa_r+0x9c>
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	f7fa fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006480:	ec4b ab19 	vmov	d9, sl, fp
 8006484:	4680      	mov	r8, r0
 8006486:	b158      	cbz	r0, 80064a0 <_dtoa_r+0xe0>
 8006488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 856b 	beq.w	8006f6c <_dtoa_r+0xbac>
 8006496:	4883      	ldr	r0, [pc, #524]	; (80066a4 <_dtoa_r+0x2e4>)
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	1e43      	subs	r3, r0, #1
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	e7df      	b.n	8006460 <_dtoa_r+0xa0>
 80064a0:	ec4b ab10 	vmov	d0, sl, fp
 80064a4:	aa10      	add	r2, sp, #64	; 0x40
 80064a6:	a911      	add	r1, sp, #68	; 0x44
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 f8b9 	bl	8007620 <__d2b>
 80064ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064b2:	ee08 0a10 	vmov	s16, r0
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	f000 8084 	beq.w	80065c4 <_dtoa_r+0x204>
 80064bc:	ee19 3a90 	vmov	r3, s19
 80064c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064c8:	4656      	mov	r6, sl
 80064ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064d6:	4b74      	ldr	r3, [pc, #464]	; (80066a8 <_dtoa_r+0x2e8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	a365      	add	r3, pc, #404	; (adr r3, 8006678 <_dtoa_r+0x2b8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	a364      	add	r3, pc, #400	; (adr r3, 8006680 <_dtoa_r+0x2c0>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4606      	mov	r6, r0
 80064f8:	4628      	mov	r0, r5
 80064fa:	460f      	mov	r7, r1
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	a361      	add	r3, pc, #388	; (adr r3, 8006688 <_dtoa_r+0x2c8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa f877 	bl	80005f8 <__aeabi_dmul>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 febb 	bl	800028c <__adddf3>
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	f7fa fb1d 	bl	8000b58 <__aeabi_d2iz>
 800651e:	2200      	movs	r2, #0
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	b150      	cbz	r0, 8006544 <_dtoa_r+0x184>
 800652e:	9800      	ldr	r0, [sp, #0]
 8006530:	f7f9 fff8 	bl	8000524 <__aeabi_i2d>
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	f7fa fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800653c:	b910      	cbnz	r0, 8006544 <_dtoa_r+0x184>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	2b16      	cmp	r3, #22
 8006548:	d85a      	bhi.n	8006600 <_dtoa_r+0x240>
 800654a:	9a00      	ldr	r2, [sp, #0]
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <_dtoa_r+0x2ec>)
 800654e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	ec51 0b19 	vmov	r0, r1, d9
 800655a:	f7fa fabf 	bl	8000adc <__aeabi_dcmplt>
 800655e:	2800      	cmp	r0, #0
 8006560:	d050      	beq.n	8006604 <_dtoa_r+0x244>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	930b      	str	r3, [sp, #44]	; 0x2c
 800656c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800656e:	1b5d      	subs	r5, r3, r5
 8006570:	1e6b      	subs	r3, r5, #1
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	bf45      	ittet	mi
 8006576:	f1c5 0301 	rsbmi	r3, r5, #1
 800657a:	9304      	strmi	r3, [sp, #16]
 800657c:	2300      	movpl	r3, #0
 800657e:	2300      	movmi	r3, #0
 8006580:	bf4c      	ite	mi
 8006582:	9305      	strmi	r3, [sp, #20]
 8006584:	9304      	strpl	r3, [sp, #16]
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db3d      	blt.n	8006608 <_dtoa_r+0x248>
 800658c:	9b05      	ldr	r3, [sp, #20]
 800658e:	9a00      	ldr	r2, [sp, #0]
 8006590:	920a      	str	r2, [sp, #40]	; 0x28
 8006592:	4413      	add	r3, r2
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	2300      	movs	r3, #0
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	2b09      	cmp	r3, #9
 800659e:	f200 8089 	bhi.w	80066b4 <_dtoa_r+0x2f4>
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	bfc4      	itt	gt
 80065a6:	3b04      	subgt	r3, #4
 80065a8:	9306      	strgt	r3, [sp, #24]
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	f1a3 0302 	sub.w	r3, r3, #2
 80065b0:	bfcc      	ite	gt
 80065b2:	2500      	movgt	r5, #0
 80065b4:	2501      	movle	r5, #1
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	f200 8087 	bhi.w	80066ca <_dtoa_r+0x30a>
 80065bc:	e8df f003 	tbb	[pc, r3]
 80065c0:	59383a2d 	.word	0x59383a2d
 80065c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065c8:	441d      	add	r5, r3
 80065ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	bfc1      	itttt	gt
 80065d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065da:	fa0b f303 	lslgt.w	r3, fp, r3
 80065de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065e2:	bfda      	itte	le
 80065e4:	f1c3 0320 	rsble	r3, r3, #32
 80065e8:	fa06 f003 	lslle.w	r0, r6, r3
 80065ec:	4318      	orrgt	r0, r3
 80065ee:	f7f9 ff89 	bl	8000504 <__aeabi_ui2d>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4606      	mov	r6, r0
 80065f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065fa:	3d01      	subs	r5, #1
 80065fc:	930e      	str	r3, [sp, #56]	; 0x38
 80065fe:	e76a      	b.n	80064d6 <_dtoa_r+0x116>
 8006600:	2301      	movs	r3, #1
 8006602:	e7b2      	b.n	800656a <_dtoa_r+0x1aa>
 8006604:	900b      	str	r0, [sp, #44]	; 0x2c
 8006606:	e7b1      	b.n	800656c <_dtoa_r+0x1ac>
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	9a00      	ldr	r2, [sp, #0]
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	4253      	negs	r3, r2
 8006612:	9307      	str	r3, [sp, #28]
 8006614:	2300      	movs	r3, #0
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	e7bf      	b.n	800659a <_dtoa_r+0x1da>
 800661a:	2300      	movs	r3, #0
 800661c:	9308      	str	r3, [sp, #32]
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc55      	bgt.n	80066d0 <_dtoa_r+0x310>
 8006624:	2301      	movs	r3, #1
 8006626:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800662a:	461a      	mov	r2, r3
 800662c:	9209      	str	r2, [sp, #36]	; 0x24
 800662e:	e00c      	b.n	800664a <_dtoa_r+0x28a>
 8006630:	2301      	movs	r3, #1
 8006632:	e7f3      	b.n	800661c <_dtoa_r+0x25c>
 8006634:	2300      	movs	r3, #0
 8006636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	4413      	add	r3, r2
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	2b01      	cmp	r3, #1
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	bfb8      	it	lt
 8006648:	2301      	movlt	r3, #1
 800664a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800664c:	2200      	movs	r2, #0
 800664e:	6042      	str	r2, [r0, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	f102 0614 	add.w	r6, r2, #20
 8006656:	429e      	cmp	r6, r3
 8006658:	6841      	ldr	r1, [r0, #4]
 800665a:	d93d      	bls.n	80066d8 <_dtoa_r+0x318>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 fcb7 	bl	8006fd0 <_Balloc>
 8006662:	9001      	str	r0, [sp, #4]
 8006664:	2800      	cmp	r0, #0
 8006666:	d13b      	bne.n	80066e0 <_dtoa_r+0x320>
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <_dtoa_r+0x2f0>)
 800666a:	4602      	mov	r2, r0
 800666c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006670:	e6c0      	b.n	80063f4 <_dtoa_r+0x34>
 8006672:	2301      	movs	r3, #1
 8006674:	e7df      	b.n	8006636 <_dtoa_r+0x276>
 8006676:	bf00      	nop
 8006678:	636f4361 	.word	0x636f4361
 800667c:	3fd287a7 	.word	0x3fd287a7
 8006680:	8b60c8b3 	.word	0x8b60c8b3
 8006684:	3fc68a28 	.word	0x3fc68a28
 8006688:	509f79fb 	.word	0x509f79fb
 800668c:	3fd34413 	.word	0x3fd34413
 8006690:	08008959 	.word	0x08008959
 8006694:	08008970 	.word	0x08008970
 8006698:	7ff00000 	.word	0x7ff00000
 800669c:	08008955 	.word	0x08008955
 80066a0:	0800894c 	.word	0x0800894c
 80066a4:	08008929 	.word	0x08008929
 80066a8:	3ff80000 	.word	0x3ff80000
 80066ac:	08008a60 	.word	0x08008a60
 80066b0:	080089cb 	.word	0x080089cb
 80066b4:	2501      	movs	r5, #1
 80066b6:	2300      	movs	r3, #0
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	9508      	str	r5, [sp, #32]
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2312      	movs	r3, #18
 80066c8:	e7b0      	b.n	800662c <_dtoa_r+0x26c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	e7f5      	b.n	80066bc <_dtoa_r+0x2fc>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066d6:	e7b8      	b.n	800664a <_dtoa_r+0x28a>
 80066d8:	3101      	adds	r1, #1
 80066da:	6041      	str	r1, [r0, #4]
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	e7b8      	b.n	8006652 <_dtoa_r+0x292>
 80066e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e2:	9a01      	ldr	r2, [sp, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	f200 809d 	bhi.w	8006828 <_dtoa_r+0x468>
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	f000 809a 	beq.w	8006828 <_dtoa_r+0x468>
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd32      	ble.n	8006760 <_dtoa_r+0x3a0>
 80066fa:	4ab7      	ldr	r2, [pc, #732]	; (80069d8 <_dtoa_r+0x618>)
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	05d8      	lsls	r0, r3, #23
 800670c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006710:	d516      	bpl.n	8006740 <_dtoa_r+0x380>
 8006712:	4bb2      	ldr	r3, [pc, #712]	; (80069dc <_dtoa_r+0x61c>)
 8006714:	ec51 0b19 	vmov	r0, r1, d9
 8006718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800671c:	f7fa f896 	bl	800084c <__aeabi_ddiv>
 8006720:	f007 070f 	and.w	r7, r7, #15
 8006724:	4682      	mov	sl, r0
 8006726:	468b      	mov	fp, r1
 8006728:	2503      	movs	r5, #3
 800672a:	4eac      	ldr	r6, [pc, #688]	; (80069dc <_dtoa_r+0x61c>)
 800672c:	b957      	cbnz	r7, 8006744 <_dtoa_r+0x384>
 800672e:	4642      	mov	r2, r8
 8006730:	464b      	mov	r3, r9
 8006732:	4650      	mov	r0, sl
 8006734:	4659      	mov	r1, fp
 8006736:	f7fa f889 	bl	800084c <__aeabi_ddiv>
 800673a:	4682      	mov	sl, r0
 800673c:	468b      	mov	fp, r1
 800673e:	e028      	b.n	8006792 <_dtoa_r+0x3d2>
 8006740:	2502      	movs	r5, #2
 8006742:	e7f2      	b.n	800672a <_dtoa_r+0x36a>
 8006744:	07f9      	lsls	r1, r7, #31
 8006746:	d508      	bpl.n	800675a <_dtoa_r+0x39a>
 8006748:	4640      	mov	r0, r8
 800674a:	4649      	mov	r1, r9
 800674c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	3501      	adds	r5, #1
 8006756:	4680      	mov	r8, r0
 8006758:	4689      	mov	r9, r1
 800675a:	107f      	asrs	r7, r7, #1
 800675c:	3608      	adds	r6, #8
 800675e:	e7e5      	b.n	800672c <_dtoa_r+0x36c>
 8006760:	f000 809b 	beq.w	800689a <_dtoa_r+0x4da>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	4f9d      	ldr	r7, [pc, #628]	; (80069dc <_dtoa_r+0x61c>)
 8006768:	425e      	negs	r6, r3
 800676a:	4b9b      	ldr	r3, [pc, #620]	; (80069d8 <_dtoa_r+0x618>)
 800676c:	f006 020f 	and.w	r2, r6, #15
 8006770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	ec51 0b19 	vmov	r0, r1, d9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	1136      	asrs	r6, r6, #4
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	2300      	movs	r3, #0
 8006788:	2502      	movs	r5, #2
 800678a:	2e00      	cmp	r6, #0
 800678c:	d17a      	bne.n	8006884 <_dtoa_r+0x4c4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d3      	bne.n	800673a <_dtoa_r+0x37a>
 8006792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8082 	beq.w	800689e <_dtoa_r+0x4de>
 800679a:	4b91      	ldr	r3, [pc, #580]	; (80069e0 <_dtoa_r+0x620>)
 800679c:	2200      	movs	r2, #0
 800679e:	4650      	mov	r0, sl
 80067a0:	4659      	mov	r1, fp
 80067a2:	f7fa f99b 	bl	8000adc <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d079      	beq.n	800689e <_dtoa_r+0x4de>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d076      	beq.n	800689e <_dtoa_r+0x4de>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd36      	ble.n	8006824 <_dtoa_r+0x464>
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	4650      	mov	r0, sl
 80067ba:	4659      	mov	r1, fp
 80067bc:	1e5f      	subs	r7, r3, #1
 80067be:	2200      	movs	r2, #0
 80067c0:	4b88      	ldr	r3, [pc, #544]	; (80069e4 <_dtoa_r+0x624>)
 80067c2:	f7f9 ff19 	bl	80005f8 <__aeabi_dmul>
 80067c6:	9e02      	ldr	r6, [sp, #8]
 80067c8:	4682      	mov	sl, r0
 80067ca:	468b      	mov	fp, r1
 80067cc:	3501      	adds	r5, #1
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7f9 fea8 	bl	8000524 <__aeabi_i2d>
 80067d4:	4652      	mov	r2, sl
 80067d6:	465b      	mov	r3, fp
 80067d8:	f7f9 ff0e 	bl	80005f8 <__aeabi_dmul>
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <_dtoa_r+0x628>)
 80067de:	2200      	movs	r2, #0
 80067e0:	f7f9 fd54 	bl	800028c <__adddf3>
 80067e4:	46d0      	mov	r8, sl
 80067e6:	46d9      	mov	r9, fp
 80067e8:	4682      	mov	sl, r0
 80067ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d158      	bne.n	80068a4 <_dtoa_r+0x4e4>
 80067f2:	4b7e      	ldr	r3, [pc, #504]	; (80069ec <_dtoa_r+0x62c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4652      	mov	r2, sl
 8006800:	465b      	mov	r3, fp
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	f7fa f987 	bl	8000b18 <__aeabi_dcmpgt>
 800680a:	2800      	cmp	r0, #0
 800680c:	f040 8295 	bne.w	8006d3a <_dtoa_r+0x97a>
 8006810:	4652      	mov	r2, sl
 8006812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa f95f 	bl	8000adc <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8289 	bne.w	8006d36 <_dtoa_r+0x976>
 8006824:	ec5b ab19 	vmov	sl, fp, d9
 8006828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800682a:	2b00      	cmp	r3, #0
 800682c:	f2c0 8148 	blt.w	8006ac0 <_dtoa_r+0x700>
 8006830:	9a00      	ldr	r2, [sp, #0]
 8006832:	2a0e      	cmp	r2, #14
 8006834:	f300 8144 	bgt.w	8006ac0 <_dtoa_r+0x700>
 8006838:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <_dtoa_r+0x618>)
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	f280 80d5 	bge.w	80069f4 <_dtoa_r+0x634>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f300 80d1 	bgt.w	80069f4 <_dtoa_r+0x634>
 8006852:	f040 826f 	bne.w	8006d34 <_dtoa_r+0x974>
 8006856:	4b65      	ldr	r3, [pc, #404]	; (80069ec <_dtoa_r+0x62c>)
 8006858:	2200      	movs	r2, #0
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7fa f94d 	bl	8000b04 <__aeabi_dcmpge>
 800686a:	9e03      	ldr	r6, [sp, #12]
 800686c:	4637      	mov	r7, r6
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8245 	bne.w	8006cfe <_dtoa_r+0x93e>
 8006874:	9d01      	ldr	r5, [sp, #4]
 8006876:	2331      	movs	r3, #49	; 0x31
 8006878:	f805 3b01 	strb.w	r3, [r5], #1
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	e240      	b.n	8006d06 <_dtoa_r+0x946>
 8006884:	07f2      	lsls	r2, r6, #31
 8006886:	d505      	bpl.n	8006894 <_dtoa_r+0x4d4>
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	f7f9 feb4 	bl	80005f8 <__aeabi_dmul>
 8006890:	3501      	adds	r5, #1
 8006892:	2301      	movs	r3, #1
 8006894:	1076      	asrs	r6, r6, #1
 8006896:	3708      	adds	r7, #8
 8006898:	e777      	b.n	800678a <_dtoa_r+0x3ca>
 800689a:	2502      	movs	r5, #2
 800689c:	e779      	b.n	8006792 <_dtoa_r+0x3d2>
 800689e:	9f00      	ldr	r7, [sp, #0]
 80068a0:	9e03      	ldr	r6, [sp, #12]
 80068a2:	e794      	b.n	80067ce <_dtoa_r+0x40e>
 80068a4:	9901      	ldr	r1, [sp, #4]
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <_dtoa_r+0x618>)
 80068a8:	4431      	add	r1, r6
 80068aa:	910d      	str	r1, [sp, #52]	; 0x34
 80068ac:	9908      	ldr	r1, [sp, #32]
 80068ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d043      	beq.n	8006942 <_dtoa_r+0x582>
 80068ba:	494d      	ldr	r1, [pc, #308]	; (80069f0 <_dtoa_r+0x630>)
 80068bc:	2000      	movs	r0, #0
 80068be:	f7f9 ffc5 	bl	800084c <__aeabi_ddiv>
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	9d01      	ldr	r5, [sp, #4]
 80068cc:	4682      	mov	sl, r0
 80068ce:	468b      	mov	fp, r1
 80068d0:	4649      	mov	r1, r9
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7fa f940 	bl	8000b58 <__aeabi_d2iz>
 80068d8:	4606      	mov	r6, r0
 80068da:	f7f9 fe23 	bl	8000524 <__aeabi_i2d>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	3630      	adds	r6, #48	; 0x30
 80068ec:	f805 6b01 	strb.w	r6, [r5], #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	4680      	mov	r8, r0
 80068f6:	4689      	mov	r9, r1
 80068f8:	f7fa f8f0 	bl	8000adc <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d163      	bne.n	80069c8 <_dtoa_r+0x608>
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	4936      	ldr	r1, [pc, #216]	; (80069e0 <_dtoa_r+0x620>)
 8006906:	2000      	movs	r0, #0
 8006908:	f7f9 fcbe 	bl	8000288 <__aeabi_dsub>
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	f7fa f8e4 	bl	8000adc <__aeabi_dcmplt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 80b5 	bne.w	8006a84 <_dtoa_r+0x6c4>
 800691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691c:	429d      	cmp	r5, r3
 800691e:	d081      	beq.n	8006824 <_dtoa_r+0x464>
 8006920:	4b30      	ldr	r3, [pc, #192]	; (80069e4 <_dtoa_r+0x624>)
 8006922:	2200      	movs	r2, #0
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <_dtoa_r+0x624>)
 800692e:	4682      	mov	sl, r0
 8006930:	468b      	mov	fp, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	2200      	movs	r2, #0
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	4680      	mov	r8, r0
 800693e:	4689      	mov	r9, r1
 8006940:	e7c6      	b.n	80068d0 <_dtoa_r+0x510>
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	9d01      	ldr	r5, [sp, #4]
 800694e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	4649      	mov	r1, r9
 8006956:	4640      	mov	r0, r8
 8006958:	f7fa f8fe 	bl	8000b58 <__aeabi_d2iz>
 800695c:	4606      	mov	r6, r0
 800695e:	f7f9 fde1 	bl	8000524 <__aeabi_i2d>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 fc8c 	bl	8000288 <__aeabi_dsub>
 8006970:	f805 6b01 	strb.w	r6, [r5], #1
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	429d      	cmp	r5, r3
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	d124      	bne.n	80069cc <_dtoa_r+0x60c>
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <_dtoa_r+0x630>)
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	f7f9 fc80 	bl	800028c <__adddf3>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7fa f8c0 	bl	8000b18 <__aeabi_dcmpgt>
 8006998:	2800      	cmp	r0, #0
 800699a:	d173      	bne.n	8006a84 <_dtoa_r+0x6c4>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	4913      	ldr	r1, [pc, #76]	; (80069f0 <_dtoa_r+0x630>)
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f894 	bl	8000adc <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f43f af35 	beq.w	8006824 <_dtoa_r+0x464>
 80069ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069bc:	1e6b      	subs	r3, r5, #1
 80069be:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d0f8      	beq.n	80069ba <_dtoa_r+0x5fa>
 80069c8:	9700      	str	r7, [sp, #0]
 80069ca:	e049      	b.n	8006a60 <_dtoa_r+0x6a0>
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <_dtoa_r+0x624>)
 80069ce:	f7f9 fe13 	bl	80005f8 <__aeabi_dmul>
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	e7bd      	b.n	8006954 <_dtoa_r+0x594>
 80069d8:	08008a60 	.word	0x08008a60
 80069dc:	08008a38 	.word	0x08008a38
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	40240000 	.word	0x40240000
 80069e8:	401c0000 	.word	0x401c0000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	9d01      	ldr	r5, [sp, #4]
 80069f6:	4656      	mov	r6, sl
 80069f8:	465f      	mov	r7, fp
 80069fa:	4642      	mov	r2, r8
 80069fc:	464b      	mov	r3, r9
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7f9 ff23 	bl	800084c <__aeabi_ddiv>
 8006a06:	f7fa f8a7 	bl	8000b58 <__aeabi_d2iz>
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	f7f9 fd8a 	bl	8000524 <__aeabi_i2d>
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	f7f9 fdf0 	bl	80005f8 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a24:	f7f9 fc30 	bl	8000288 <__aeabi_dsub>
 8006a28:	f805 6b01 	strb.w	r6, [r5], #1
 8006a2c:	9e01      	ldr	r6, [sp, #4]
 8006a2e:	9f03      	ldr	r7, [sp, #12]
 8006a30:	1bae      	subs	r6, r5, r6
 8006a32:	42b7      	cmp	r7, r6
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	d135      	bne.n	8006aa6 <_dtoa_r+0x6e6>
 8006a3a:	f7f9 fc27 	bl	800028c <__adddf3>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	f7fa f867 	bl	8000b18 <__aeabi_dcmpgt>
 8006a4a:	b9d0      	cbnz	r0, 8006a82 <_dtoa_r+0x6c2>
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7fa f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a58:	b110      	cbz	r0, 8006a60 <_dtoa_r+0x6a0>
 8006a5a:	f01a 0f01 	tst.w	sl, #1
 8006a5e:	d110      	bne.n	8006a82 <_dtoa_r+0x6c2>
 8006a60:	4620      	mov	r0, r4
 8006a62:	ee18 1a10 	vmov	r1, s16
 8006a66:	f000 faf3 	bl	8007050 <_Bfree>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9800      	ldr	r0, [sp, #0]
 8006a6e:	702b      	strb	r3, [r5, #0]
 8006a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a72:	3001      	adds	r0, #1
 8006a74:	6018      	str	r0, [r3, #0]
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f43f acf1 	beq.w	8006460 <_dtoa_r+0xa0>
 8006a7e:	601d      	str	r5, [r3, #0]
 8006a80:	e4ee      	b.n	8006460 <_dtoa_r+0xa0>
 8006a82:	9f00      	ldr	r7, [sp, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	461d      	mov	r5, r3
 8006a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8c:	2a39      	cmp	r2, #57	; 0x39
 8006a8e:	d106      	bne.n	8006a9e <_dtoa_r+0x6de>
 8006a90:	9a01      	ldr	r2, [sp, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1f7      	bne.n	8006a86 <_dtoa_r+0x6c6>
 8006a96:	9901      	ldr	r1, [sp, #4]
 8006a98:	2230      	movs	r2, #48	; 0x30
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	700a      	strb	r2, [r1, #0]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e790      	b.n	80069c8 <_dtoa_r+0x608>
 8006aa6:	4ba6      	ldr	r3, [pc, #664]	; (8006d40 <_dtoa_r+0x980>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f7f9 fda5 	bl	80005f8 <__aeabi_dmul>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d09d      	beq.n	80069fa <_dtoa_r+0x63a>
 8006abe:	e7cf      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006ac0:	9a08      	ldr	r2, [sp, #32]
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	f000 80d7 	beq.w	8006c76 <_dtoa_r+0x8b6>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a01      	cmp	r2, #1
 8006acc:	f300 80ba 	bgt.w	8006c44 <_dtoa_r+0x884>
 8006ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	f000 80b2 	beq.w	8006c3c <_dtoa_r+0x87c>
 8006ad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006adc:	9e07      	ldr	r6, [sp, #28]
 8006ade:	9d04      	ldr	r5, [sp, #16]
 8006ae0:	9a04      	ldr	r2, [sp, #16]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	9204      	str	r2, [sp, #16]
 8006ae6:	9a05      	ldr	r2, [sp, #20]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	441a      	add	r2, r3
 8006aec:	4620      	mov	r0, r4
 8006aee:	9205      	str	r2, [sp, #20]
 8006af0:	f000 fb66 	bl	80071c0 <__i2b>
 8006af4:	4607      	mov	r7, r0
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	dd0c      	ble.n	8006b14 <_dtoa_r+0x754>
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd09      	ble.n	8006b14 <_dtoa_r+0x754>
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	9a04      	ldr	r2, [sp, #16]
 8006b04:	bfa8      	it	ge
 8006b06:	462b      	movge	r3, r5
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	9a05      	ldr	r2, [sp, #20]
 8006b0e:	1aed      	subs	r5, r5, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	b31b      	cbz	r3, 8006b60 <_dtoa_r+0x7a0>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80af 	beq.w	8006c7e <_dtoa_r+0x8be>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	dd13      	ble.n	8006b4c <_dtoa_r+0x78c>
 8006b24:	4639      	mov	r1, r7
 8006b26:	4632      	mov	r2, r6
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc09 	bl	8007340 <__pow5mult>
 8006b2e:	ee18 2a10 	vmov	r2, s16
 8006b32:	4601      	mov	r1, r0
 8006b34:	4607      	mov	r7, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fb58 	bl	80071ec <__multiply>
 8006b3c:	ee18 1a10 	vmov	r1, s16
 8006b40:	4680      	mov	r8, r0
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fa84 	bl	8007050 <_Bfree>
 8006b48:	ee08 8a10 	vmov	s16, r8
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	1b9a      	subs	r2, r3, r6
 8006b50:	d006      	beq.n	8006b60 <_dtoa_r+0x7a0>
 8006b52:	ee18 1a10 	vmov	r1, s16
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fbf2 	bl	8007340 <__pow5mult>
 8006b5c:	ee08 0a10 	vmov	s16, r0
 8006b60:	2101      	movs	r1, #1
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb2c 	bl	80071c0 <__i2b>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	f340 8088 	ble.w	8006c82 <_dtoa_r+0x8c2>
 8006b72:	461a      	mov	r2, r3
 8006b74:	4601      	mov	r1, r0
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fbe2 	bl	8007340 <__pow5mult>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	4606      	mov	r6, r0
 8006b82:	f340 8081 	ble.w	8006c88 <_dtoa_r+0x8c8>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	6933      	ldr	r3, [r6, #16]
 8006b8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f000 fac5 	bl	8007120 <__hi0bits>
 8006b96:	f1c0 0020 	rsb	r0, r0, #32
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	4418      	add	r0, r3
 8006b9e:	f010 001f 	ands.w	r0, r0, #31
 8006ba2:	f000 8092 	beq.w	8006cca <_dtoa_r+0x90a>
 8006ba6:	f1c0 0320 	rsb	r3, r0, #32
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	f340 808a 	ble.w	8006cc4 <_dtoa_r+0x904>
 8006bb0:	f1c0 001c 	rsb	r0, r0, #28
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	4403      	add	r3, r0
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	4403      	add	r3, r0
 8006bbe:	4405      	add	r5, r0
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd07      	ble.n	8006bd8 <_dtoa_r+0x818>
 8006bc8:	ee18 1a10 	vmov	r1, s16
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fc10 	bl	80073f4 <__lshift>
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd05      	ble.n	8006bea <_dtoa_r+0x82a>
 8006bde:	4631      	mov	r1, r6
 8006be0:	461a      	mov	r2, r3
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fc06 	bl	80073f4 <__lshift>
 8006be8:	4606      	mov	r6, r0
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06e      	beq.n	8006cce <_dtoa_r+0x90e>
 8006bf0:	ee18 0a10 	vmov	r0, s16
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	f000 fc6d 	bl	80074d4 <__mcmp>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	da67      	bge.n	8006cce <_dtoa_r+0x90e>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	220a      	movs	r2, #10
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fa41 	bl	8007094 <__multadd>
 8006c12:	9b08      	ldr	r3, [sp, #32]
 8006c14:	ee08 0a10 	vmov	s16, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 81b1 	beq.w	8006f80 <_dtoa_r+0xbc0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4639      	mov	r1, r7
 8006c22:	220a      	movs	r2, #10
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fa35 	bl	8007094 <__multadd>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	4607      	mov	r7, r0
 8006c30:	f300 808e 	bgt.w	8006d50 <_dtoa_r+0x990>
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dc51      	bgt.n	8006cde <_dtoa_r+0x91e>
 8006c3a:	e089      	b.n	8006d50 <_dtoa_r+0x990>
 8006c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c42:	e74b      	b.n	8006adc <_dtoa_r+0x71c>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1e5e      	subs	r6, r3, #1
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	42b3      	cmp	r3, r6
 8006c4c:	bfbf      	itttt	lt
 8006c4e:	9b07      	ldrlt	r3, [sp, #28]
 8006c50:	9607      	strlt	r6, [sp, #28]
 8006c52:	1af2      	sublt	r2, r6, r3
 8006c54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c56:	bfb6      	itet	lt
 8006c58:	189b      	addlt	r3, r3, r2
 8006c5a:	1b9e      	subge	r6, r3, r6
 8006c5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	bfb8      	it	lt
 8006c62:	2600      	movlt	r6, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb7      	itett	lt
 8006c68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c70:	1a9d      	sublt	r5, r3, r2
 8006c72:	2300      	movlt	r3, #0
 8006c74:	e734      	b.n	8006ae0 <_dtoa_r+0x720>
 8006c76:	9e07      	ldr	r6, [sp, #28]
 8006c78:	9d04      	ldr	r5, [sp, #16]
 8006c7a:	9f08      	ldr	r7, [sp, #32]
 8006c7c:	e73b      	b.n	8006af6 <_dtoa_r+0x736>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	e767      	b.n	8006b52 <_dtoa_r+0x792>
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	dc18      	bgt.n	8006cba <_dtoa_r+0x8fa>
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	d115      	bne.n	8006cba <_dtoa_r+0x8fa>
 8006c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c92:	b993      	cbnz	r3, 8006cba <_dtoa_r+0x8fa>
 8006c94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	051b      	lsls	r3, r3, #20
 8006c9c:	b183      	cbz	r3, 8006cc0 <_dtoa_r+0x900>
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9b05      	ldr	r3, [sp, #20]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	f04f 0801 	mov.w	r8, #1
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f af6a 	bne.w	8006b8a <_dtoa_r+0x7ca>
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e76f      	b.n	8006b9a <_dtoa_r+0x7da>
 8006cba:	f04f 0800 	mov.w	r8, #0
 8006cbe:	e7f6      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	e7f4      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc4:	f43f af7d 	beq.w	8006bc2 <_dtoa_r+0x802>
 8006cc8:	4618      	mov	r0, r3
 8006cca:	301c      	adds	r0, #28
 8006ccc:	e772      	b.n	8006bb4 <_dtoa_r+0x7f4>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc37      	bgt.n	8006d44 <_dtoa_r+0x984>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dd34      	ble.n	8006d44 <_dtoa_r+0x984>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	9302      	str	r3, [sp, #8]
 8006cde:	9b02      	ldr	r3, [sp, #8]
 8006ce0:	b96b      	cbnz	r3, 8006cfe <_dtoa_r+0x93e>
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f9d4 	bl	8007094 <__multadd>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4606      	mov	r6, r0
 8006cf0:	ee18 0a10 	vmov	r0, s16
 8006cf4:	f000 fbee 	bl	80074d4 <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f73f adbb 	bgt.w	8006874 <_dtoa_r+0x4b4>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	9d01      	ldr	r5, [sp, #4]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f99f 	bl	8007050 <_Bfree>
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	f43f aea4 	beq.w	8006a60 <_dtoa_r+0x6a0>
 8006d18:	f1b8 0f00 	cmp.w	r8, #0
 8006d1c:	d005      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d1e:	45b8      	cmp	r8, r7
 8006d20:	d003      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d22:	4641      	mov	r1, r8
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 f993 	bl	8007050 <_Bfree>
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f98f 	bl	8007050 <_Bfree>
 8006d32:	e695      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006d34:	2600      	movs	r6, #0
 8006d36:	4637      	mov	r7, r6
 8006d38:	e7e1      	b.n	8006cfe <_dtoa_r+0x93e>
 8006d3a:	9700      	str	r7, [sp, #0]
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	e599      	b.n	8006874 <_dtoa_r+0x4b4>
 8006d40:	40240000 	.word	0x40240000
 8006d44:	9b08      	ldr	r3, [sp, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80ca 	beq.w	8006ee0 <_dtoa_r+0xb20>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	dd05      	ble.n	8006d60 <_dtoa_r+0x9a0>
 8006d54:	4639      	mov	r1, r7
 8006d56:	462a      	mov	r2, r5
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fb4b 	bl	80073f4 <__lshift>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	d05b      	beq.n	8006e1e <_dtoa_r+0xa5e>
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f931 	bl	8006fd0 <_Balloc>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <_dtoa_r+0x9be>
 8006d72:	4b87      	ldr	r3, [pc, #540]	; (8006f90 <_dtoa_r+0xbd0>)
 8006d74:	4602      	mov	r2, r0
 8006d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d7a:	f7ff bb3b 	b.w	80063f4 <_dtoa_r+0x34>
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	3202      	adds	r2, #2
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	f107 010c 	add.w	r1, r7, #12
 8006d88:	300c      	adds	r0, #12
 8006d8a:	f000 f913 	bl	8006fb4 <memcpy>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fb2e 	bl	80073f4 <__lshift>
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	f103 0901 	add.w	r9, r3, #1
 8006d9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	f00a 0301 	and.w	r3, sl, #1
 8006daa:	46b8      	mov	r8, r7
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	4631      	mov	r1, r6
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f7ff fa75 	bl	80062a4 <quorem>
 8006dba:	4641      	mov	r1, r8
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dc2:	ee18 0a10 	vmov	r0, s16
 8006dc6:	f000 fb85 	bl	80074d4 <__mcmp>
 8006dca:	463a      	mov	r2, r7
 8006dcc:	9003      	str	r0, [sp, #12]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fb9b 	bl	800750c <__mdiff>
 8006dd6:	68c2      	ldr	r2, [r0, #12]
 8006dd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ddc:	4605      	mov	r5, r0
 8006dde:	bb02      	cbnz	r2, 8006e22 <_dtoa_r+0xa62>
 8006de0:	4601      	mov	r1, r0
 8006de2:	ee18 0a10 	vmov	r0, s16
 8006de6:	f000 fb75 	bl	80074d4 <__mcmp>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4629      	mov	r1, r5
 8006dee:	4620      	mov	r0, r4
 8006df0:	9207      	str	r2, [sp, #28]
 8006df2:	f000 f92d 	bl	8007050 <_Bfree>
 8006df6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dfa:	ea43 0102 	orr.w	r1, r3, r2
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	430b      	orrs	r3, r1
 8006e02:	464d      	mov	r5, r9
 8006e04:	d10f      	bne.n	8006e26 <_dtoa_r+0xa66>
 8006e06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e0a:	d02a      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd02      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e18:	f88b a000 	strb.w	sl, [fp]
 8006e1c:	e775      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	e7ba      	b.n	8006d98 <_dtoa_r+0x9d8>
 8006e22:	2201      	movs	r2, #1
 8006e24:	e7e2      	b.n	8006dec <_dtoa_r+0xa2c>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db04      	blt.n	8006e36 <_dtoa_r+0xa76>
 8006e2c:	9906      	ldr	r1, [sp, #24]
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	9904      	ldr	r1, [sp, #16]
 8006e32:	430b      	orrs	r3, r1
 8006e34:	d122      	bne.n	8006e7c <_dtoa_r+0xabc>
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	ddee      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fad7 	bl	80073f4 <__lshift>
 8006e46:	4631      	mov	r1, r6
 8006e48:	ee08 0a10 	vmov	s16, r0
 8006e4c:	f000 fb42 	bl	80074d4 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dc03      	bgt.n	8006e5c <_dtoa_r+0xa9c>
 8006e54:	d1e0      	bne.n	8006e18 <_dtoa_r+0xa58>
 8006e56:	f01a 0f01 	tst.w	sl, #1
 8006e5a:	d0dd      	beq.n	8006e18 <_dtoa_r+0xa58>
 8006e5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e60:	d1d7      	bne.n	8006e12 <_dtoa_r+0xa52>
 8006e62:	2339      	movs	r3, #57	; 0x39
 8006e64:	f88b 3000 	strb.w	r3, [fp]
 8006e68:	462b      	mov	r3, r5
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e72:	2a39      	cmp	r2, #57	; 0x39
 8006e74:	d071      	beq.n	8006f5a <_dtoa_r+0xb9a>
 8006e76:	3201      	adds	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e746      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	dd07      	ble.n	8006e90 <_dtoa_r+0xad0>
 8006e80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e84:	d0ed      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e86:	f10a 0301 	add.w	r3, sl, #1
 8006e8a:	f88b 3000 	strb.w	r3, [fp]
 8006e8e:	e73c      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e96:	4599      	cmp	r9, r3
 8006e98:	d047      	beq.n	8006f2a <_dtoa_r+0xb6a>
 8006e9a:	ee18 1a10 	vmov	r1, s16
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f8f6 	bl	8007094 <__multadd>
 8006ea8:	45b8      	cmp	r8, r7
 8006eaa:	ee08 0a10 	vmov	s16, r0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	f04f 020a 	mov.w	r2, #10
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4620      	mov	r0, r4
 8006eba:	d106      	bne.n	8006eca <_dtoa_r+0xb0a>
 8006ebc:	f000 f8ea 	bl	8007094 <__multadd>
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	f109 0901 	add.w	r9, r9, #1
 8006ec8:	e772      	b.n	8006db0 <_dtoa_r+0x9f0>
 8006eca:	f000 f8e3 	bl	8007094 <__multadd>
 8006ece:	4639      	mov	r1, r7
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f8dc 	bl	8007094 <__multadd>
 8006edc:	4607      	mov	r7, r0
 8006ede:	e7f1      	b.n	8006ec4 <_dtoa_r+0xb04>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	9302      	str	r3, [sp, #8]
 8006ee4:	9d01      	ldr	r5, [sp, #4]
 8006ee6:	ee18 0a10 	vmov	r0, s16
 8006eea:	4631      	mov	r1, r6
 8006eec:	f7ff f9da 	bl	80062a4 <quorem>
 8006ef0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ef4:	9b01      	ldr	r3, [sp, #4]
 8006ef6:	f805 ab01 	strb.w	sl, [r5], #1
 8006efa:	1aea      	subs	r2, r5, r3
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	dd09      	ble.n	8006f16 <_dtoa_r+0xb56>
 8006f02:	ee18 1a10 	vmov	r1, s16
 8006f06:	2300      	movs	r3, #0
 8006f08:	220a      	movs	r2, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f8c2 	bl	8007094 <__multadd>
 8006f10:	ee08 0a10 	vmov	s16, r0
 8006f14:	e7e7      	b.n	8006ee6 <_dtoa_r+0xb26>
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfc8      	it	gt
 8006f1c:	461d      	movgt	r5, r3
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	bfd8      	it	le
 8006f22:	2501      	movle	r5, #1
 8006f24:	441d      	add	r5, r3
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa5f 	bl	80073f4 <__lshift>
 8006f36:	4631      	mov	r1, r6
 8006f38:	ee08 0a10 	vmov	s16, r0
 8006f3c:	f000 faca 	bl	80074d4 <__mcmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	dc91      	bgt.n	8006e68 <_dtoa_r+0xaa8>
 8006f44:	d102      	bne.n	8006f4c <_dtoa_r+0xb8c>
 8006f46:	f01a 0f01 	tst.w	sl, #1
 8006f4a:	d18d      	bne.n	8006e68 <_dtoa_r+0xaa8>
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f54:	2a30      	cmp	r2, #48	; 0x30
 8006f56:	d0fa      	beq.n	8006f4e <_dtoa_r+0xb8e>
 8006f58:	e6d7      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d184      	bne.n	8006e6a <_dtoa_r+0xaaa>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2331      	movs	r3, #49	; 0x31
 8006f68:	7013      	strb	r3, [r2, #0]
 8006f6a:	e6ce      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <_dtoa_r+0xbd4>)
 8006f6e:	f7ff ba95 	b.w	800649c <_dtoa_r+0xdc>
 8006f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f aa6e 	bne.w	8006456 <_dtoa_r+0x96>
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <_dtoa_r+0xbd8>)
 8006f7c:	f7ff ba8e 	b.w	800649c <_dtoa_r+0xdc>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dcae      	bgt.n	8006ee4 <_dtoa_r+0xb24>
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f73f aea8 	bgt.w	8006cde <_dtoa_r+0x91e>
 8006f8e:	e7a9      	b.n	8006ee4 <_dtoa_r+0xb24>
 8006f90:	080089cb 	.word	0x080089cb
 8006f94:	08008928 	.word	0x08008928
 8006f98:	0800894c 	.word	0x0800894c

08006f9c <_localeconv_r>:
 8006f9c:	4800      	ldr	r0, [pc, #0]	; (8006fa0 <_localeconv_r+0x4>)
 8006f9e:	4770      	bx	lr
 8006fa0:	20000168 	.word	0x20000168

08006fa4 <malloc>:
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <malloc+0xc>)
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f000 bc17 	b.w	80077dc <_malloc_r>
 8006fae:	bf00      	nop
 8006fb0:	20000014 	.word	0x20000014

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <_Balloc>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	b976      	cbnz	r6, 8006ff8 <_Balloc+0x28>
 8006fda:	2010      	movs	r0, #16
 8006fdc:	f7ff ffe2 	bl	8006fa4 <malloc>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe4:	b920      	cbnz	r0, 8006ff0 <_Balloc+0x20>
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <_Balloc+0x78>)
 8006fe8:	4818      	ldr	r0, [pc, #96]	; (800704c <_Balloc+0x7c>)
 8006fea:	2166      	movs	r1, #102	; 0x66
 8006fec:	f000 fdd6 	bl	8007b9c <__assert_func>
 8006ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff4:	6006      	str	r6, [r0, #0]
 8006ff6:	60c6      	str	r6, [r0, #12]
 8006ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ffa:	68f3      	ldr	r3, [r6, #12]
 8006ffc:	b183      	cbz	r3, 8007020 <_Balloc+0x50>
 8006ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007006:	b9b8      	cbnz	r0, 8007038 <_Balloc+0x68>
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f605 	lsl.w	r6, r1, r5
 800700e:	1d72      	adds	r2, r6, #5
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb60 	bl	80076d8 <_calloc_r>
 8007018:	b160      	cbz	r0, 8007034 <_Balloc+0x64>
 800701a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800701e:	e00e      	b.n	800703e <_Balloc+0x6e>
 8007020:	2221      	movs	r2, #33	; 0x21
 8007022:	2104      	movs	r1, #4
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fb57 	bl	80076d8 <_calloc_r>
 800702a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800702c:	60f0      	str	r0, [r6, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <_Balloc+0x2e>
 8007034:	2000      	movs	r0, #0
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	6802      	ldr	r2, [r0, #0]
 800703a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800703e:	2300      	movs	r3, #0
 8007040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007044:	e7f7      	b.n	8007036 <_Balloc+0x66>
 8007046:	bf00      	nop
 8007048:	08008959 	.word	0x08008959
 800704c:	080089dc 	.word	0x080089dc

08007050 <_Bfree>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b976      	cbnz	r6, 8007078 <_Bfree+0x28>
 800705a:	2010      	movs	r0, #16
 800705c:	f7ff ffa2 	bl	8006fa4 <malloc>
 8007060:	4602      	mov	r2, r0
 8007062:	6268      	str	r0, [r5, #36]	; 0x24
 8007064:	b920      	cbnz	r0, 8007070 <_Bfree+0x20>
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <_Bfree+0x3c>)
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <_Bfree+0x40>)
 800706a:	218a      	movs	r1, #138	; 0x8a
 800706c:	f000 fd96 	bl	8007b9c <__assert_func>
 8007070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007074:	6006      	str	r6, [r0, #0]
 8007076:	60c6      	str	r6, [r0, #12]
 8007078:	b13c      	cbz	r4, 800708a <_Bfree+0x3a>
 800707a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007084:	6021      	str	r1, [r4, #0]
 8007086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	08008959 	.word	0x08008959
 8007090:	080089dc 	.word	0x080089dc

08007094 <__multadd>:
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	690d      	ldr	r5, [r1, #16]
 800709a:	4607      	mov	r7, r0
 800709c:	460c      	mov	r4, r1
 800709e:	461e      	mov	r6, r3
 80070a0:	f101 0c14 	add.w	ip, r1, #20
 80070a4:	2000      	movs	r0, #0
 80070a6:	f8dc 3000 	ldr.w	r3, [ip]
 80070aa:	b299      	uxth	r1, r3
 80070ac:	fb02 6101 	mla	r1, r2, r1, r6
 80070b0:	0c1e      	lsrs	r6, r3, #16
 80070b2:	0c0b      	lsrs	r3, r1, #16
 80070b4:	fb02 3306 	mla	r3, r2, r6, r3
 80070b8:	b289      	uxth	r1, r1
 80070ba:	3001      	adds	r0, #1
 80070bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070c0:	4285      	cmp	r5, r0
 80070c2:	f84c 1b04 	str.w	r1, [ip], #4
 80070c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ca:	dcec      	bgt.n	80070a6 <__multadd+0x12>
 80070cc:	b30e      	cbz	r6, 8007112 <__multadd+0x7e>
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	42ab      	cmp	r3, r5
 80070d2:	dc19      	bgt.n	8007108 <__multadd+0x74>
 80070d4:	6861      	ldr	r1, [r4, #4]
 80070d6:	4638      	mov	r0, r7
 80070d8:	3101      	adds	r1, #1
 80070da:	f7ff ff79 	bl	8006fd0 <_Balloc>
 80070de:	4680      	mov	r8, r0
 80070e0:	b928      	cbnz	r0, 80070ee <__multadd+0x5a>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <__multadd+0x84>)
 80070e6:	480d      	ldr	r0, [pc, #52]	; (800711c <__multadd+0x88>)
 80070e8:	21b5      	movs	r1, #181	; 0xb5
 80070ea:	f000 fd57 	bl	8007b9c <__assert_func>
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	3202      	adds	r2, #2
 80070f2:	f104 010c 	add.w	r1, r4, #12
 80070f6:	0092      	lsls	r2, r2, #2
 80070f8:	300c      	adds	r0, #12
 80070fa:	f7ff ff5b 	bl	8006fb4 <memcpy>
 80070fe:	4621      	mov	r1, r4
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ffa5 	bl	8007050 <_Bfree>
 8007106:	4644      	mov	r4, r8
 8007108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800710c:	3501      	adds	r5, #1
 800710e:	615e      	str	r6, [r3, #20]
 8007110:	6125      	str	r5, [r4, #16]
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	080089cb 	.word	0x080089cb
 800711c:	080089dc 	.word	0x080089dc

08007120 <__hi0bits>:
 8007120:	0c03      	lsrs	r3, r0, #16
 8007122:	041b      	lsls	r3, r3, #16
 8007124:	b9d3      	cbnz	r3, 800715c <__hi0bits+0x3c>
 8007126:	0400      	lsls	r0, r0, #16
 8007128:	2310      	movs	r3, #16
 800712a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800712e:	bf04      	itt	eq
 8007130:	0200      	lsleq	r0, r0, #8
 8007132:	3308      	addeq	r3, #8
 8007134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007138:	bf04      	itt	eq
 800713a:	0100      	lsleq	r0, r0, #4
 800713c:	3304      	addeq	r3, #4
 800713e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007142:	bf04      	itt	eq
 8007144:	0080      	lsleq	r0, r0, #2
 8007146:	3302      	addeq	r3, #2
 8007148:	2800      	cmp	r0, #0
 800714a:	db05      	blt.n	8007158 <__hi0bits+0x38>
 800714c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007150:	f103 0301 	add.w	r3, r3, #1
 8007154:	bf08      	it	eq
 8007156:	2320      	moveq	r3, #32
 8007158:	4618      	mov	r0, r3
 800715a:	4770      	bx	lr
 800715c:	2300      	movs	r3, #0
 800715e:	e7e4      	b.n	800712a <__hi0bits+0xa>

08007160 <__lo0bits>:
 8007160:	6803      	ldr	r3, [r0, #0]
 8007162:	f013 0207 	ands.w	r2, r3, #7
 8007166:	4601      	mov	r1, r0
 8007168:	d00b      	beq.n	8007182 <__lo0bits+0x22>
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d423      	bmi.n	80071b6 <__lo0bits+0x56>
 800716e:	0798      	lsls	r0, r3, #30
 8007170:	bf49      	itett	mi
 8007172:	085b      	lsrmi	r3, r3, #1
 8007174:	089b      	lsrpl	r3, r3, #2
 8007176:	2001      	movmi	r0, #1
 8007178:	600b      	strmi	r3, [r1, #0]
 800717a:	bf5c      	itt	pl
 800717c:	600b      	strpl	r3, [r1, #0]
 800717e:	2002      	movpl	r0, #2
 8007180:	4770      	bx	lr
 8007182:	b298      	uxth	r0, r3
 8007184:	b9a8      	cbnz	r0, 80071b2 <__lo0bits+0x52>
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	2010      	movs	r0, #16
 800718a:	b2da      	uxtb	r2, r3
 800718c:	b90a      	cbnz	r2, 8007192 <__lo0bits+0x32>
 800718e:	3008      	adds	r0, #8
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	071a      	lsls	r2, r3, #28
 8007194:	bf04      	itt	eq
 8007196:	091b      	lsreq	r3, r3, #4
 8007198:	3004      	addeq	r0, #4
 800719a:	079a      	lsls	r2, r3, #30
 800719c:	bf04      	itt	eq
 800719e:	089b      	lsreq	r3, r3, #2
 80071a0:	3002      	addeq	r0, #2
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d403      	bmi.n	80071ae <__lo0bits+0x4e>
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	f100 0001 	add.w	r0, r0, #1
 80071ac:	d005      	beq.n	80071ba <__lo0bits+0x5a>
 80071ae:	600b      	str	r3, [r1, #0]
 80071b0:	4770      	bx	lr
 80071b2:	4610      	mov	r0, r2
 80071b4:	e7e9      	b.n	800718a <__lo0bits+0x2a>
 80071b6:	2000      	movs	r0, #0
 80071b8:	4770      	bx	lr
 80071ba:	2020      	movs	r0, #32
 80071bc:	4770      	bx	lr
	...

080071c0 <__i2b>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	2101      	movs	r1, #1
 80071c6:	f7ff ff03 	bl	8006fd0 <_Balloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	b928      	cbnz	r0, 80071da <__i2b+0x1a>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <__i2b+0x24>)
 80071d0:	4805      	ldr	r0, [pc, #20]	; (80071e8 <__i2b+0x28>)
 80071d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071d6:	f000 fce1 	bl	8007b9c <__assert_func>
 80071da:	2301      	movs	r3, #1
 80071dc:	6144      	str	r4, [r0, #20]
 80071de:	6103      	str	r3, [r0, #16]
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	080089cb 	.word	0x080089cb
 80071e8:	080089dc 	.word	0x080089dc

080071ec <__multiply>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4691      	mov	r9, r2
 80071f2:	690a      	ldr	r2, [r1, #16]
 80071f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bfb8      	it	lt
 80071fc:	460b      	movlt	r3, r1
 80071fe:	460c      	mov	r4, r1
 8007200:	bfbc      	itt	lt
 8007202:	464c      	movlt	r4, r9
 8007204:	4699      	movlt	r9, r3
 8007206:	6927      	ldr	r7, [r4, #16]
 8007208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	eb07 060a 	add.w	r6, r7, sl
 8007214:	42b3      	cmp	r3, r6
 8007216:	b085      	sub	sp, #20
 8007218:	bfb8      	it	lt
 800721a:	3101      	addlt	r1, #1
 800721c:	f7ff fed8 	bl	8006fd0 <_Balloc>
 8007220:	b930      	cbnz	r0, 8007230 <__multiply+0x44>
 8007222:	4602      	mov	r2, r0
 8007224:	4b44      	ldr	r3, [pc, #272]	; (8007338 <__multiply+0x14c>)
 8007226:	4845      	ldr	r0, [pc, #276]	; (800733c <__multiply+0x150>)
 8007228:	f240 115d 	movw	r1, #349	; 0x15d
 800722c:	f000 fcb6 	bl	8007b9c <__assert_func>
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007238:	462b      	mov	r3, r5
 800723a:	2200      	movs	r2, #0
 800723c:	4543      	cmp	r3, r8
 800723e:	d321      	bcc.n	8007284 <__multiply+0x98>
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007248:	f109 0314 	add.w	r3, r9, #20
 800724c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	1b3a      	subs	r2, r7, r4
 8007254:	3a15      	subs	r2, #21
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	3204      	adds	r2, #4
 800725c:	f104 0115 	add.w	r1, r4, #21
 8007260:	428f      	cmp	r7, r1
 8007262:	bf38      	it	cc
 8007264:	2204      	movcc	r2, #4
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9a02      	ldr	r2, [sp, #8]
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d80c      	bhi.n	800728a <__multiply+0x9e>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd03      	ble.n	800727c <__multiply+0x90>
 8007274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007278:	2b00      	cmp	r3, #0
 800727a:	d05a      	beq.n	8007332 <__multiply+0x146>
 800727c:	6106      	str	r6, [r0, #16]
 800727e:	b005      	add	sp, #20
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	f843 2b04 	str.w	r2, [r3], #4
 8007288:	e7d8      	b.n	800723c <__multiply+0x50>
 800728a:	f8b3 a000 	ldrh.w	sl, [r3]
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	d024      	beq.n	80072de <__multiply+0xf2>
 8007294:	f104 0e14 	add.w	lr, r4, #20
 8007298:	46a9      	mov	r9, r5
 800729a:	f04f 0c00 	mov.w	ip, #0
 800729e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072a2:	f8d9 1000 	ldr.w	r1, [r9]
 80072a6:	fa1f fb82 	uxth.w	fp, r2
 80072aa:	b289      	uxth	r1, r1
 80072ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80072b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	4461      	add	r1, ip
 80072ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072be:	fb0a c20b 	mla	r2, sl, fp, ip
 80072c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072c6:	b289      	uxth	r1, r1
 80072c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072cc:	4577      	cmp	r7, lr
 80072ce:	f849 1b04 	str.w	r1, [r9], #4
 80072d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072d6:	d8e2      	bhi.n	800729e <__multiply+0xb2>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	f845 c002 	str.w	ip, [r5, r2]
 80072de:	9a03      	ldr	r2, [sp, #12]
 80072e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e4:	3304      	adds	r3, #4
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d020      	beq.n	800732e <__multiply+0x142>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	f104 0c14 	add.w	ip, r4, #20
 80072f2:	46ae      	mov	lr, r5
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	f8bc b000 	ldrh.w	fp, [ip]
 80072fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4492      	add	sl, r2
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800730c:	f84e 1b04 	str.w	r1, [lr], #4
 8007310:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007314:	f8be 1000 	ldrh.w	r1, [lr]
 8007318:	0c12      	lsrs	r2, r2, #16
 800731a:	fb09 1102 	mla	r1, r9, r2, r1
 800731e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007322:	4567      	cmp	r7, ip
 8007324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007328:	d8e6      	bhi.n	80072f8 <__multiply+0x10c>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	50a9      	str	r1, [r5, r2]
 800732e:	3504      	adds	r5, #4
 8007330:	e79a      	b.n	8007268 <__multiply+0x7c>
 8007332:	3e01      	subs	r6, #1
 8007334:	e79c      	b.n	8007270 <__multiply+0x84>
 8007336:	bf00      	nop
 8007338:	080089cb 	.word	0x080089cb
 800733c:	080089dc 	.word	0x080089dc

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	; (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe9b 	bl	8007094 <__multadd>
 800735e:	4607      	mov	r7, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fe1b 	bl	8006fa4 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	6270      	str	r0, [r6, #36]	; 0x24
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <__pow5mult+0xac>)
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <__pow5mult+0xb0>)
 8007378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800737c:	f000 fc0e 	bl	8007b9c <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	; 0x271
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff12 	bl	80071c0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff1a 	bl	80071ec <__multiply>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4680      	mov	r8, r0
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fe47 	bl	8007050 <_Bfree>
 80073c2:	4647      	mov	r7, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff ff0b 	bl	80071ec <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	08008b28 	.word	0x08008b28
 80073ec:	08008959 	.word	0x08008959
 80073f0:	080089dc 	.word	0x080089dc

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	4607      	mov	r7, r0
 8007406:	4691      	mov	r9, r2
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fddb 	bl	8006fd0 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <__lshift+0xd8>)
 8007422:	482b      	ldr	r0, [pc, #172]	; (80074d0 <__lshift+0xdc>)
 8007424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007428:	f000 fbb8 	bl	8007b9c <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db37      	blt.n	80074b2 <__lshift+0xbe>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007458:	d02f      	beq.n	80074ba <__lshift+0xc6>
 800745a:	f1c9 0e20 	rsb	lr, r9, #32
 800745e:	468a      	mov	sl, r1
 8007460:	f04f 0c00 	mov.w	ip, #0
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	fa02 f209 	lsl.w	r2, r2, r9
 800746a:	ea42 020c 	orr.w	r2, r2, ip
 800746e:	f84a 2b04 	str.w	r2, [sl], #4
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	4298      	cmp	r0, r3
 8007478:	fa22 fc0e 	lsr.w	ip, r2, lr
 800747c:	d8f2      	bhi.n	8007464 <__lshift+0x70>
 800747e:	1b03      	subs	r3, r0, r4
 8007480:	3b15      	subs	r3, #21
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	3304      	adds	r3, #4
 8007488:	f104 0215 	add.w	r2, r4, #21
 800748c:	4290      	cmp	r0, r2
 800748e:	bf38      	it	cc
 8007490:	2304      	movcc	r3, #4
 8007492:	f841 c003 	str.w	ip, [r1, r3]
 8007496:	f1bc 0f00 	cmp.w	ip, #0
 800749a:	d001      	beq.n	80074a0 <__lshift+0xac>
 800749c:	f108 0602 	add.w	r6, r8, #2
 80074a0:	3e01      	subs	r6, #1
 80074a2:	4638      	mov	r0, r7
 80074a4:	612e      	str	r6, [r5, #16]
 80074a6:	4621      	mov	r1, r4
 80074a8:	f7ff fdd2 	bl	8007050 <_Bfree>
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074b6:	3301      	adds	r3, #1
 80074b8:	e7c1      	b.n	800743e <__lshift+0x4a>
 80074ba:	3904      	subs	r1, #4
 80074bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80074c4:	4298      	cmp	r0, r3
 80074c6:	d8f9      	bhi.n	80074bc <__lshift+0xc8>
 80074c8:	e7ea      	b.n	80074a0 <__lshift+0xac>
 80074ca:	bf00      	nop
 80074cc:	080089cb 	.word	0x080089cb
 80074d0:	080089dc 	.word	0x080089dc

080074d4 <__mcmp>:
 80074d4:	b530      	push	{r4, r5, lr}
 80074d6:	6902      	ldr	r2, [r0, #16]
 80074d8:	690c      	ldr	r4, [r1, #16]
 80074da:	1b12      	subs	r2, r2, r4
 80074dc:	d10e      	bne.n	80074fc <__mcmp+0x28>
 80074de:	f100 0314 	add.w	r3, r0, #20
 80074e2:	3114      	adds	r1, #20
 80074e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074f4:	42a5      	cmp	r5, r4
 80074f6:	d003      	beq.n	8007500 <__mcmp+0x2c>
 80074f8:	d305      	bcc.n	8007506 <__mcmp+0x32>
 80074fa:	2201      	movs	r2, #1
 80074fc:	4610      	mov	r0, r2
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	4283      	cmp	r3, r0
 8007502:	d3f3      	bcc.n	80074ec <__mcmp+0x18>
 8007504:	e7fa      	b.n	80074fc <__mcmp+0x28>
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	e7f7      	b.n	80074fc <__mcmp+0x28>

0800750c <__mdiff>:
 800750c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	4606      	mov	r6, r0
 8007514:	4611      	mov	r1, r2
 8007516:	4620      	mov	r0, r4
 8007518:	4690      	mov	r8, r2
 800751a:	f7ff ffdb 	bl	80074d4 <__mcmp>
 800751e:	1e05      	subs	r5, r0, #0
 8007520:	d110      	bne.n	8007544 <__mdiff+0x38>
 8007522:	4629      	mov	r1, r5
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fd53 	bl	8006fd0 <_Balloc>
 800752a:	b930      	cbnz	r0, 800753a <__mdiff+0x2e>
 800752c:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <__mdiff+0x10c>)
 800752e:	4602      	mov	r2, r0
 8007530:	f240 2132 	movw	r1, #562	; 0x232
 8007534:	4839      	ldr	r0, [pc, #228]	; (800761c <__mdiff+0x110>)
 8007536:	f000 fb31 	bl	8007b9c <__assert_func>
 800753a:	2301      	movs	r3, #1
 800753c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	bfa4      	itt	ge
 8007546:	4643      	movge	r3, r8
 8007548:	46a0      	movge	r8, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007550:	bfa6      	itte	ge
 8007552:	461c      	movge	r4, r3
 8007554:	2500      	movge	r5, #0
 8007556:	2501      	movlt	r5, #1
 8007558:	f7ff fd3a 	bl	8006fd0 <_Balloc>
 800755c:	b920      	cbnz	r0, 8007568 <__mdiff+0x5c>
 800755e:	4b2e      	ldr	r3, [pc, #184]	; (8007618 <__mdiff+0x10c>)
 8007560:	4602      	mov	r2, r0
 8007562:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007566:	e7e5      	b.n	8007534 <__mdiff+0x28>
 8007568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800756c:	6926      	ldr	r6, [r4, #16]
 800756e:	60c5      	str	r5, [r0, #12]
 8007570:	f104 0914 	add.w	r9, r4, #20
 8007574:	f108 0514 	add.w	r5, r8, #20
 8007578:	f100 0e14 	add.w	lr, r0, #20
 800757c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007584:	f108 0210 	add.w	r2, r8, #16
 8007588:	46f2      	mov	sl, lr
 800758a:	2100      	movs	r1, #0
 800758c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007594:	fa1f f883 	uxth.w	r8, r3
 8007598:	fa11 f18b 	uxtah	r1, r1, fp
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	eba1 0808 	sub.w	r8, r1, r8
 80075a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075aa:	fa1f f888 	uxth.w	r8, r8
 80075ae:	1419      	asrs	r1, r3, #16
 80075b0:	454e      	cmp	r6, r9
 80075b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075b6:	f84a 3b04 	str.w	r3, [sl], #4
 80075ba:	d8e7      	bhi.n	800758c <__mdiff+0x80>
 80075bc:	1b33      	subs	r3, r6, r4
 80075be:	3b15      	subs	r3, #21
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	3304      	adds	r3, #4
 80075c6:	3415      	adds	r4, #21
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	bf38      	it	cc
 80075cc:	2304      	movcc	r3, #4
 80075ce:	441d      	add	r5, r3
 80075d0:	4473      	add	r3, lr
 80075d2:	469e      	mov	lr, r3
 80075d4:	462e      	mov	r6, r5
 80075d6:	4566      	cmp	r6, ip
 80075d8:	d30e      	bcc.n	80075f8 <__mdiff+0xec>
 80075da:	f10c 0203 	add.w	r2, ip, #3
 80075de:	1b52      	subs	r2, r2, r5
 80075e0:	f022 0203 	bic.w	r2, r2, #3
 80075e4:	3d03      	subs	r5, #3
 80075e6:	45ac      	cmp	ip, r5
 80075e8:	bf38      	it	cc
 80075ea:	2200      	movcc	r2, #0
 80075ec:	441a      	add	r2, r3
 80075ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075f2:	b17b      	cbz	r3, 8007614 <__mdiff+0x108>
 80075f4:	6107      	str	r7, [r0, #16]
 80075f6:	e7a3      	b.n	8007540 <__mdiff+0x34>
 80075f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80075fc:	fa11 f288 	uxtah	r2, r1, r8
 8007600:	1414      	asrs	r4, r2, #16
 8007602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007606:	b292      	uxth	r2, r2
 8007608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800760c:	f84e 2b04 	str.w	r2, [lr], #4
 8007610:	1421      	asrs	r1, r4, #16
 8007612:	e7e0      	b.n	80075d6 <__mdiff+0xca>
 8007614:	3f01      	subs	r7, #1
 8007616:	e7ea      	b.n	80075ee <__mdiff+0xe2>
 8007618:	080089cb 	.word	0x080089cb
 800761c:	080089dc 	.word	0x080089dc

08007620 <__d2b>:
 8007620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4689      	mov	r9, r1
 8007626:	2101      	movs	r1, #1
 8007628:	ec57 6b10 	vmov	r6, r7, d0
 800762c:	4690      	mov	r8, r2
 800762e:	f7ff fccf 	bl	8006fd0 <_Balloc>
 8007632:	4604      	mov	r4, r0
 8007634:	b930      	cbnz	r0, 8007644 <__d2b+0x24>
 8007636:	4602      	mov	r2, r0
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <__d2b+0xb0>)
 800763a:	4826      	ldr	r0, [pc, #152]	; (80076d4 <__d2b+0xb4>)
 800763c:	f240 310a 	movw	r1, #778	; 0x30a
 8007640:	f000 faac 	bl	8007b9c <__assert_func>
 8007644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800764c:	bb35      	cbnz	r5, 800769c <__d2b+0x7c>
 800764e:	2e00      	cmp	r6, #0
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	d028      	beq.n	80076a6 <__d2b+0x86>
 8007654:	4668      	mov	r0, sp
 8007656:	9600      	str	r6, [sp, #0]
 8007658:	f7ff fd82 	bl	8007160 <__lo0bits>
 800765c:	9900      	ldr	r1, [sp, #0]
 800765e:	b300      	cbz	r0, 80076a2 <__d2b+0x82>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	f1c0 0320 	rsb	r3, r0, #32
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	430b      	orrs	r3, r1
 800766c:	40c2      	lsrs	r2, r0
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	61a3      	str	r3, [r4, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2202      	movne	r2, #2
 800767c:	2201      	moveq	r2, #1
 800767e:	6122      	str	r2, [r4, #16]
 8007680:	b1d5      	cbz	r5, 80076b8 <__d2b+0x98>
 8007682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007686:	4405      	add	r5, r0
 8007688:	f8c9 5000 	str.w	r5, [r9]
 800768c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007690:	f8c8 0000 	str.w	r0, [r8]
 8007694:	4620      	mov	r0, r4
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800769c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a0:	e7d5      	b.n	800764e <__d2b+0x2e>
 80076a2:	6161      	str	r1, [r4, #20]
 80076a4:	e7e5      	b.n	8007672 <__d2b+0x52>
 80076a6:	a801      	add	r0, sp, #4
 80076a8:	f7ff fd5a 	bl	8007160 <__lo0bits>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	6122      	str	r2, [r4, #16]
 80076b4:	3020      	adds	r0, #32
 80076b6:	e7e3      	b.n	8007680 <__d2b+0x60>
 80076b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c0:	f8c9 0000 	str.w	r0, [r9]
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f7ff fd2b 	bl	8007120 <__hi0bits>
 80076ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076ce:	e7df      	b.n	8007690 <__d2b+0x70>
 80076d0:	080089cb 	.word	0x080089cb
 80076d4:	080089dc 	.word	0x080089dc

080076d8 <_calloc_r>:
 80076d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076da:	fba1 2402 	umull	r2, r4, r1, r2
 80076de:	b94c      	cbnz	r4, 80076f4 <_calloc_r+0x1c>
 80076e0:	4611      	mov	r1, r2
 80076e2:	9201      	str	r2, [sp, #4]
 80076e4:	f000 f87a 	bl	80077dc <_malloc_r>
 80076e8:	9a01      	ldr	r2, [sp, #4]
 80076ea:	4605      	mov	r5, r0
 80076ec:	b930      	cbnz	r0, 80076fc <_calloc_r+0x24>
 80076ee:	4628      	mov	r0, r5
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	220c      	movs	r2, #12
 80076f6:	6002      	str	r2, [r0, #0]
 80076f8:	2500      	movs	r5, #0
 80076fa:	e7f8      	b.n	80076ee <_calloc_r+0x16>
 80076fc:	4621      	mov	r1, r4
 80076fe:	f7fe f93f 	bl	8005980 <memset>
 8007702:	e7f4      	b.n	80076ee <_calloc_r+0x16>

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d044      	beq.n	8007794 <_free_r+0x90>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f1a1 0404 	sub.w	r4, r1, #4
 8007716:	bfb8      	it	lt
 8007718:	18e4      	addlt	r4, r4, r3
 800771a:	f000 fa9b 	bl	8007c54 <__malloc_lock>
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x30>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007730:	f000 ba96 	b.w	8007c60 <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x46>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x22>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x50>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x46>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1855      	adds	r5, r2, r1
 8007758:	42a5      	cmp	r5, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x70>
 800775c:	6824      	ldr	r4, [r4, #0]
 800775e:	4421      	add	r1, r4
 8007760:	1854      	adds	r4, r2, r1
 8007762:	42a3      	cmp	r3, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x26>
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	4421      	add	r1, r4
 8007770:	6011      	str	r1, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x26>
 8007774:	d902      	bls.n	800777c <_free_r+0x78>
 8007776:	230c      	movs	r3, #12
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x26>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1949      	addeq	r1, r1, r5
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x26>
 8007794:	b003      	add	sp, #12
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	200003c8 	.word	0x200003c8

0800779c <sbrk_aligned>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4e0e      	ldr	r6, [pc, #56]	; (80077d8 <sbrk_aligned+0x3c>)
 80077a0:	460c      	mov	r4, r1
 80077a2:	6831      	ldr	r1, [r6, #0]
 80077a4:	4605      	mov	r5, r0
 80077a6:	b911      	cbnz	r1, 80077ae <sbrk_aligned+0x12>
 80077a8:	f000 f9e8 	bl	8007b7c <_sbrk_r>
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f9e3 	bl	8007b7c <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d00a      	beq.n	80077d0 <sbrk_aligned+0x34>
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d007      	beq.n	80077d4 <sbrk_aligned+0x38>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f9d8 	bl	8007b7c <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d101      	bne.n	80077d4 <sbrk_aligned+0x38>
 80077d0:	f04f 34ff 	mov.w	r4, #4294967295
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	200003cc 	.word	0x200003cc

080077dc <_malloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	1ccd      	adds	r5, r1, #3
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	4607      	mov	r7, r0
 80077f2:	db01      	blt.n	80077f8 <_malloc_r+0x1c>
 80077f4:	42a9      	cmp	r1, r5
 80077f6:	d905      	bls.n	8007804 <_malloc_r+0x28>
 80077f8:	230c      	movs	r3, #12
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	2600      	movs	r6, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	4e2e      	ldr	r6, [pc, #184]	; (80078c0 <_malloc_r+0xe4>)
 8007806:	f000 fa25 	bl	8007c54 <__malloc_lock>
 800780a:	6833      	ldr	r3, [r6, #0]
 800780c:	461c      	mov	r4, r3
 800780e:	bb34      	cbnz	r4, 800785e <_malloc_r+0x82>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ffc2 	bl	800779c <sbrk_aligned>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	4604      	mov	r4, r0
 800781c:	d14d      	bne.n	80078ba <_malloc_r+0xde>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	4626      	mov	r6, r4
 8007822:	2e00      	cmp	r6, #0
 8007824:	d140      	bne.n	80078a8 <_malloc_r+0xcc>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4631      	mov	r1, r6
 800782a:	4638      	mov	r0, r7
 800782c:	eb04 0803 	add.w	r8, r4, r3
 8007830:	f000 f9a4 	bl	8007b7c <_sbrk_r>
 8007834:	4580      	cmp	r8, r0
 8007836:	d13a      	bne.n	80078ae <_malloc_r+0xd2>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	3503      	adds	r5, #3
 800783c:	1a6d      	subs	r5, r5, r1
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	4629      	mov	r1, r5
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ffa5 	bl	800779c <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d02b      	beq.n	80078ae <_malloc_r+0xd2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	e00e      	b.n	800787c <_malloc_r+0xa0>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	1b52      	subs	r2, r2, r5
 8007862:	d41e      	bmi.n	80078a2 <_malloc_r+0xc6>
 8007864:	2a0b      	cmp	r2, #11
 8007866:	d916      	bls.n	8007896 <_malloc_r+0xba>
 8007868:	1961      	adds	r1, r4, r5
 800786a:	42a3      	cmp	r3, r4
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	bf18      	it	ne
 8007870:	6059      	strne	r1, [r3, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	bf08      	it	eq
 8007876:	6031      	streq	r1, [r6, #0]
 8007878:	5162      	str	r2, [r4, r5]
 800787a:	604b      	str	r3, [r1, #4]
 800787c:	4638      	mov	r0, r7
 800787e:	f104 060b 	add.w	r6, r4, #11
 8007882:	f000 f9ed 	bl	8007c60 <__malloc_unlock>
 8007886:	f026 0607 	bic.w	r6, r6, #7
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	1af2      	subs	r2, r6, r3
 800788e:	d0b6      	beq.n	80077fe <_malloc_r+0x22>
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	50a3      	str	r3, [r4, r2]
 8007894:	e7b3      	b.n	80077fe <_malloc_r+0x22>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	bf0c      	ite	eq
 800789c:	6032      	streq	r2, [r6, #0]
 800789e:	605a      	strne	r2, [r3, #4]
 80078a0:	e7ec      	b.n	800787c <_malloc_r+0xa0>
 80078a2:	4623      	mov	r3, r4
 80078a4:	6864      	ldr	r4, [r4, #4]
 80078a6:	e7b2      	b.n	800780e <_malloc_r+0x32>
 80078a8:	4634      	mov	r4, r6
 80078aa:	6876      	ldr	r6, [r6, #4]
 80078ac:	e7b9      	b.n	8007822 <_malloc_r+0x46>
 80078ae:	230c      	movs	r3, #12
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4638      	mov	r0, r7
 80078b4:	f000 f9d4 	bl	8007c60 <__malloc_unlock>
 80078b8:	e7a1      	b.n	80077fe <_malloc_r+0x22>
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	e7de      	b.n	800787c <_malloc_r+0xa0>
 80078be:	bf00      	nop
 80078c0:	200003c8 	.word	0x200003c8

080078c4 <__ssputs_r>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	688e      	ldr	r6, [r1, #8]
 80078ca:	429e      	cmp	r6, r3
 80078cc:	4682      	mov	sl, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4690      	mov	r8, r2
 80078d2:	461f      	mov	r7, r3
 80078d4:	d838      	bhi.n	8007948 <__ssputs_r+0x84>
 80078d6:	898a      	ldrh	r2, [r1, #12]
 80078d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078dc:	d032      	beq.n	8007944 <__ssputs_r+0x80>
 80078de:	6825      	ldr	r5, [r4, #0]
 80078e0:	6909      	ldr	r1, [r1, #16]
 80078e2:	eba5 0901 	sub.w	r9, r5, r1
 80078e6:	6965      	ldr	r5, [r4, #20]
 80078e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f0:	3301      	adds	r3, #1
 80078f2:	444b      	add	r3, r9
 80078f4:	106d      	asrs	r5, r5, #1
 80078f6:	429d      	cmp	r5, r3
 80078f8:	bf38      	it	cc
 80078fa:	461d      	movcc	r5, r3
 80078fc:	0553      	lsls	r3, r2, #21
 80078fe:	d531      	bpl.n	8007964 <__ssputs_r+0xa0>
 8007900:	4629      	mov	r1, r5
 8007902:	f7ff ff6b 	bl	80077dc <_malloc_r>
 8007906:	4606      	mov	r6, r0
 8007908:	b950      	cbnz	r0, 8007920 <__ssputs_r+0x5c>
 800790a:	230c      	movs	r3, #12
 800790c:	f8ca 3000 	str.w	r3, [sl]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	6921      	ldr	r1, [r4, #16]
 8007922:	464a      	mov	r2, r9
 8007924:	f7ff fb46 	bl	8006fb4 <memcpy>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	6126      	str	r6, [r4, #16]
 8007936:	6165      	str	r5, [r4, #20]
 8007938:	444e      	add	r6, r9
 800793a:	eba5 0509 	sub.w	r5, r5, r9
 800793e:	6026      	str	r6, [r4, #0]
 8007940:	60a5      	str	r5, [r4, #8]
 8007942:	463e      	mov	r6, r7
 8007944:	42be      	cmp	r6, r7
 8007946:	d900      	bls.n	800794a <__ssputs_r+0x86>
 8007948:	463e      	mov	r6, r7
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	4632      	mov	r2, r6
 800794e:	4641      	mov	r1, r8
 8007950:	f000 f966 	bl	8007c20 <memmove>
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	1b9b      	subs	r3, r3, r6
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4433      	add	r3, r6
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	2000      	movs	r0, #0
 8007962:	e7db      	b.n	800791c <__ssputs_r+0x58>
 8007964:	462a      	mov	r2, r5
 8007966:	f000 f981 	bl	8007c6c <_realloc_r>
 800796a:	4606      	mov	r6, r0
 800796c:	2800      	cmp	r0, #0
 800796e:	d1e1      	bne.n	8007934 <__ssputs_r+0x70>
 8007970:	6921      	ldr	r1, [r4, #16]
 8007972:	4650      	mov	r0, sl
 8007974:	f7ff fec6 	bl	8007704 <_free_r>
 8007978:	e7c7      	b.n	800790a <__ssputs_r+0x46>
	...

0800797c <_svfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	4698      	mov	r8, r3
 8007982:	898b      	ldrh	r3, [r1, #12]
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	b09d      	sub	sp, #116	; 0x74
 8007988:	4607      	mov	r7, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4614      	mov	r4, r2
 800798e:	d50e      	bpl.n	80079ae <_svfiprintf_r+0x32>
 8007990:	690b      	ldr	r3, [r1, #16]
 8007992:	b963      	cbnz	r3, 80079ae <_svfiprintf_r+0x32>
 8007994:	2140      	movs	r1, #64	; 0x40
 8007996:	f7ff ff21 	bl	80077dc <_malloc_r>
 800799a:	6028      	str	r0, [r5, #0]
 800799c:	6128      	str	r0, [r5, #16]
 800799e:	b920      	cbnz	r0, 80079aa <_svfiprintf_r+0x2e>
 80079a0:	230c      	movs	r3, #12
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e0d1      	b.n	8007b4e <_svfiprintf_r+0x1d2>
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	616b      	str	r3, [r5, #20]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	2320      	movs	r3, #32
 80079b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079bc:	2330      	movs	r3, #48	; 0x30
 80079be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b68 <_svfiprintf_r+0x1ec>
 80079c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c6:	f04f 0901 	mov.w	r9, #1
 80079ca:	4623      	mov	r3, r4
 80079cc:	469a      	mov	sl, r3
 80079ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d2:	b10a      	cbz	r2, 80079d8 <_svfiprintf_r+0x5c>
 80079d4:	2a25      	cmp	r2, #37	; 0x25
 80079d6:	d1f9      	bne.n	80079cc <_svfiprintf_r+0x50>
 80079d8:	ebba 0b04 	subs.w	fp, sl, r4
 80079dc:	d00b      	beq.n	80079f6 <_svfiprintf_r+0x7a>
 80079de:	465b      	mov	r3, fp
 80079e0:	4622      	mov	r2, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ff6d 	bl	80078c4 <__ssputs_r>
 80079ea:	3001      	adds	r0, #1
 80079ec:	f000 80aa 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 80079f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f2:	445a      	add	r2, fp
 80079f4:	9209      	str	r2, [sp, #36]	; 0x24
 80079f6:	f89a 3000 	ldrb.w	r3, [sl]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80a2 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0a:	f10a 0a01 	add.w	sl, sl, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a16:	931a      	str	r3, [sp, #104]	; 0x68
 8007a18:	4654      	mov	r4, sl
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a20:	4851      	ldr	r0, [pc, #324]	; (8007b68 <_svfiprintf_r+0x1ec>)
 8007a22:	f7f8 fbdd 	bl	80001e0 <memchr>
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	b9d8      	cbnz	r0, 8007a62 <_svfiprintf_r+0xe6>
 8007a2a:	06d0      	lsls	r0, r2, #27
 8007a2c:	bf44      	itt	mi
 8007a2e:	2320      	movmi	r3, #32
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a34:	0711      	lsls	r1, r2, #28
 8007a36:	bf44      	itt	mi
 8007a38:	232b      	movmi	r3, #43	; 0x2b
 8007a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b2a      	cmp	r3, #42	; 0x2a
 8007a44:	d015      	beq.n	8007a72 <_svfiprintf_r+0xf6>
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	4654      	mov	r4, sl
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f04f 0c0a 	mov.w	ip, #10
 8007a50:	4621      	mov	r1, r4
 8007a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a56:	3b30      	subs	r3, #48	; 0x30
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d94e      	bls.n	8007afa <_svfiprintf_r+0x17e>
 8007a5c:	b1b0      	cbz	r0, 8007a8c <_svfiprintf_r+0x110>
 8007a5e:	9207      	str	r2, [sp, #28]
 8007a60:	e014      	b.n	8007a8c <_svfiprintf_r+0x110>
 8007a62:	eba0 0308 	sub.w	r3, r0, r8
 8007a66:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	46a2      	mov	sl, r4
 8007a70:	e7d2      	b.n	8007a18 <_svfiprintf_r+0x9c>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	1d19      	adds	r1, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfbb      	ittet	lt
 8007a7e:	425b      	neglt	r3, r3
 8007a80:	f042 0202 	orrlt.w	r2, r2, #2
 8007a84:	9307      	strge	r3, [sp, #28]
 8007a86:	9307      	strlt	r3, [sp, #28]
 8007a88:	bfb8      	it	lt
 8007a8a:	9204      	strlt	r2, [sp, #16]
 8007a8c:	7823      	ldrb	r3, [r4, #0]
 8007a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a90:	d10c      	bne.n	8007aac <_svfiprintf_r+0x130>
 8007a92:	7863      	ldrb	r3, [r4, #1]
 8007a94:	2b2a      	cmp	r3, #42	; 0x2a
 8007a96:	d135      	bne.n	8007b04 <_svfiprintf_r+0x188>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9203      	str	r2, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfb8      	it	lt
 8007aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aa8:	3402      	adds	r4, #2
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b78 <_svfiprintf_r+0x1fc>
 8007ab0:	7821      	ldrb	r1, [r4, #0]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f8 fb93 	bl	80001e0 <memchr>
 8007aba:	b140      	cbz	r0, 8007ace <_svfiprintf_r+0x152>
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	4303      	orrs	r3, r0
 8007aca:	3401      	adds	r4, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4826      	ldr	r0, [pc, #152]	; (8007b6c <_svfiprintf_r+0x1f0>)
 8007ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad8:	2206      	movs	r2, #6
 8007ada:	f7f8 fb81 	bl	80001e0 <memchr>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d038      	beq.n	8007b54 <_svfiprintf_r+0x1d8>
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <_svfiprintf_r+0x1f4>)
 8007ae4:	bb1b      	cbnz	r3, 8007b2e <_svfiprintf_r+0x1b2>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	3308      	adds	r3, #8
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af4:	4433      	add	r3, r6
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	e767      	b.n	80079ca <_svfiprintf_r+0x4e>
 8007afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afe:	460c      	mov	r4, r1
 8007b00:	2001      	movs	r0, #1
 8007b02:	e7a5      	b.n	8007a50 <_svfiprintf_r+0xd4>
 8007b04:	2300      	movs	r3, #0
 8007b06:	3401      	adds	r4, #1
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4620      	mov	r0, r4
 8007b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b16:	3a30      	subs	r2, #48	; 0x30
 8007b18:	2a09      	cmp	r2, #9
 8007b1a:	d903      	bls.n	8007b24 <_svfiprintf_r+0x1a8>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0c5      	beq.n	8007aac <_svfiprintf_r+0x130>
 8007b20:	9105      	str	r1, [sp, #20]
 8007b22:	e7c3      	b.n	8007aac <_svfiprintf_r+0x130>
 8007b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e7f0      	b.n	8007b10 <_svfiprintf_r+0x194>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7fd ffc9 	bl	8005ad0 <_printf_float>
 8007b3e:	1c42      	adds	r2, r0, #1
 8007b40:	4606      	mov	r6, r0
 8007b42:	d1d6      	bne.n	8007af2 <_svfiprintf_r+0x176>
 8007b44:	89ab      	ldrh	r3, [r5, #12]
 8007b46:	065b      	lsls	r3, r3, #25
 8007b48:	f53f af2c 	bmi.w	80079a4 <_svfiprintf_r+0x28>
 8007b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4e:	b01d      	add	sp, #116	; 0x74
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	ab03      	add	r3, sp, #12
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7fe fa5a 	bl	8006018 <_printf_i>
 8007b64:	e7eb      	b.n	8007b3e <_svfiprintf_r+0x1c2>
 8007b66:	bf00      	nop
 8007b68:	08008b34 	.word	0x08008b34
 8007b6c:	08008b3e 	.word	0x08008b3e
 8007b70:	08005ad1 	.word	0x08005ad1
 8007b74:	080078c5 	.word	0x080078c5
 8007b78:	08008b3a 	.word	0x08008b3a

08007b7c <_sbrk_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_sbrk_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7fb f8f0 	bl	8002d6c <_sbrk>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_sbrk_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_sbrk_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	200003d0 	.word	0x200003d0

08007b9c <__assert_func>:
 8007b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <__assert_func+0x2c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	68d8      	ldr	r0, [r3, #12]
 8007baa:	b14c      	cbz	r4, 8007bc0 <__assert_func+0x24>
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <__assert_func+0x30>)
 8007bae:	9100      	str	r1, [sp, #0]
 8007bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb4:	4906      	ldr	r1, [pc, #24]	; (8007bd0 <__assert_func+0x34>)
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	f000 f80e 	bl	8007bd8 <fiprintf>
 8007bbc:	f000 faac 	bl	8008118 <abort>
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <__assert_func+0x38>)
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	e7f3      	b.n	8007bae <__assert_func+0x12>
 8007bc6:	bf00      	nop
 8007bc8:	20000014 	.word	0x20000014
 8007bcc:	08008b45 	.word	0x08008b45
 8007bd0:	08008b52 	.word	0x08008b52
 8007bd4:	08008b80 	.word	0x08008b80

08007bd8 <fiprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	b503      	push	{r0, r1, lr}
 8007bdc:	4601      	mov	r1, r0
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	4805      	ldr	r0, [pc, #20]	; (8007bf8 <fiprintf+0x20>)
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f000 f897 	bl	8007d1c <_vfiprintf_r>
 8007bee:	b002      	add	sp, #8
 8007bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	4770      	bx	lr
 8007bf8:	20000014 	.word	0x20000014

08007bfc <__ascii_mbtowc>:
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	b901      	cbnz	r1, 8007c02 <__ascii_mbtowc+0x6>
 8007c00:	a901      	add	r1, sp, #4
 8007c02:	b142      	cbz	r2, 8007c16 <__ascii_mbtowc+0x1a>
 8007c04:	b14b      	cbz	r3, 8007c1a <__ascii_mbtowc+0x1e>
 8007c06:	7813      	ldrb	r3, [r2, #0]
 8007c08:	600b      	str	r3, [r1, #0]
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	1e10      	subs	r0, r2, #0
 8007c0e:	bf18      	it	ne
 8007c10:	2001      	movne	r0, #1
 8007c12:	b002      	add	sp, #8
 8007c14:	4770      	bx	lr
 8007c16:	4610      	mov	r0, r2
 8007c18:	e7fb      	b.n	8007c12 <__ascii_mbtowc+0x16>
 8007c1a:	f06f 0001 	mvn.w	r0, #1
 8007c1e:	e7f8      	b.n	8007c12 <__ascii_mbtowc+0x16>

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4402      	add	r2, r0
 8007c42:	4601      	mov	r1, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_lock+0x8>)
 8007c56:	f000 bc1f 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	200003d4 	.word	0x200003d4

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f000 bc1a 	b.w	800849a <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	200003d4 	.word	0x200003d4

08007c6c <_realloc_r>:
 8007c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	4680      	mov	r8, r0
 8007c72:	4614      	mov	r4, r2
 8007c74:	460e      	mov	r6, r1
 8007c76:	b921      	cbnz	r1, 8007c82 <_realloc_r+0x16>
 8007c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	f7ff bdad 	b.w	80077dc <_malloc_r>
 8007c82:	b92a      	cbnz	r2, 8007c90 <_realloc_r+0x24>
 8007c84:	f7ff fd3e 	bl	8007704 <_free_r>
 8007c88:	4625      	mov	r5, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	f000 fc6a 	bl	8008568 <_malloc_usable_size_r>
 8007c94:	4284      	cmp	r4, r0
 8007c96:	4607      	mov	r7, r0
 8007c98:	d802      	bhi.n	8007ca0 <_realloc_r+0x34>
 8007c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c9e:	d812      	bhi.n	8007cc6 <_realloc_r+0x5a>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fd9a 	bl	80077dc <_malloc_r>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0ed      	beq.n	8007c8a <_realloc_r+0x1e>
 8007cae:	42bc      	cmp	r4, r7
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	bf28      	it	cs
 8007cb6:	463a      	movcs	r2, r7
 8007cb8:	f7ff f97c 	bl	8006fb4 <memcpy>
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7ff fd20 	bl	8007704 <_free_r>
 8007cc4:	e7e1      	b.n	8007c8a <_realloc_r+0x1e>
 8007cc6:	4635      	mov	r5, r6
 8007cc8:	e7df      	b.n	8007c8a <_realloc_r+0x1e>

08007cca <__sfputc_r>:
 8007cca:	6893      	ldr	r3, [r2, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	b410      	push	{r4}
 8007cd2:	6093      	str	r3, [r2, #8]
 8007cd4:	da08      	bge.n	8007ce8 <__sfputc_r+0x1e>
 8007cd6:	6994      	ldr	r4, [r2, #24]
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	db01      	blt.n	8007ce0 <__sfputc_r+0x16>
 8007cdc:	290a      	cmp	r1, #10
 8007cde:	d103      	bne.n	8007ce8 <__sfputc_r+0x1e>
 8007ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce4:	f000 b94a 	b.w	8007f7c <__swbuf_r>
 8007ce8:	6813      	ldr	r3, [r2, #0]
 8007cea:	1c58      	adds	r0, r3, #1
 8007cec:	6010      	str	r0, [r2, #0]
 8007cee:	7019      	strb	r1, [r3, #0]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <__sfputs_r>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	4614      	mov	r4, r2
 8007d00:	18d5      	adds	r5, r2, r3
 8007d02:	42ac      	cmp	r4, r5
 8007d04:	d101      	bne.n	8007d0a <__sfputs_r+0x12>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e007      	b.n	8007d1a <__sfputs_r+0x22>
 8007d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0e:	463a      	mov	r2, r7
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7ff ffda 	bl	8007cca <__sfputc_r>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d1f3      	bne.n	8007d02 <__sfputs_r+0xa>
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d1c <_vfiprintf_r>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	460d      	mov	r5, r1
 8007d22:	b09d      	sub	sp, #116	; 0x74
 8007d24:	4614      	mov	r4, r2
 8007d26:	4698      	mov	r8, r3
 8007d28:	4606      	mov	r6, r0
 8007d2a:	b118      	cbz	r0, 8007d34 <_vfiprintf_r+0x18>
 8007d2c:	6983      	ldr	r3, [r0, #24]
 8007d2e:	b90b      	cbnz	r3, 8007d34 <_vfiprintf_r+0x18>
 8007d30:	f000 fb14 	bl	800835c <__sinit>
 8007d34:	4b89      	ldr	r3, [pc, #548]	; (8007f5c <_vfiprintf_r+0x240>)
 8007d36:	429d      	cmp	r5, r3
 8007d38:	d11b      	bne.n	8007d72 <_vfiprintf_r+0x56>
 8007d3a:	6875      	ldr	r5, [r6, #4]
 8007d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3e:	07d9      	lsls	r1, r3, #31
 8007d40:	d405      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d402      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4a:	f000 fba5 	bl	8008498 <__retarget_lock_acquire_recursive>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	d501      	bpl.n	8007d58 <_vfiprintf_r+0x3c>
 8007d54:	692b      	ldr	r3, [r5, #16]
 8007d56:	b9eb      	cbnz	r3, 8007d94 <_vfiprintf_r+0x78>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f96e 	bl	800803c <__swsetup_r>
 8007d60:	b1c0      	cbz	r0, 8007d94 <_vfiprintf_r+0x78>
 8007d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d64:	07dc      	lsls	r4, r3, #31
 8007d66:	d50e      	bpl.n	8007d86 <_vfiprintf_r+0x6a>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b01d      	add	sp, #116	; 0x74
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d72:	4b7b      	ldr	r3, [pc, #492]	; (8007f60 <_vfiprintf_r+0x244>)
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d101      	bne.n	8007d7c <_vfiprintf_r+0x60>
 8007d78:	68b5      	ldr	r5, [r6, #8]
 8007d7a:	e7df      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d7c:	4b79      	ldr	r3, [pc, #484]	; (8007f64 <_vfiprintf_r+0x248>)
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	bf08      	it	eq
 8007d82:	68f5      	ldreq	r5, [r6, #12]
 8007d84:	e7da      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	0598      	lsls	r0, r3, #22
 8007d8a:	d4ed      	bmi.n	8007d68 <_vfiprintf_r+0x4c>
 8007d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d8e:	f000 fb84 	bl	800849a <__retarget_lock_release_recursive>
 8007d92:	e7e9      	b.n	8007d68 <_vfiprintf_r+0x4c>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da2:	2330      	movs	r3, #48	; 0x30
 8007da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f68 <_vfiprintf_r+0x24c>
 8007da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dac:	f04f 0901 	mov.w	r9, #1
 8007db0:	4623      	mov	r3, r4
 8007db2:	469a      	mov	sl, r3
 8007db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db8:	b10a      	cbz	r2, 8007dbe <_vfiprintf_r+0xa2>
 8007dba:	2a25      	cmp	r2, #37	; 0x25
 8007dbc:	d1f9      	bne.n	8007db2 <_vfiprintf_r+0x96>
 8007dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc2:	d00b      	beq.n	8007ddc <_vfiprintf_r+0xc0>
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ff94 	bl	8007cf8 <__sfputs_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f000 80aa 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd8:	445a      	add	r2, fp
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a2 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df0:	f10a 0a01 	add.w	sl, sl, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2205      	movs	r2, #5
 8007e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e06:	4858      	ldr	r0, [pc, #352]	; (8007f68 <_vfiprintf_r+0x24c>)
 8007e08:	f7f8 f9ea 	bl	80001e0 <memchr>
 8007e0c:	9a04      	ldr	r2, [sp, #16]
 8007e0e:	b9d8      	cbnz	r0, 8007e48 <_vfiprintf_r+0x12c>
 8007e10:	06d1      	lsls	r1, r2, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2320      	movmi	r3, #32
 8007e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1a:	0713      	lsls	r3, r2, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	232b      	movmi	r3, #43	; 0x2b
 8007e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2a:	d015      	beq.n	8007e58 <_vfiprintf_r+0x13c>
 8007e2c:	9a07      	ldr	r2, [sp, #28]
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2000      	movs	r0, #0
 8007e32:	f04f 0c0a 	mov.w	ip, #10
 8007e36:	4621      	mov	r1, r4
 8007e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e3c:	3b30      	subs	r3, #48	; 0x30
 8007e3e:	2b09      	cmp	r3, #9
 8007e40:	d94e      	bls.n	8007ee0 <_vfiprintf_r+0x1c4>
 8007e42:	b1b0      	cbz	r0, 8007e72 <_vfiprintf_r+0x156>
 8007e44:	9207      	str	r2, [sp, #28]
 8007e46:	e014      	b.n	8007e72 <_vfiprintf_r+0x156>
 8007e48:	eba0 0308 	sub.w	r3, r0, r8
 8007e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	46a2      	mov	sl, r4
 8007e56:	e7d2      	b.n	8007dfe <_vfiprintf_r+0xe2>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d19      	adds	r1, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbb      	ittet	lt
 8007e64:	425b      	neglt	r3, r3
 8007e66:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6a:	9307      	strge	r3, [sp, #28]
 8007e6c:	9307      	strlt	r3, [sp, #28]
 8007e6e:	bfb8      	it	lt
 8007e70:	9204      	strlt	r2, [sp, #16]
 8007e72:	7823      	ldrb	r3, [r4, #0]
 8007e74:	2b2e      	cmp	r3, #46	; 0x2e
 8007e76:	d10c      	bne.n	8007e92 <_vfiprintf_r+0x176>
 8007e78:	7863      	ldrb	r3, [r4, #1]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d135      	bne.n	8007eea <_vfiprintf_r+0x1ce>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e8e:	3402      	adds	r4, #2
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f78 <_vfiprintf_r+0x25c>
 8007e96:	7821      	ldrb	r1, [r4, #0]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	b140      	cbz	r0, 8007eb4 <_vfiprintf_r+0x198>
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	eba0 000a 	sub.w	r0, r0, sl
 8007ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb8:	482c      	ldr	r0, [pc, #176]	; (8007f6c <_vfiprintf_r+0x250>)
 8007eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ebe:	2206      	movs	r2, #6
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d03f      	beq.n	8007f48 <_vfiprintf_r+0x22c>
 8007ec8:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <_vfiprintf_r+0x254>)
 8007eca:	bb1b      	cbnz	r3, 8007f14 <_vfiprintf_r+0x1f8>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	3307      	adds	r3, #7
 8007ed0:	f023 0307 	bic.w	r3, r3, #7
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	9303      	str	r3, [sp, #12]
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	443b      	add	r3, r7
 8007edc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ede:	e767      	b.n	8007db0 <_vfiprintf_r+0x94>
 8007ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	e7a5      	b.n	8007e36 <_vfiprintf_r+0x11a>
 8007eea:	2300      	movs	r3, #0
 8007eec:	3401      	adds	r4, #1
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f04f 0c0a 	mov.w	ip, #10
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007efc:	3a30      	subs	r2, #48	; 0x30
 8007efe:	2a09      	cmp	r2, #9
 8007f00:	d903      	bls.n	8007f0a <_vfiprintf_r+0x1ee>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c5      	beq.n	8007e92 <_vfiprintf_r+0x176>
 8007f06:	9105      	str	r1, [sp, #20]
 8007f08:	e7c3      	b.n	8007e92 <_vfiprintf_r+0x176>
 8007f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f0      	b.n	8007ef6 <_vfiprintf_r+0x1da>
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f1c:	a904      	add	r1, sp, #16
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7fd fdd6 	bl	8005ad0 <_printf_float>
 8007f24:	4607      	mov	r7, r0
 8007f26:	1c78      	adds	r0, r7, #1
 8007f28:	d1d6      	bne.n	8007ed8 <_vfiprintf_r+0x1bc>
 8007f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d405      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	059a      	lsls	r2, r3, #22
 8007f34:	d402      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f38:	f000 faaf 	bl	800849a <__retarget_lock_release_recursive>
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	065b      	lsls	r3, r3, #25
 8007f40:	f53f af12 	bmi.w	8007d68 <_vfiprintf_r+0x4c>
 8007f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f46:	e711      	b.n	8007d6c <_vfiprintf_r+0x50>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7fe f860 	bl	8006018 <_printf_i>
 8007f58:	e7e4      	b.n	8007f24 <_vfiprintf_r+0x208>
 8007f5a:	bf00      	nop
 8007f5c:	08008cac 	.word	0x08008cac
 8007f60:	08008ccc 	.word	0x08008ccc
 8007f64:	08008c8c 	.word	0x08008c8c
 8007f68:	08008b34 	.word	0x08008b34
 8007f6c:	08008b3e 	.word	0x08008b3e
 8007f70:	08005ad1 	.word	0x08005ad1
 8007f74:	08007cf9 	.word	0x08007cf9
 8007f78:	08008b3a 	.word	0x08008b3a

08007f7c <__swbuf_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	460e      	mov	r6, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	4605      	mov	r5, r0
 8007f84:	b118      	cbz	r0, 8007f8e <__swbuf_r+0x12>
 8007f86:	6983      	ldr	r3, [r0, #24]
 8007f88:	b90b      	cbnz	r3, 8007f8e <__swbuf_r+0x12>
 8007f8a:	f000 f9e7 	bl	800835c <__sinit>
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <__swbuf_r+0x98>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d12b      	bne.n	8007fec <__swbuf_r+0x70>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	071a      	lsls	r2, r3, #28
 8007f9e:	d52f      	bpl.n	8008000 <__swbuf_r+0x84>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	b36b      	cbz	r3, 8008000 <__swbuf_r+0x84>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	6820      	ldr	r0, [r4, #0]
 8007fa8:	1ac0      	subs	r0, r0, r3
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	b2f6      	uxtb	r6, r6
 8007fae:	4283      	cmp	r3, r0
 8007fb0:	4637      	mov	r7, r6
 8007fb2:	dc04      	bgt.n	8007fbe <__swbuf_r+0x42>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f93c 	bl	8008234 <_fflush_r>
 8007fbc:	bb30      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	701e      	strb	r6, [r3, #0]
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	3001      	adds	r0, #1
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d004      	beq.n	8007fde <__swbuf_r+0x62>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	07db      	lsls	r3, r3, #31
 8007fd8:	d506      	bpl.n	8007fe8 <__swbuf_r+0x6c>
 8007fda:	2e0a      	cmp	r6, #10
 8007fdc:	d104      	bne.n	8007fe8 <__swbuf_r+0x6c>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f927 	bl	8008234 <_fflush_r>
 8007fe6:	b988      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <__swbuf_r+0x9c>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <__swbuf_r+0x7a>
 8007ff2:	68ac      	ldr	r4, [r5, #8]
 8007ff4:	e7cf      	b.n	8007f96 <__swbuf_r+0x1a>
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <__swbuf_r+0xa0>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68ec      	ldreq	r4, [r5, #12]
 8007ffe:	e7ca      	b.n	8007f96 <__swbuf_r+0x1a>
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f81a 	bl	800803c <__swsetup_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	d0cb      	beq.n	8007fa4 <__swbuf_r+0x28>
 800800c:	f04f 37ff 	mov.w	r7, #4294967295
 8008010:	e7ea      	b.n	8007fe8 <__swbuf_r+0x6c>
 8008012:	bf00      	nop
 8008014:	08008cac 	.word	0x08008cac
 8008018:	08008ccc 	.word	0x08008ccc
 800801c:	08008c8c 	.word	0x08008c8c

08008020 <__ascii_wctomb>:
 8008020:	b149      	cbz	r1, 8008036 <__ascii_wctomb+0x16>
 8008022:	2aff      	cmp	r2, #255	; 0xff
 8008024:	bf85      	ittet	hi
 8008026:	238a      	movhi	r3, #138	; 0x8a
 8008028:	6003      	strhi	r3, [r0, #0]
 800802a:	700a      	strbls	r2, [r1, #0]
 800802c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008030:	bf98      	it	ls
 8008032:	2001      	movls	r0, #1
 8008034:	4770      	bx	lr
 8008036:	4608      	mov	r0, r1
 8008038:	4770      	bx	lr
	...

0800803c <__swsetup_r>:
 800803c:	4b32      	ldr	r3, [pc, #200]	; (8008108 <__swsetup_r+0xcc>)
 800803e:	b570      	push	{r4, r5, r6, lr}
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	4606      	mov	r6, r0
 8008044:	460c      	mov	r4, r1
 8008046:	b125      	cbz	r5, 8008052 <__swsetup_r+0x16>
 8008048:	69ab      	ldr	r3, [r5, #24]
 800804a:	b913      	cbnz	r3, 8008052 <__swsetup_r+0x16>
 800804c:	4628      	mov	r0, r5
 800804e:	f000 f985 	bl	800835c <__sinit>
 8008052:	4b2e      	ldr	r3, [pc, #184]	; (800810c <__swsetup_r+0xd0>)
 8008054:	429c      	cmp	r4, r3
 8008056:	d10f      	bne.n	8008078 <__swsetup_r+0x3c>
 8008058:	686c      	ldr	r4, [r5, #4]
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008060:	0719      	lsls	r1, r3, #28
 8008062:	d42c      	bmi.n	80080be <__swsetup_r+0x82>
 8008064:	06dd      	lsls	r5, r3, #27
 8008066:	d411      	bmi.n	800808c <__swsetup_r+0x50>
 8008068:	2309      	movs	r3, #9
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	f04f 30ff 	mov.w	r0, #4294967295
 8008076:	e03e      	b.n	80080f6 <__swsetup_r+0xba>
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <__swsetup_r+0xd4>)
 800807a:	429c      	cmp	r4, r3
 800807c:	d101      	bne.n	8008082 <__swsetup_r+0x46>
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	e7eb      	b.n	800805a <__swsetup_r+0x1e>
 8008082:	4b24      	ldr	r3, [pc, #144]	; (8008114 <__swsetup_r+0xd8>)
 8008084:	429c      	cmp	r4, r3
 8008086:	bf08      	it	eq
 8008088:	68ec      	ldreq	r4, [r5, #12]
 800808a:	e7e6      	b.n	800805a <__swsetup_r+0x1e>
 800808c:	0758      	lsls	r0, r3, #29
 800808e:	d512      	bpl.n	80080b6 <__swsetup_r+0x7a>
 8008090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008092:	b141      	cbz	r1, 80080a6 <__swsetup_r+0x6a>
 8008094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <__swsetup_r+0x66>
 800809c:	4630      	mov	r0, r6
 800809e:	f7ff fb31 	bl	8007704 <_free_r>
 80080a2:	2300      	movs	r3, #0
 80080a4:	6363      	str	r3, [r4, #52]	; 0x34
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	2300      	movs	r3, #0
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0308 	orr.w	r3, r3, #8
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	b94b      	cbnz	r3, 80080d6 <__swsetup_r+0x9a>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080cc:	d003      	beq.n	80080d6 <__swsetup_r+0x9a>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 fa09 	bl	80084e8 <__smakebuf_r>
 80080d6:	89a0      	ldrh	r0, [r4, #12]
 80080d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080dc:	f010 0301 	ands.w	r3, r0, #1
 80080e0:	d00a      	beq.n	80080f8 <__swsetup_r+0xbc>
 80080e2:	2300      	movs	r3, #0
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	6963      	ldr	r3, [r4, #20]
 80080e8:	425b      	negs	r3, r3
 80080ea:	61a3      	str	r3, [r4, #24]
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	b943      	cbnz	r3, 8008102 <__swsetup_r+0xc6>
 80080f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080f4:	d1ba      	bne.n	800806c <__swsetup_r+0x30>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	0781      	lsls	r1, r0, #30
 80080fa:	bf58      	it	pl
 80080fc:	6963      	ldrpl	r3, [r4, #20]
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	e7f4      	b.n	80080ec <__swsetup_r+0xb0>
 8008102:	2000      	movs	r0, #0
 8008104:	e7f7      	b.n	80080f6 <__swsetup_r+0xba>
 8008106:	bf00      	nop
 8008108:	20000014 	.word	0x20000014
 800810c:	08008cac 	.word	0x08008cac
 8008110:	08008ccc 	.word	0x08008ccc
 8008114:	08008c8c 	.word	0x08008c8c

08008118 <abort>:
 8008118:	b508      	push	{r3, lr}
 800811a:	2006      	movs	r0, #6
 800811c:	f000 fa54 	bl	80085c8 <raise>
 8008120:	2001      	movs	r0, #1
 8008122:	f7fa fdab 	bl	8002c7c <_exit>
	...

08008128 <__sflush_r>:
 8008128:	898a      	ldrh	r2, [r1, #12]
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4605      	mov	r5, r0
 8008130:	0710      	lsls	r0, r2, #28
 8008132:	460c      	mov	r4, r1
 8008134:	d458      	bmi.n	80081e8 <__sflush_r+0xc0>
 8008136:	684b      	ldr	r3, [r1, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc05      	bgt.n	8008148 <__sflush_r+0x20>
 800813c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc02      	bgt.n	8008148 <__sflush_r+0x20>
 8008142:	2000      	movs	r0, #0
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814a:	2e00      	cmp	r6, #0
 800814c:	d0f9      	beq.n	8008142 <__sflush_r+0x1a>
 800814e:	2300      	movs	r3, #0
 8008150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008154:	682f      	ldr	r7, [r5, #0]
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	d032      	beq.n	80081c0 <__sflush_r+0x98>
 800815a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	075a      	lsls	r2, r3, #29
 8008160:	d505      	bpl.n	800816e <__sflush_r+0x46>
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008168:	b10b      	cbz	r3, 800816e <__sflush_r+0x46>
 800816a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	2300      	movs	r3, #0
 8008170:	4602      	mov	r2, r0
 8008172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	4628      	mov	r0, r5
 8008178:	47b0      	blx	r6
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	d106      	bne.n	800818e <__sflush_r+0x66>
 8008180:	6829      	ldr	r1, [r5, #0]
 8008182:	291d      	cmp	r1, #29
 8008184:	d82c      	bhi.n	80081e0 <__sflush_r+0xb8>
 8008186:	4a2a      	ldr	r2, [pc, #168]	; (8008230 <__sflush_r+0x108>)
 8008188:	40ca      	lsrs	r2, r1
 800818a:	07d6      	lsls	r6, r2, #31
 800818c:	d528      	bpl.n	80081e0 <__sflush_r+0xb8>
 800818e:	2200      	movs	r2, #0
 8008190:	6062      	str	r2, [r4, #4]
 8008192:	04d9      	lsls	r1, r3, #19
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	d504      	bpl.n	80081a4 <__sflush_r+0x7c>
 800819a:	1c42      	adds	r2, r0, #1
 800819c:	d101      	bne.n	80081a2 <__sflush_r+0x7a>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	b903      	cbnz	r3, 80081a4 <__sflush_r+0x7c>
 80081a2:	6560      	str	r0, [r4, #84]	; 0x54
 80081a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a6:	602f      	str	r7, [r5, #0]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d0ca      	beq.n	8008142 <__sflush_r+0x1a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__sflush_r+0x92>
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff faa5 	bl	8007704 <_free_r>
 80081ba:	2000      	movs	r0, #0
 80081bc:	6360      	str	r0, [r4, #52]	; 0x34
 80081be:	e7c1      	b.n	8008144 <__sflush_r+0x1c>
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	2301      	movs	r3, #1
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b0      	blx	r6
 80081c8:	1c41      	adds	r1, r0, #1
 80081ca:	d1c7      	bne.n	800815c <__sflush_r+0x34>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c4      	beq.n	800815c <__sflush_r+0x34>
 80081d2:	2b1d      	cmp	r3, #29
 80081d4:	d001      	beq.n	80081da <__sflush_r+0xb2>
 80081d6:	2b16      	cmp	r3, #22
 80081d8:	d101      	bne.n	80081de <__sflush_r+0xb6>
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	e7b1      	b.n	8008142 <__sflush_r+0x1a>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e7ad      	b.n	8008144 <__sflush_r+0x1c>
 80081e8:	690f      	ldr	r7, [r1, #16]
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d0a9      	beq.n	8008142 <__sflush_r+0x1a>
 80081ee:	0793      	lsls	r3, r2, #30
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	bf08      	it	eq
 80081f4:	694b      	ldreq	r3, [r1, #20]
 80081f6:	600f      	str	r7, [r1, #0]
 80081f8:	bf18      	it	ne
 80081fa:	2300      	movne	r3, #0
 80081fc:	eba6 0807 	sub.w	r8, r6, r7
 8008200:	608b      	str	r3, [r1, #8]
 8008202:	f1b8 0f00 	cmp.w	r8, #0
 8008206:	dd9c      	ble.n	8008142 <__sflush_r+0x1a>
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800820c:	4643      	mov	r3, r8
 800820e:	463a      	mov	r2, r7
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	2800      	cmp	r0, #0
 8008216:	dc06      	bgt.n	8008226 <__sflush_r+0xfe>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	e78e      	b.n	8008144 <__sflush_r+0x1c>
 8008226:	4407      	add	r7, r0
 8008228:	eba8 0800 	sub.w	r8, r8, r0
 800822c:	e7e9      	b.n	8008202 <__sflush_r+0xda>
 800822e:	bf00      	nop
 8008230:	20400001 	.word	0x20400001

08008234 <_fflush_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	690b      	ldr	r3, [r1, #16]
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b913      	cbnz	r3, 8008244 <_fflush_r+0x10>
 800823e:	2500      	movs	r5, #0
 8008240:	4628      	mov	r0, r5
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	b118      	cbz	r0, 800824e <_fflush_r+0x1a>
 8008246:	6983      	ldr	r3, [r0, #24]
 8008248:	b90b      	cbnz	r3, 800824e <_fflush_r+0x1a>
 800824a:	f000 f887 	bl	800835c <__sinit>
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <_fflush_r+0x6c>)
 8008250:	429c      	cmp	r4, r3
 8008252:	d11b      	bne.n	800828c <_fflush_r+0x58>
 8008254:	686c      	ldr	r4, [r5, #4]
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0ef      	beq.n	800823e <_fflush_r+0xa>
 800825e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008260:	07d0      	lsls	r0, r2, #31
 8008262:	d404      	bmi.n	800826e <_fflush_r+0x3a>
 8008264:	0599      	lsls	r1, r3, #22
 8008266:	d402      	bmi.n	800826e <_fflush_r+0x3a>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f915 	bl	8008498 <__retarget_lock_acquire_recursive>
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	f7ff ff59 	bl	8008128 <__sflush_r>
 8008276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008278:	07da      	lsls	r2, r3, #31
 800827a:	4605      	mov	r5, r0
 800827c:	d4e0      	bmi.n	8008240 <_fflush_r+0xc>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	059b      	lsls	r3, r3, #22
 8008282:	d4dd      	bmi.n	8008240 <_fflush_r+0xc>
 8008284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008286:	f000 f908 	bl	800849a <__retarget_lock_release_recursive>
 800828a:	e7d9      	b.n	8008240 <_fflush_r+0xc>
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <_fflush_r+0x70>)
 800828e:	429c      	cmp	r4, r3
 8008290:	d101      	bne.n	8008296 <_fflush_r+0x62>
 8008292:	68ac      	ldr	r4, [r5, #8]
 8008294:	e7df      	b.n	8008256 <_fflush_r+0x22>
 8008296:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <_fflush_r+0x74>)
 8008298:	429c      	cmp	r4, r3
 800829a:	bf08      	it	eq
 800829c:	68ec      	ldreq	r4, [r5, #12]
 800829e:	e7da      	b.n	8008256 <_fflush_r+0x22>
 80082a0:	08008cac 	.word	0x08008cac
 80082a4:	08008ccc 	.word	0x08008ccc
 80082a8:	08008c8c 	.word	0x08008c8c

080082ac <std>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b510      	push	{r4, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	e9c0 3300 	strd	r3, r3, [r0]
 80082b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ba:	6083      	str	r3, [r0, #8]
 80082bc:	8181      	strh	r1, [r0, #12]
 80082be:	6643      	str	r3, [r0, #100]	; 0x64
 80082c0:	81c2      	strh	r2, [r0, #14]
 80082c2:	6183      	str	r3, [r0, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	2208      	movs	r2, #8
 80082c8:	305c      	adds	r0, #92	; 0x5c
 80082ca:	f7fd fb59 	bl	8005980 <memset>
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <std+0x38>)
 80082d0:	6263      	str	r3, [r4, #36]	; 0x24
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <std+0x3c>)
 80082d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <std+0x40>)
 80082d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x44>)
 80082dc:	6224      	str	r4, [r4, #32]
 80082de:	6323      	str	r3, [r4, #48]	; 0x30
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	08008601 	.word	0x08008601
 80082e8:	08008623 	.word	0x08008623
 80082ec:	0800865b 	.word	0x0800865b
 80082f0:	0800867f 	.word	0x0800867f

080082f4 <_cleanup_r>:
 80082f4:	4901      	ldr	r1, [pc, #4]	; (80082fc <_cleanup_r+0x8>)
 80082f6:	f000 b8af 	b.w	8008458 <_fwalk_reent>
 80082fa:	bf00      	nop
 80082fc:	08008235 	.word	0x08008235

08008300 <__sfmoreglue>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	2268      	movs	r2, #104	; 0x68
 8008304:	1e4d      	subs	r5, r1, #1
 8008306:	4355      	muls	r5, r2
 8008308:	460e      	mov	r6, r1
 800830a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800830e:	f7ff fa65 	bl	80077dc <_malloc_r>
 8008312:	4604      	mov	r4, r0
 8008314:	b140      	cbz	r0, 8008328 <__sfmoreglue+0x28>
 8008316:	2100      	movs	r1, #0
 8008318:	e9c0 1600 	strd	r1, r6, [r0]
 800831c:	300c      	adds	r0, #12
 800831e:	60a0      	str	r0, [r4, #8]
 8008320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008324:	f7fd fb2c 	bl	8005980 <memset>
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__sfp_lock_acquire>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sfp_lock_acquire+0x8>)
 800832e:	f000 b8b3 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	200003d5 	.word	0x200003d5

08008338 <__sfp_lock_release>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_release+0x8>)
 800833a:	f000 b8ae 	b.w	800849a <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	200003d5 	.word	0x200003d5

08008344 <__sinit_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sinit_lock_acquire+0x8>)
 8008346:	f000 b8a7 	b.w	8008498 <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	200003d6 	.word	0x200003d6

08008350 <__sinit_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_release+0x8>)
 8008352:	f000 b8a2 	b.w	800849a <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	200003d6 	.word	0x200003d6

0800835c <__sinit>:
 800835c:	b510      	push	{r4, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	f7ff fff0 	bl	8008344 <__sinit_lock_acquire>
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	b11b      	cbz	r3, 8008370 <__sinit+0x14>
 8008368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800836c:	f7ff bff0 	b.w	8008350 <__sinit_lock_release>
 8008370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008374:	6523      	str	r3, [r4, #80]	; 0x50
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <__sinit+0x68>)
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <__sinit+0x6c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	62a2      	str	r2, [r4, #40]	; 0x28
 800837e:	42a3      	cmp	r3, r4
 8008380:	bf04      	itt	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	61a3      	streq	r3, [r4, #24]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f820 	bl	80083cc <__sfp>
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f81c 	bl	80083cc <__sfp>
 8008394:	60a0      	str	r0, [r4, #8]
 8008396:	4620      	mov	r0, r4
 8008398:	f000 f818 	bl	80083cc <__sfp>
 800839c:	2200      	movs	r2, #0
 800839e:	60e0      	str	r0, [r4, #12]
 80083a0:	2104      	movs	r1, #4
 80083a2:	6860      	ldr	r0, [r4, #4]
 80083a4:	f7ff ff82 	bl	80082ac <std>
 80083a8:	68a0      	ldr	r0, [r4, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	2109      	movs	r1, #9
 80083ae:	f7ff ff7d 	bl	80082ac <std>
 80083b2:	68e0      	ldr	r0, [r4, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	2112      	movs	r1, #18
 80083b8:	f7ff ff78 	bl	80082ac <std>
 80083bc:	2301      	movs	r3, #1
 80083be:	61a3      	str	r3, [r4, #24]
 80083c0:	e7d2      	b.n	8008368 <__sinit+0xc>
 80083c2:	bf00      	nop
 80083c4:	08008914 	.word	0x08008914
 80083c8:	080082f5 	.word	0x080082f5

080083cc <__sfp>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	4607      	mov	r7, r0
 80083d0:	f7ff ffac 	bl	800832c <__sfp_lock_acquire>
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <__sfp+0x84>)
 80083d6:	681e      	ldr	r6, [r3, #0]
 80083d8:	69b3      	ldr	r3, [r6, #24]
 80083da:	b913      	cbnz	r3, 80083e2 <__sfp+0x16>
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ffbd 	bl	800835c <__sinit>
 80083e2:	3648      	adds	r6, #72	; 0x48
 80083e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	d503      	bpl.n	80083f4 <__sfp+0x28>
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	b30b      	cbz	r3, 8008434 <__sfp+0x68>
 80083f0:	6836      	ldr	r6, [r6, #0]
 80083f2:	e7f7      	b.n	80083e4 <__sfp+0x18>
 80083f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083f8:	b9d5      	cbnz	r5, 8008430 <__sfp+0x64>
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <__sfp+0x88>)
 80083fc:	60e3      	str	r3, [r4, #12]
 80083fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008402:	6665      	str	r5, [r4, #100]	; 0x64
 8008404:	f000 f847 	bl	8008496 <__retarget_lock_init_recursive>
 8008408:	f7ff ff96 	bl	8008338 <__sfp_lock_release>
 800840c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008414:	6025      	str	r5, [r4, #0]
 8008416:	61a5      	str	r5, [r4, #24]
 8008418:	2208      	movs	r2, #8
 800841a:	4629      	mov	r1, r5
 800841c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008420:	f7fd faae 	bl	8005980 <memset>
 8008424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800842c:	4620      	mov	r0, r4
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	3468      	adds	r4, #104	; 0x68
 8008432:	e7d9      	b.n	80083e8 <__sfp+0x1c>
 8008434:	2104      	movs	r1, #4
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff62 	bl	8008300 <__sfmoreglue>
 800843c:	4604      	mov	r4, r0
 800843e:	6030      	str	r0, [r6, #0]
 8008440:	2800      	cmp	r0, #0
 8008442:	d1d5      	bne.n	80083f0 <__sfp+0x24>
 8008444:	f7ff ff78 	bl	8008338 <__sfp_lock_release>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	e7ee      	b.n	800842c <__sfp+0x60>
 800844e:	bf00      	nop
 8008450:	08008914 	.word	0x08008914
 8008454:	ffff0001 	.word	0xffff0001

08008458 <_fwalk_reent>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	4688      	mov	r8, r1
 8008460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008464:	2700      	movs	r7, #0
 8008466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846a:	f1b9 0901 	subs.w	r9, r9, #1
 800846e:	d505      	bpl.n	800847c <_fwalk_reent+0x24>
 8008470:	6824      	ldr	r4, [r4, #0]
 8008472:	2c00      	cmp	r4, #0
 8008474:	d1f7      	bne.n	8008466 <_fwalk_reent+0xe>
 8008476:	4638      	mov	r0, r7
 8008478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d907      	bls.n	8008492 <_fwalk_reent+0x3a>
 8008482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008486:	3301      	adds	r3, #1
 8008488:	d003      	beq.n	8008492 <_fwalk_reent+0x3a>
 800848a:	4629      	mov	r1, r5
 800848c:	4630      	mov	r0, r6
 800848e:	47c0      	blx	r8
 8008490:	4307      	orrs	r7, r0
 8008492:	3568      	adds	r5, #104	; 0x68
 8008494:	e7e9      	b.n	800846a <_fwalk_reent+0x12>

08008496 <__retarget_lock_init_recursive>:
 8008496:	4770      	bx	lr

08008498 <__retarget_lock_acquire_recursive>:
 8008498:	4770      	bx	lr

0800849a <__retarget_lock_release_recursive>:
 800849a:	4770      	bx	lr

0800849c <__swhatbuf_r>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	460e      	mov	r6, r1
 80084a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a4:	2900      	cmp	r1, #0
 80084a6:	b096      	sub	sp, #88	; 0x58
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	da08      	bge.n	80084c0 <__swhatbuf_r+0x24>
 80084ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	061a      	lsls	r2, r3, #24
 80084b8:	d410      	bmi.n	80084dc <__swhatbuf_r+0x40>
 80084ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084be:	e00e      	b.n	80084de <__swhatbuf_r+0x42>
 80084c0:	466a      	mov	r2, sp
 80084c2:	f000 f903 	bl	80086cc <_fstat_r>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	dbf1      	blt.n	80084ae <__swhatbuf_r+0x12>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084d4:	425a      	negs	r2, r3
 80084d6:	415a      	adcs	r2, r3
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	e7ee      	b.n	80084ba <__swhatbuf_r+0x1e>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	2000      	movs	r0, #0
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	b016      	add	sp, #88	; 0x58
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080084e8 <__smakebuf_r>:
 80084e8:	898b      	ldrh	r3, [r1, #12]
 80084ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ec:	079d      	lsls	r5, r3, #30
 80084ee:	4606      	mov	r6, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	d507      	bpl.n	8008504 <__smakebuf_r+0x1c>
 80084f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	2301      	movs	r3, #1
 80084fe:	6163      	str	r3, [r4, #20]
 8008500:	b002      	add	sp, #8
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	ab01      	add	r3, sp, #4
 8008506:	466a      	mov	r2, sp
 8008508:	f7ff ffc8 	bl	800849c <__swhatbuf_r>
 800850c:	9900      	ldr	r1, [sp, #0]
 800850e:	4605      	mov	r5, r0
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff f963 	bl	80077dc <_malloc_r>
 8008516:	b948      	cbnz	r0, 800852c <__smakebuf_r+0x44>
 8008518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d4ef      	bmi.n	8008500 <__smakebuf_r+0x18>
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e7e3      	b.n	80084f4 <__smakebuf_r+0xc>
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <__smakebuf_r+0x7c>)
 800852e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	6020      	str	r0, [r4, #0]
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	6163      	str	r3, [r4, #20]
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	6120      	str	r0, [r4, #16]
 8008542:	b15b      	cbz	r3, 800855c <__smakebuf_r+0x74>
 8008544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f8d1 	bl	80086f0 <_isatty_r>
 800854e:	b128      	cbz	r0, 800855c <__smakebuf_r+0x74>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	89a0      	ldrh	r0, [r4, #12]
 800855e:	4305      	orrs	r5, r0
 8008560:	81a5      	strh	r5, [r4, #12]
 8008562:	e7cd      	b.n	8008500 <__smakebuf_r+0x18>
 8008564:	080082f5 	.word	0x080082f5

08008568 <_malloc_usable_size_r>:
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f18      	subs	r0, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbc      	itt	lt
 8008572:	580b      	ldrlt	r3, [r1, r0]
 8008574:	18c0      	addlt	r0, r0, r3
 8008576:	4770      	bx	lr

08008578 <_raise_r>:
 8008578:	291f      	cmp	r1, #31
 800857a:	b538      	push	{r3, r4, r5, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	d904      	bls.n	800858c <_raise_r+0x14>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800858e:	b112      	cbz	r2, 8008596 <_raise_r+0x1e>
 8008590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008594:	b94b      	cbnz	r3, 80085aa <_raise_r+0x32>
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f830 	bl	80085fc <_getpid_r>
 800859c:	462a      	mov	r2, r5
 800859e:	4601      	mov	r1, r0
 80085a0:	4620      	mov	r0, r4
 80085a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a6:	f000 b817 	b.w	80085d8 <_kill_r>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d00a      	beq.n	80085c4 <_raise_r+0x4c>
 80085ae:	1c59      	adds	r1, r3, #1
 80085b0:	d103      	bne.n	80085ba <_raise_r+0x42>
 80085b2:	2316      	movs	r3, #22
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7e7      	b.n	800858a <_raise_r+0x12>
 80085ba:	2400      	movs	r4, #0
 80085bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c0:	4628      	mov	r0, r5
 80085c2:	4798      	blx	r3
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7e0      	b.n	800858a <_raise_r+0x12>

080085c8 <raise>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <raise+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f7ff bfd3 	b.w	8008578 <_raise_r>
 80085d2:	bf00      	nop
 80085d4:	20000014 	.word	0x20000014

080085d8 <_kill_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	; (80085f8 <_kill_r+0x20>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	f7fa fb39 	bl	8002c5c <_kill>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d102      	bne.n	80085f4 <_kill_r+0x1c>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b103      	cbz	r3, 80085f4 <_kill_r+0x1c>
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	200003d0 	.word	0x200003d0

080085fc <_getpid_r>:
 80085fc:	f7fa bb26 	b.w	8002c4c <_getpid>

08008600 <__sread>:
 8008600:	b510      	push	{r4, lr}
 8008602:	460c      	mov	r4, r1
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	f000 f894 	bl	8008734 <_read_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	bfab      	itete	ge
 8008610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008612:	89a3      	ldrhlt	r3, [r4, #12]
 8008614:	181b      	addge	r3, r3, r0
 8008616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800861a:	bfac      	ite	ge
 800861c:	6563      	strge	r3, [r4, #84]	; 0x54
 800861e:	81a3      	strhlt	r3, [r4, #12]
 8008620:	bd10      	pop	{r4, pc}

08008622 <__swrite>:
 8008622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	461f      	mov	r7, r3
 8008628:	898b      	ldrh	r3, [r1, #12]
 800862a:	05db      	lsls	r3, r3, #23
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	4616      	mov	r6, r2
 8008632:	d505      	bpl.n	8008640 <__swrite+0x1e>
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	2302      	movs	r3, #2
 800863a:	2200      	movs	r2, #0
 800863c:	f000 f868 	bl	8008710 <_lseek_r>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	4632      	mov	r2, r6
 800864e:	463b      	mov	r3, r7
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	f000 b817 	b.w	8008688 <_write_r>

0800865a <__sseek>:
 800865a:	b510      	push	{r4, lr}
 800865c:	460c      	mov	r4, r1
 800865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008662:	f000 f855 	bl	8008710 <_lseek_r>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	bf15      	itete	ne
 800866c:	6560      	strne	r0, [r4, #84]	; 0x54
 800866e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008676:	81a3      	strheq	r3, [r4, #12]
 8008678:	bf18      	it	ne
 800867a:	81a3      	strhne	r3, [r4, #12]
 800867c:	bd10      	pop	{r4, pc}

0800867e <__sclose>:
 800867e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008682:	f000 b813 	b.w	80086ac <_close_r>
	...

08008688 <_write_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	; (80086a8 <_write_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7fa fb17 	bl	8002cca <_write>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_write_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_write_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	200003d0 	.word	0x200003d0

080086ac <_close_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d06      	ldr	r5, [pc, #24]	; (80086c8 <_close_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7fa fb23 	bl	8002d02 <_close>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_close_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_close_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	200003d0 	.word	0x200003d0

080086cc <_fstat_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	; (80086ec <_fstat_r+0x20>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	f7fa fb1e 	bl	8002d1a <_fstat>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d102      	bne.n	80086e8 <_fstat_r+0x1c>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	b103      	cbz	r3, 80086e8 <_fstat_r+0x1c>
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop
 80086ec:	200003d0 	.word	0x200003d0

080086f0 <_isatty_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_isatty_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7fa fb1d 	bl	8002d3a <_isatty>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_isatty_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_isatty_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200003d0 	.word	0x200003d0

08008710 <_lseek_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_lseek_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7fa fb16 	bl	8002d50 <_lseek>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_lseek_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_lseek_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	200003d0 	.word	0x200003d0

08008734 <_read_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_read_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7fa faa4 	bl	8002c90 <_read>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_read_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_read_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	200003d0 	.word	0x200003d0

08008758 <_init>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr

08008764 <_fini>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr
